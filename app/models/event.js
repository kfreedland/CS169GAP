/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/event.js']) {
  _$jscoverage['models/event.js'] = [];
  _$jscoverage['models/event.js'][1] = 0;
  _$jscoverage['models/event.js'][3] = 0;
  _$jscoverage['models/event.js'][4] = 0;
  _$jscoverage['models/event.js'][5] = 0;
  _$jscoverage['models/event.js'][6] = 0;
  _$jscoverage['models/event.js'][8] = 0;
  _$jscoverage['models/event.js'][10] = 0;
  _$jscoverage['models/event.js'][44] = 0;
  _$jscoverage['models/event.js'][46] = 0;
  _$jscoverage['models/event.js'][48] = 0;
  _$jscoverage['models/event.js'][49] = 0;
  _$jscoverage['models/event.js'][51] = 0;
  _$jscoverage['models/event.js'][52] = 0;
  _$jscoverage['models/event.js'][54] = 0;
  _$jscoverage['models/event.js'][56] = 0;
  _$jscoverage['models/event.js'][58] = 0;
  _$jscoverage['models/event.js'][61] = 0;
  _$jscoverage['models/event.js'][62] = 0;
  _$jscoverage['models/event.js'][63] = 0;
  _$jscoverage['models/event.js'][64] = 0;
  _$jscoverage['models/event.js'][65] = 0;
  _$jscoverage['models/event.js'][66] = 0;
  _$jscoverage['models/event.js'][67] = 0;
  _$jscoverage['models/event.js'][68] = 0;
  _$jscoverage['models/event.js'][69] = 0;
  _$jscoverage['models/event.js'][70] = 0;
  _$jscoverage['models/event.js'][72] = 0;
  _$jscoverage['models/event.js'][74] = 0;
  _$jscoverage['models/event.js'][76] = 0;
  _$jscoverage['models/event.js'][81] = 0;
  _$jscoverage['models/event.js'][83] = 0;
  _$jscoverage['models/event.js'][85] = 0;
  _$jscoverage['models/event.js'][89] = 0;
  _$jscoverage['models/event.js'][91] = 0;
  _$jscoverage['models/event.js'][92] = 0;
  _$jscoverage['models/event.js'][94] = 0;
  _$jscoverage['models/event.js'][105] = 0;
  _$jscoverage['models/event.js'][110] = 0;
  _$jscoverage['models/event.js'][117] = 0;
  _$jscoverage['models/event.js'][122] = 0;
  _$jscoverage['models/event.js'][123] = 0;
  _$jscoverage['models/event.js'][127] = 0;
  _$jscoverage['models/event.js'][128] = 0;
  _$jscoverage['models/event.js'][129] = 0;
  _$jscoverage['models/event.js'][130] = 0;
  _$jscoverage['models/event.js'][132] = 0;
  _$jscoverage['models/event.js'][133] = 0;
  _$jscoverage['models/event.js'][136] = 0;
  _$jscoverage['models/event.js'][137] = 0;
  _$jscoverage['models/event.js'][141] = 0;
  _$jscoverage['models/event.js'][143] = 0;
  _$jscoverage['models/event.js'][145] = 0;
  _$jscoverage['models/event.js'][149] = 0;
  _$jscoverage['models/event.js'][152] = 0;
  _$jscoverage['models/event.js'][153] = 0;
  _$jscoverage['models/event.js'][157] = 0;
  _$jscoverage['models/event.js'][163] = 0;
  _$jscoverage['models/event.js'][164] = 0;
  _$jscoverage['models/event.js'][165] = 0;
  _$jscoverage['models/event.js'][166] = 0;
  _$jscoverage['models/event.js'][170] = 0;
  _$jscoverage['models/event.js'][171] = 0;
  _$jscoverage['models/event.js'][173] = 0;
  _$jscoverage['models/event.js'][174] = 0;
  _$jscoverage['models/event.js'][176] = 0;
  _$jscoverage['models/event.js'][178] = 0;
  _$jscoverage['models/event.js'][182] = 0;
  _$jscoverage['models/event.js'][184] = 0;
  _$jscoverage['models/event.js'][188] = 0;
  _$jscoverage['models/event.js'][190] = 0;
  _$jscoverage['models/event.js'][191] = 0;
  _$jscoverage['models/event.js'][193] = 0;
  _$jscoverage['models/event.js'][195] = 0;
  _$jscoverage['models/event.js'][196] = 0;
  _$jscoverage['models/event.js'][197] = 0;
  _$jscoverage['models/event.js'][203] = 0;
  _$jscoverage['models/event.js'][206] = 0;
  _$jscoverage['models/event.js'][209] = 0;
  _$jscoverage['models/event.js'][210] = 0;
  _$jscoverage['models/event.js'][212] = 0;
  _$jscoverage['models/event.js'][213] = 0;
  _$jscoverage['models/event.js'][214] = 0;
  _$jscoverage['models/event.js'][216] = 0;
  _$jscoverage['models/event.js'][219] = 0;
  _$jscoverage['models/event.js'][220] = 0;
  _$jscoverage['models/event.js'][221] = 0;
  _$jscoverage['models/event.js'][222] = 0;
  _$jscoverage['models/event.js'][225] = 0;
  _$jscoverage['models/event.js'][228] = 0;
  _$jscoverage['models/event.js'][229] = 0;
  _$jscoverage['models/event.js'][230] = 0;
  _$jscoverage['models/event.js'][231] = 0;
  _$jscoverage['models/event.js'][234] = 0;
  _$jscoverage['models/event.js'][237] = 0;
  _$jscoverage['models/event.js'][238] = 0;
  _$jscoverage['models/event.js'][239] = 0;
  _$jscoverage['models/event.js'][240] = 0;
  _$jscoverage['models/event.js'][244] = 0;
  _$jscoverage['models/event.js'][245] = 0;
  _$jscoverage['models/event.js'][246] = 0;
  _$jscoverage['models/event.js'][248] = 0;
  _$jscoverage['models/event.js'][249] = 0;
  _$jscoverage['models/event.js'][252] = 0;
  _$jscoverage['models/event.js'][255] = 0;
  _$jscoverage['models/event.js'][261] = 0;
  _$jscoverage['models/event.js'][263] = 0;
  _$jscoverage['models/event.js'][264] = 0;
  _$jscoverage['models/event.js'][265] = 0;
  _$jscoverage['models/event.js'][266] = 0;
  _$jscoverage['models/event.js'][267] = 0;
  _$jscoverage['models/event.js'][271] = 0;
  _$jscoverage['models/event.js'][273] = 0;
  _$jscoverage['models/event.js'][278] = 0;
  _$jscoverage['models/event.js'][279] = 0;
  _$jscoverage['models/event.js'][280] = 0;
  _$jscoverage['models/event.js'][281] = 0;
  _$jscoverage['models/event.js'][286] = 0;
  _$jscoverage['models/event.js'][289] = 0;
  _$jscoverage['models/event.js'][291] = 0;
  _$jscoverage['models/event.js'][292] = 0;
  _$jscoverage['models/event.js'][297] = 0;
  _$jscoverage['models/event.js'][302] = 0;
  _$jscoverage['models/event.js'][310] = 0;
  _$jscoverage['models/event.js'][319] = 0;
  _$jscoverage['models/event.js'][320] = 0;
  _$jscoverage['models/event.js'][321] = 0;
  _$jscoverage['models/event.js'][322] = 0;
  _$jscoverage['models/event.js'][323] = 0;
  _$jscoverage['models/event.js'][324] = 0;
  _$jscoverage['models/event.js'][326] = 0;
  _$jscoverage['models/event.js'][327] = 0;
  _$jscoverage['models/event.js'][328] = 0;
  _$jscoverage['models/event.js'][331] = 0;
  _$jscoverage['models/event.js'][341] = 0;
  _$jscoverage['models/event.js'][342] = 0;
  _$jscoverage['models/event.js'][346] = 0;
  _$jscoverage['models/event.js'][351] = 0;
  _$jscoverage['models/event.js'][352] = 0;
  _$jscoverage['models/event.js'][353] = 0;
  _$jscoverage['models/event.js'][356] = 0;
  _$jscoverage['models/event.js'][357] = 0;
  _$jscoverage['models/event.js'][360] = 0;
  _$jscoverage['models/event.js'][361] = 0;
  _$jscoverage['models/event.js'][362] = 0;
  _$jscoverage['models/event.js'][365] = 0;
  _$jscoverage['models/event.js'][366] = 0;
  _$jscoverage['models/event.js'][367] = 0;
  _$jscoverage['models/event.js'][368] = 0;
  _$jscoverage['models/event.js'][369] = 0;
  _$jscoverage['models/event.js'][370] = 0;
  _$jscoverage['models/event.js'][371] = 0;
  _$jscoverage['models/event.js'][372] = 0;
  _$jscoverage['models/event.js'][373] = 0;
  _$jscoverage['models/event.js'][374] = 0;
  _$jscoverage['models/event.js'][375] = 0;
  _$jscoverage['models/event.js'][376] = 0;
  _$jscoverage['models/event.js'][377] = 0;
  _$jscoverage['models/event.js'][378] = 0;
  _$jscoverage['models/event.js'][380] = 0;
  _$jscoverage['models/event.js'][381] = 0;
  _$jscoverage['models/event.js'][386] = 0;
  _$jscoverage['models/event.js'][393] = 0;
  _$jscoverage['models/event.js'][394] = 0;
  _$jscoverage['models/event.js'][395] = 0;
  _$jscoverage['models/event.js'][396] = 0;
  _$jscoverage['models/event.js'][397] = 0;
  _$jscoverage['models/event.js'][398] = 0;
  _$jscoverage['models/event.js'][413] = 0;
  _$jscoverage['models/event.js'][414] = 0;
  _$jscoverage['models/event.js'][416] = 0;
  _$jscoverage['models/event.js'][418] = 0;
  _$jscoverage['models/event.js'][420] = 0;
  _$jscoverage['models/event.js'][421] = 0;
  _$jscoverage['models/event.js'][422] = 0;
  _$jscoverage['models/event.js'][426] = 0;
}
_$jscoverage['models/event.js'][1]++;
var nodemailer = require("nodemailer"), check = require("validator").check;
_$jscoverage['models/event.js'][3]++;
var incorrectParams = {errCode: 6};
_$jscoverage['models/event.js'][4]++;
var backendError = {errCode: 7};
_$jscoverage['models/event.js'][5]++;
var badTimes = {errCode: 8};
_$jscoverage['models/event.js'][6]++;
var badTableJoin = {errCode: 9};
_$jscoverage['models/event.js'][8]++;
var Event = (function () {
  _$jscoverage['models/event.js'][10]++;
  this.defineProperties({name: {type: "string", required: true}, description: {type: "string"}, time1: {type: "number"}, time2: {type: "number"}, begindate: {type: "number"}, enddate: {type: "number"}, activityid: {type: "string"}, attendingusers: {type: "string"}});
  _$jscoverage['models/event.js'][44]++;
  Event.add = (function (params, callback) {
  _$jscoverage['models/event.js'][46]++;
  if (params.name && params.startdate && params.enddate && params.time1 && params.time2 && params.activityid && params.attendingusers) {
    _$jscoverage['models/event.js'][48]++;
    var usernamesOrEmails = params.attendingusers.split(",");
    _$jscoverage['models/event.js'][49]++;
    getEmailAndId(usernamesOrEmails, callback, (function (emailAndId) {
  _$jscoverage['models/event.js'][51]++;
  var emails = emailAndId.email;
  _$jscoverage['models/event.js'][52]++;
  var userIds = emailAndId.id;
  _$jscoverage['models/event.js'][54]++;
  geddy.model.Activity.first({id: params.activityid}, (function (err, activityRecord) {
  _$jscoverage['models/event.js'][56]++;
  if (activityRecord && activityRecord.name) {
    _$jscoverage['models/event.js'][58]++;
    if (params.startdate <= params.enddate && params.time1 <= params.time2) {
      _$jscoverage['models/event.js'][61]++;
      eventDict = {};
      _$jscoverage['models/event.js'][62]++;
      eventDict.name = params.name;
      _$jscoverage['models/event.js'][63]++;
      eventDict.startdate = params.startdate;
      _$jscoverage['models/event.js'][64]++;
      eventDict.enddate = params.enddate;
      _$jscoverage['models/event.js'][65]++;
      eventDict.time1 = params.time1;
      _$jscoverage['models/event.js'][66]++;
      eventDict.time2 = params.time2;
      _$jscoverage['models/event.js'][67]++;
      eventDict.description = params.description;
      _$jscoverage['models/event.js'][68]++;
      eventDict.activityid = params.activityid;
      _$jscoverage['models/event.js'][69]++;
      eventDict.attendingusers = userIds.toString();
      _$jscoverage['models/event.js'][70]++;
      var eventRecord = geddy.model.Event.create(eventDict);
      _$jscoverage['models/event.js'][72]++;
      geddy.model.Event.save(eventRecord, (function (err, result) {
  _$jscoverage['models/event.js'][74]++;
  if (err) {
    _$jscoverage['models/event.js'][76]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][81]++;
    geddy.model.Event.first({attendingusers: userIds.toString()}, (function (err, eventRecord) {
  _$jscoverage['models/event.js'][83]++;
  if (err) {
    _$jscoverage['models/event.js'][85]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][89]++;
    addEventToUsers(eventRecord.id, userIds, (function (respDict) {
  _$jscoverage['models/event.js'][91]++;
  var message = "People want you to join the following activity: " + activityRecord.name;
  _$jscoverage['models/event.js'][92]++;
  invite({eventid: eventRecord.id, emails: emails, message: message}, (function () {
  _$jscoverage['models/event.js'][94]++;
  callback(respDict);
}));
}));
  }
}));
  }
}));
    }
    else {
      _$jscoverage['models/event.js'][105]++;
      callback(badTimes);
    }
  }
  else {
    _$jscoverage['models/event.js'][110]++;
    callback(badTableJoin);
  }
}));
}));
  }
  else {
    _$jscoverage['models/event.js'][117]++;
    callback(incorrectParams);
  }
});
  _$jscoverage['models/event.js'][122]++;
  function invite(params, callback) {
    _$jscoverage['models/event.js'][123]++;
    callback();
}
  _$jscoverage['models/event.js'][127]++;
  function getEmailAndId(usernamesOrEmails, errorCallback, successCallback) {
    _$jscoverage['models/event.js'][128]++;
    emails = [];
    _$jscoverage['models/event.js'][129]++;
    userIds = [];
    _$jscoverage['models/event.js'][130]++;
    for (var key in usernamesOrEmails) {
      _$jscoverage['models/event.js'][132]++;
      var name = usernamesOrEmails[key];
      _$jscoverage['models/event.js'][133]++;
      if (name.indexOf("@") >= 0) {
        _$jscoverage['models/event.js'][136]++;
        emails.push(name);
        _$jscoverage['models/event.js'][137]++;
        continue;
      }
      else {
        _$jscoverage['models/event.js'][141]++;
        geddy.model.User.first({username: name}, (function (err, record) {
  _$jscoverage['models/event.js'][143]++;
  if (err) {
    _$jscoverage['models/event.js'][145]++;
    errorCallback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][149]++;
    if (record && record.email && record.id) {
      _$jscoverage['models/event.js'][152]++;
      emails.push(record.email);
      _$jscoverage['models/event.js'][153]++;
      userIds.push(record.id);
    }
    else {
      _$jscoverage['models/event.js'][157]++;
      errorCallback(badTableJoin);
    }
  }
}));
      }
}
    _$jscoverage['models/event.js'][163]++;
    result = {};
    _$jscoverage['models/event.js'][164]++;
    result.email = emails;
    _$jscoverage['models/event.js'][165]++;
    result.id = userIds;
    _$jscoverage['models/event.js'][166]++;
    successCallback(result);
}
});
_$jscoverage['models/event.js'][170]++;
function addEventToUsers(eventid, uesrIds, callback) {
  _$jscoverage['models/event.js'][171]++;
  for (var key in userIds) {
    _$jscoverage['models/event.js'][173]++;
    var uid = userIds[key];
    _$jscoverage['models/event.js'][174]++;
    geddy.model.User.first({id: uid}, (function (err, record) {
  _$jscoverage['models/event.js'][176]++;
  if (err) {
    _$jscoverage['models/event.js'][178]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][182]++;
    if (record.myevents) {
      _$jscoverage['models/event.js'][184]++;
      record.myevents += "," + eventid;
    }
    else {
      _$jscoverage['models/event.js'][188]++;
      record.myevents = eventid;
    }
    _$jscoverage['models/event.js'][190]++;
    record.confirmPassword = record.password;
    _$jscoverage['models/event.js'][191]++;
    geddy.model.User.save(record, (function (err, result) {
  _$jscoverage['models/event.js'][193]++;
  if (err) {
    _$jscoverage['models/event.js'][195]++;
    console.log("err ");
    _$jscoverage['models/event.js'][196]++;
    console.dir(err);
    _$jscoverage['models/event.js'][197]++;
    callback(backendError);
  }
}));
  }
}));
}
  _$jscoverage['models/event.js'][203]++;
  callback({errCode: 1});
}
_$jscoverage['models/event.js'][206]++;
Event.invite = (function (params, callback) {
  _$jscoverage['models/event.js'][209]++;
  var self = this;
  _$jscoverage['models/event.js'][210]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][212]++;
  var eventID = params.eventid;
  _$jscoverage['models/event.js'][213]++;
  var emailList = params.emails;
  _$jscoverage['models/event.js'][214]++;
  var message = params.message;
  _$jscoverage['models/event.js'][216]++;
  if (eventID === null || eventID === undefined) {
    _$jscoverage['models/event.js'][219]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][220]++;
    responseDict.message = "null eventid";
    _$jscoverage['models/event.js'][221]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][222]++;
    return;
  }
  _$jscoverage['models/event.js'][225]++;
  if (emailList === null || emailList === undefined || emailList === []) {
    _$jscoverage['models/event.js'][228]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][229]++;
    responseDict.message = "null emails";
    _$jscoverage['models/event.js'][230]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][231]++;
    return;
  }
  _$jscoverage['models/event.js'][234]++;
  if (message === null || message === undefined) {
    _$jscoverage['models/event.js'][237]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][238]++;
    responseDict.message = "null message";
    _$jscoverage['models/event.js'][239]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][240]++;
    return;
  }
  _$jscoverage['models/event.js'][244]++;
  var badEmails = [];
  _$jscoverage['models/event.js'][245]++;
  var goodEmailsString = "";
  _$jscoverage['models/event.js'][246]++;
  for (var index in emailList) {
    _$jscoverage['models/event.js'][248]++;
    var emailAddr = emailList[index];
    _$jscoverage['models/event.js'][249]++;
    if (! isValidEmail(emailAddr)) {
      _$jscoverage['models/event.js'][252]++;
      badEmails.push(emailAddr);
    }
    else {
      _$jscoverage['models/event.js'][255]++;
      goodEmailsString += emailAddr + ", ";
    }
}
  _$jscoverage['models/event.js'][261]++;
  if (badEmails.count > 0) {
    _$jscoverage['models/event.js'][263]++;
    responseDict.errCode = 12;
    _$jscoverage['models/event.js'][264]++;
    responseDict.message = "malformed emails";
    _$jscoverage['models/event.js'][265]++;
    responseDict.bademails = badEmails;
    _$jscoverage['models/event.js'][266]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][267]++;
    return;
  }
  _$jscoverage['models/event.js'][271]++;
  if (goodEmailsString.length > 2) {
    _$jscoverage['models/event.js'][273]++;
    goodEmailsString = goodEmailsString.substring(0, goodEmailsString.length - 3);
  }
  else {
    _$jscoverage['models/event.js'][278]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][279]++;
    responseDict.message = "couldn't find any good emails";
    _$jscoverage['models/event.js'][280]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][281]++;
    return;
  }
  _$jscoverage['models/event.js'][286]++;
  geddy.model.Event.first({id: eventID}, (function (err, result) {
  _$jscoverage['models/event.js'][289]++;
  if (err) {
    _$jscoverage['models/event.js'][291]++;
    responseDict.errCode = 10;
    _$jscoverage['models/event.js'][292]++;
    responseDict.message = "invalid eventid";
  }
  else {
    _$jscoverage['models/event.js'][297]++;
    if (result) {
      _$jscoverage['models/event.js'][302]++;
      var smtpTransport = nodemailer.createTransport("SMTP", {service: "Gmail", auth: {user: "groupactivityplanner@gmail.com", pass: "gapgapgap"}});
      _$jscoverage['models/event.js'][310]++;
      var mailOptions = {from: "Group Activity Planner \u00e2\u009c\u0094 <groupactivityplanner@gmail.com>", to: goodEmailsString, subject: "You have been invited to an event!", text: message, html: null};
      _$jscoverage['models/event.js'][319]++;
      smtpTransport.sendMail(mailOptions, (function (error, response) {
  _$jscoverage['models/event.js'][320]++;
  if (error) {
    _$jscoverage['models/event.js'][321]++;
    responseDict.errCode = 13;
    _$jscoverage['models/event.js'][322]++;
    responseDict.message = "email failed";
    _$jscoverage['models/event.js'][323]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][324]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][326]++;
    responseDict.errCode = 1;
    _$jscoverage['models/event.js'][327]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][328]++;
    return;
  }
  _$jscoverage['models/event.js'][331]++;
  smtpTransport.close();
}));
    }
  }
}));
});
_$jscoverage['models/event.js'][341]++;
function isValidEmail(email) {
  _$jscoverage['models/event.js'][342]++;
  return check(email).isEmail();
}
_$jscoverage['models/event.js'][346]++;
Event.changeDateTime = (function (params, callback) {
});
_$jscoverage['models/event.js'][351]++;
Event.getMyEvents = (function (params, callback) {
  _$jscoverage['models/event.js'][352]++;
  geddy.model.User.first({id: params.userId}, (function (err, userModel) {
  _$jscoverage['models/event.js'][353]++;
  if (err) {
  }
  else {
    _$jscoverage['models/event.js'][356]++;
    if (err) {
      _$jscoverage['models/event.js'][357]++;
      responseDict.events = [];
      _$jscoverage['models/event.js'][360]++;
      responseDict.errCode = 7;
      _$jscoverage['models/event.js'][361]++;
      callback(responseDict);
    }
    else {
      _$jscoverage['models/event.js'][362]++;
      if (userModel) {
        _$jscoverage['models/event.js'][365]++;
        var myEvents = [];
        _$jscoverage['models/event.js'][366]++;
        if (userModel.myevents) {
          _$jscoverage['models/event.js'][367]++;
          var eventIds = userModel.myevents.split(",");
          _$jscoverage['models/event.js'][368]++;
          for (var index in eventIds) {
            _$jscoverage['models/event.js'][369]++;
            var eventId = eventIds[index];
            _$jscoverage['models/event.js'][370]++;
            geddy.model.Event.first({id: eventId}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][371]++;
  if (err) {
    _$jscoverage['models/event.js'][372]++;
    responseDict.events = [];
    _$jscoverage['models/event.js'][373]++;
    console.log("err exists: ");
    _$jscoverage['models/event.js'][374]++;
    console.dir(err);
    _$jscoverage['models/event.js'][375]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][376]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/event.js'][377]++;
    if (eventModel) {
      _$jscoverage['models/event.js'][378]++;
      myEvents.push(eventModel);
    }
  }
  _$jscoverage['models/event.js'][380]++;
  if (index == eventIds.length - 1) {
    _$jscoverage['models/event.js'][381]++;
    getEventsCallback(1, myEvents, callback);
  }
}));
}
        }
        else {
          _$jscoverage['models/event.js'][386]++;
          getEventsCallback(1, myEvents, callback);
        }
      }
    }
  }
}));
});
_$jscoverage['models/event.js'][393]++;
function getEventsCallback(errCode, events, callback) {
  _$jscoverage['models/event.js'][394]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][395]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][396]++;
  responseDict.events = events;
  _$jscoverage['models/event.js'][397]++;
  callback(responseDict);
}
_$jscoverage['models/event.js'][398]++;
;
_$jscoverage['models/event.js'][413]++;
Event.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/event.js'][414]++;
  geddy.model.Event.all((function (err, result) {
  _$jscoverage['models/event.js'][416]++;
  for (var eventModel in result) {
    _$jscoverage['models/event.js'][418]++;
    geddy.model.Event.remove(result[eventModel].id);
}
  _$jscoverage['models/event.js'][420]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][421]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][422]++;
  callback(responseDict);
}));
});
_$jscoverage['models/event.js'][426]++;
Event = geddy.model.register("Event", Event);
_$jscoverage['models/event.js'].source = ["var nodemailer = require(\"nodemailer\")","  , check = require(\"validator\").check;","var incorrectParams = {errCode: 6};","var backendError = {errCode: 7};","var badTimes = {errCode: 8};","var badTableJoin = {errCode: 9};","","var Event = function () {","","  this.defineProperties({","    name: {type: 'string', required: true},","    description: {type: 'string'},","    time1: {type: 'number'},","    time2: {type: 'number'},","    begindate: {type: 'number'},","    enddate: {type: 'number'},","    activityid: {type: 'string'},","    attendingusers: {type: 'string'}","  });","","  /*","  this.property('login', 'string', {required: true});","  this.property('password', 'string', {required: true});","  this.property('lastName', 'string');","  this.property('firstName', 'string');","","  this.validatesPresent('login');","  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});","  this.validatesLength('login', {min: 3});","  // Use with the name of the other parameter to compare with","  this.validatesConfirmed('password', 'confirmPassword');","  // Use with any function that returns a Boolean","  this.validatesWithFunction('password', function (s) {","      return s.length &gt; 0;","  });","","  // Can define methods for instances like this","  this.someMethod = function () {","    // Do some stuff","  };","  */","","","Event.add = function(params, callback)","{","  if(params.name &amp;&amp; params.startdate &amp;&amp; params.enddate &amp;&amp; params.time1  &amp;&amp; params.time2 &amp;&amp; params.activityid &amp;&amp; params.attendingusers)","  {","    var usernamesOrEmails = params.attendingusers.split(',');","    getEmailAndId(usernamesOrEmails, callback, function(emailAndId)","    {","      var emails = emailAndId.email;","      var userIds = emailAndId.id;","","      geddy.model.Activity.first({id: params.activityid}, function(err, activityRecord)","      {","        if(activityRecord &amp;&amp;  activityRecord.name) //basic assertion that record exists","        {","          if(params.startdate &lt;= params.enddate &amp;&amp; params.time1 &lt;= params.time2)","          {","            //all required fields are valid","            eventDict = {};","            eventDict.name = params.name;","            eventDict.startdate = params.startdate;","            eventDict.enddate = params.enddate;","            eventDict.time1 = params.time1;","            eventDict.time2 = params.time2;","            eventDict.description = params.description;","            eventDict.activityid = params.activityid;","            eventDict.attendingusers = userIds.toString();","            var eventRecord = geddy.model.Event.create(eventDict);","","            geddy.model.Event.save(eventRecord, function(err, result)","            {","              if(err)","              {","                callback(backendError);","              }","              else","              {","                //now we have to add the eventRecord to each user","                geddy.model.Event.first({attendingusers: userIds.toString()}, function(err, eventRecord)","                {","                  if(err)","                  {","                    callback(backendError);","                  }","                  else","                  {","                    addEventToUsers(eventRecord.id, userIds, function(respDict)","                    {","                      var message = \"People want you to join the following activity: \"+activityRecord.name;","                      invite({eventid: eventRecord.id, emails: emails , message: message}, function()","                      {","                        callback(respDict);","                      });","                    });","                  }","","                });","              }","            });","          }","          else","          {","            callback(badTimes);","          }","        }","        else","        {","          callback(badTableJoin);","        }","      });","    });","  }","  else","  {","    callback(incorrectParams);","  }","};","","function invite(params, callback)","{","  callback();","}","","function getEmailAndId(usernamesOrEmails, errorCallback, successCallback)","{","  emails = [];","  userIds = [];","  for(var key in usernamesOrEmails)","  {","    var name = usernamesOrEmails[key];","    if(name.indexOf('@') &gt;= 0) //special characters cant be in usernames only in emails","    {","      //console.log('EMAIL found is: '+name);","      emails.push(name);","      continue;","    }","    else","    {","      geddy.model.User.first({username: name}, function(err, record)","      {","          if(err)","          {","            errorCallback(backendError);","          }","          else","          {","            if(record &amp;&amp; record.email &amp;&amp; record.id)","            {","              //console.log('EMAIL found is: '+record.email);","              emails.push(record.email);","              userIds.push(record.id);","            }","            else","            {","              errorCallback(badTableJoin);","            }","          }","        });","      }","    }","    result = {};","    result.email = emails;","    result.id = userIds;","    successCallback(result);","  }","}","function addEventToUsers(eventid, uesrIds, callback)","{","  for(var key in userIds)","  {","    var uid = userIds[key];","    geddy.model.User.first({id: uid}, function(err, record)","    {","      if(err)","      {","        callback(backendError);","      }","      else","      {","        if(record.myevents)","        {","          record.myevents += \",\"+eventid;","        }","        else","        {","          record.myevents = eventid;","        }","        record.confirmPassword = record.password;","        geddy.model.User.save(record, function(err, result)","        {","          if(err)","          {","            console.log(\"err \");","            console.dir(err);","            callback(backendError);","          }","        });","      }","    });","  }","  callback({errCode: 1}); //success!","}","","Event.invite = function(params, callback) ","{","  //send email containing \"message\" to list of emails","  var self = this;","  var responseDict = {};","","  var eventID = params.eventid;","  var emailList = params.emails;","  var message = params.message;","","  if (eventID === null || eventID === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null eventid\";","    callback(responseDict);","    return;","  } ","","  if (emailList === null || emailList === undefined || emailList === [] ) ","  {","    //handle empty emails","    responseDict.errCode = 6;","    responseDict.message = \"null emails\";","    callback(responseDict);","    return;","  } ","","  if (message === null || message === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null message\";","    callback(responseDict);","    return;","  } ","","  //check all emails for propper form","  var badEmails = [];","  var goodEmailsString = \"\";","  for(var index in emailList)","  {","    var emailAddr = emailList[index];","    if (!isValidEmail(emailAddr))","    {","      //email address is malformed","      badEmails.push(emailAddr);","    } else {","","      goodEmailsString += emailAddr + \", \";","","    }","  }","","  //some emails are bad","  if(badEmails.count &gt; 0 ){","","    responseDict.errCode = 12;","    responseDict.message = \"malformed emails\";","    responseDict.bademails = badEmails;","    callback(responseDict);","    return;","  }","","  //chop off the \", \" at the end of the string","  if(goodEmailsString.length &gt; 2)","  {","    goodEmailsString = goodEmailsString.substring(0,goodEmailsString.length-3);","  } ","  else","  {","","    responseDict.errCode = 6;","    responseDict.message = \"couldn't find any good emails\";","    callback(responseDict);","    return;","  } ","","","","  geddy.model.Event.first({id: eventID}, function (err, result) ","    {","","      if(err){","        //handle error","        responseDict.errCode = 10;","        responseDict.message = \"invalid eventid\";","      } ","      else ","      {","","        if(result)","        {","          //invite all emails","","            // create reusable transport method (opens pool of SMTP connections)","          var smtpTransport = nodemailer.createTransport(\"SMTP\",{","              service: \"Gmail\",","              auth: {","                  user: \"groupactivityplanner@gmail.com\",","                  pass: \"gapgapgap\"","              }","          });","","          var mailOptions = {","              from: \"Group Activity Planner &#226;&#156;&#148; &lt;groupactivityplanner@gmail.com&gt;\", // sender address","              to: goodEmailsString, // list of receivers","              subject: \"You have been invited to an event!\", // Subject line","              text: message, // plaintext body","              html: null // html body","          }","","          // send mail with defined transport object","          smtpTransport.sendMail(mailOptions, function(error, response){","              if(error){","                  responseDict.errCode = 13;","                  responseDict.message = \"email failed\";","                  callback(responseDict);","                  return;","              }else{","                  responseDict.errCode = 1;","                  callback(responseDict);","                  return;","              }","","              smtpTransport.close();","","          });","","        }","      }","","    });","}","","function isValidEmail(email) { ","  return check(email).isEmail();","","} ","","Event.changeDateTime = function(params, callback) ","{","","}","","Event.getMyEvents = function (params, callback) {","  geddy.model.User.first({id: params.userId}, function (err, userModel) {","    if (err){","","    } else {","      if (err){","        responseDict.events = [];","        // console.log(\"err exists: \");","        // console.dir(err);","        responseDict.errCode = 7;","        callback(responseDict);","      } else if (userModel){","        // console.log(\"myevents = \");","        // console.dir(userModel.myevents);","        var myEvents = [];","        if (userModel.myevents){","          var eventIds = userModel.myevents.split(',');","          for (var index in eventIds){","            var eventId = eventIds[index];","            geddy.model.Event.first({id: eventId}, function (err, eventModel){","              if (err){","                responseDict.events = [];","                console.log(\"err exists: \");","                console.dir(err);","                responseDict.errCode = 7;","                callback(responseDict);","              } else if (eventModel){","                myEvents.push(eventModel);","              }","              if (index == eventIds.length - 1){","                getEventsCallback(1, myEvents, callback);","              }","            });","          }","        } else {","          getEventsCallback(1, myEvents, callback);","        }","      }","    }","  });","};","","function getEventsCallback(errCode, events, callback){","  var responseDict = {};","  responseDict.errCode = 1;","  responseDict.events = events;","  callback(responseDict);","};","","  ","/*","// Can also define them on the prototype","Event.prototype.someOtherMethod = function () {","  // Do some other stuff","};","// Can also define static methods and properties","Event.someStaticMethod = function () {","  // Do some other stuff","};","Event.someStaticProperty = 'YYZ';","*/","","Event.TESTAPI_resetFixture = function (callback) {","  geddy.model.Event.all(function (err, result) {","    // console.log(\"got all activity models with error: \" + err + \" and result: \" + result);","    for (var eventModel in result){","      // console.log(\"trying to remove activityModel: \" + result[activityModel]);","      geddy.model.Event.remove(result[eventModel].id);","    }","    var responseDict = {};","    responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};  ","","Event = geddy.model.register('Event', Event);",""];
