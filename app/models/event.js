/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/event.js']) {
  _$jscoverage['models/event.js'] = [];
  _$jscoverage['models/event.js'][1] = 0;
  _$jscoverage['models/event.js'][5] = 0;
  _$jscoverage['models/event.js'][6] = 0;
  _$jscoverage['models/event.js'][7] = 0;
  _$jscoverage['models/event.js'][8] = 0;
  _$jscoverage['models/event.js'][10] = 0;
  _$jscoverage['models/event.js'][12] = 0;
  _$jscoverage['models/event.js'][46] = 0;
  _$jscoverage['models/event.js'][48] = 0;
  _$jscoverage['models/event.js'][50] = 0;
  _$jscoverage['models/event.js'][51] = 0;
  _$jscoverage['models/event.js'][53] = 0;
  _$jscoverage['models/event.js'][54] = 0;
  _$jscoverage['models/event.js'][55] = 0;
  _$jscoverage['models/event.js'][57] = 0;
  _$jscoverage['models/event.js'][59] = 0;
  _$jscoverage['models/event.js'][62] = 0;
  _$jscoverage['models/event.js'][63] = 0;
  _$jscoverage['models/event.js'][64] = 0;
  _$jscoverage['models/event.js'][65] = 0;
  _$jscoverage['models/event.js'][66] = 0;
  _$jscoverage['models/event.js'][67] = 0;
  _$jscoverage['models/event.js'][68] = 0;
  _$jscoverage['models/event.js'][69] = 0;
  _$jscoverage['models/event.js'][70] = 0;
  _$jscoverage['models/event.js'][71] = 0;
  _$jscoverage['models/event.js'][72] = 0;
  _$jscoverage['models/event.js'][74] = 0;
  _$jscoverage['models/event.js'][76] = 0;
  _$jscoverage['models/event.js'][77] = 0;
  _$jscoverage['models/event.js'][78] = 0;
  _$jscoverage['models/event.js'][82] = 0;
  _$jscoverage['models/event.js'][84] = 0;
  _$jscoverage['models/event.js'][86] = 0;
  _$jscoverage['models/event.js'][90] = 0;
  _$jscoverage['models/event.js'][91] = 0;
  _$jscoverage['models/event.js'][93] = 0;
  _$jscoverage['models/event.js'][95] = 0;
  _$jscoverage['models/event.js'][96] = 0;
  _$jscoverage['models/event.js'][98] = 0;
  _$jscoverage['models/event.js'][107] = 0;
  _$jscoverage['models/event.js'][112] = 0;
  _$jscoverage['models/event.js'][119] = 0;
  _$jscoverage['models/event.js'][124] = 0;
  _$jscoverage['models/event.js'][125] = 0;
  _$jscoverage['models/event.js'][126] = 0;
  _$jscoverage['models/event.js'][127] = 0;
  _$jscoverage['models/event.js'][129] = 0;
  _$jscoverage['models/event.js'][130] = 0;
  _$jscoverage['models/event.js'][133] = 0;
  _$jscoverage['models/event.js'][134] = 0;
  _$jscoverage['models/event.js'][138] = 0;
  _$jscoverage['models/event.js'][140] = 0;
  _$jscoverage['models/event.js'][142] = 0;
  _$jscoverage['models/event.js'][143] = 0;
  _$jscoverage['models/event.js'][144] = 0;
  _$jscoverage['models/event.js'][148] = 0;
  _$jscoverage['models/event.js'][151] = 0;
  _$jscoverage['models/event.js'][152] = 0;
  _$jscoverage['models/event.js'][156] = 0;
  _$jscoverage['models/event.js'][162] = 0;
  _$jscoverage['models/event.js'][163] = 0;
  _$jscoverage['models/event.js'][164] = 0;
  _$jscoverage['models/event.js'][165] = 0;
  _$jscoverage['models/event.js'][168] = 0;
  _$jscoverage['models/event.js'][170] = 0;
  _$jscoverage['models/event.js'][171] = 0;
  _$jscoverage['models/event.js'][173] = 0;
  _$jscoverage['models/event.js'][175] = 0;
  _$jscoverage['models/event.js'][176] = 0;
  _$jscoverage['models/event.js'][177] = 0;
  _$jscoverage['models/event.js'][178] = 0;
  _$jscoverage['models/event.js'][179] = 0;
  _$jscoverage['models/event.js'][181] = 0;
  _$jscoverage['models/event.js'][183] = 0;
  _$jscoverage['models/event.js'][184] = 0;
  _$jscoverage['models/event.js'][185] = 0;
  _$jscoverage['models/event.js'][189] = 0;
  _$jscoverage['models/event.js'][190] = 0;
  _$jscoverage['models/event.js'][192] = 0;
  _$jscoverage['models/event.js'][199] = 0;
  _$jscoverage['models/event.js'][205] = 0;
  _$jscoverage['models/event.js'][206] = 0;
  _$jscoverage['models/event.js'][207] = 0;
  _$jscoverage['models/event.js'][208] = 0;
  _$jscoverage['models/event.js'][209] = 0;
  _$jscoverage['models/event.js'][210] = 0;
  _$jscoverage['models/event.js'][212] = 0;
  _$jscoverage['models/event.js'][213] = 0;
  _$jscoverage['models/event.js'][215] = 0;
  _$jscoverage['models/event.js'][219] = 0;
  _$jscoverage['models/event.js'][220] = 0;
  _$jscoverage['models/event.js'][222] = 0;
  _$jscoverage['models/event.js'][226] = 0;
  _$jscoverage['models/event.js'][228] = 0;
  _$jscoverage['models/event.js'][230] = 0;
  _$jscoverage['models/event.js'][232] = 0;
  _$jscoverage['models/event.js'][234] = 0;
  _$jscoverage['models/event.js'][238] = 0;
  _$jscoverage['models/event.js'][240] = 0;
  _$jscoverage['models/event.js'][241] = 0;
  _$jscoverage['models/event.js'][243] = 0;
  _$jscoverage['models/event.js'][245] = 0;
  _$jscoverage['models/event.js'][246] = 0;
  _$jscoverage['models/event.js'][255] = 0;
  _$jscoverage['models/event.js'][256] = 0;
  _$jscoverage['models/event.js'][257] = 0;
  _$jscoverage['models/event.js'][261] = 0;
  _$jscoverage['models/event.js'][262] = 0;
  _$jscoverage['models/event.js'][264] = 0;
  _$jscoverage['models/event.js'][265] = 0;
  _$jscoverage['models/event.js'][267] = 0;
  _$jscoverage['models/event.js'][269] = 0;
  _$jscoverage['models/event.js'][270] = 0;
  _$jscoverage['models/event.js'][271] = 0;
  _$jscoverage['models/event.js'][275] = 0;
  _$jscoverage['models/event.js'][277] = 0;
  _$jscoverage['models/event.js'][281] = 0;
  _$jscoverage['models/event.js'][283] = 0;
  _$jscoverage['models/event.js'][284] = 0;
  _$jscoverage['models/event.js'][285] = 0;
  _$jscoverage['models/event.js'][287] = 0;
  _$jscoverage['models/event.js'][289] = 0;
  _$jscoverage['models/event.js'][290] = 0;
  _$jscoverage['models/event.js'][291] = 0;
  _$jscoverage['models/event.js'][298] = 0;
  _$jscoverage['models/event.js'][303] = 0;
  _$jscoverage['models/event.js'][306] = 0;
  _$jscoverage['models/event.js'][307] = 0;
  _$jscoverage['models/event.js'][309] = 0;
  _$jscoverage['models/event.js'][310] = 0;
  _$jscoverage['models/event.js'][311] = 0;
  _$jscoverage['models/event.js'][313] = 0;
  _$jscoverage['models/event.js'][316] = 0;
  _$jscoverage['models/event.js'][317] = 0;
  _$jscoverage['models/event.js'][318] = 0;
  _$jscoverage['models/event.js'][319] = 0;
  _$jscoverage['models/event.js'][322] = 0;
  _$jscoverage['models/event.js'][325] = 0;
  _$jscoverage['models/event.js'][326] = 0;
  _$jscoverage['models/event.js'][327] = 0;
  _$jscoverage['models/event.js'][328] = 0;
  _$jscoverage['models/event.js'][331] = 0;
  _$jscoverage['models/event.js'][334] = 0;
  _$jscoverage['models/event.js'][335] = 0;
  _$jscoverage['models/event.js'][336] = 0;
  _$jscoverage['models/event.js'][337] = 0;
  _$jscoverage['models/event.js'][341] = 0;
  _$jscoverage['models/event.js'][342] = 0;
  _$jscoverage['models/event.js'][343] = 0;
  _$jscoverage['models/event.js'][345] = 0;
  _$jscoverage['models/event.js'][346] = 0;
  _$jscoverage['models/event.js'][349] = 0;
  _$jscoverage['models/event.js'][352] = 0;
  _$jscoverage['models/event.js'][358] = 0;
  _$jscoverage['models/event.js'][360] = 0;
  _$jscoverage['models/event.js'][361] = 0;
  _$jscoverage['models/event.js'][362] = 0;
  _$jscoverage['models/event.js'][363] = 0;
  _$jscoverage['models/event.js'][364] = 0;
  _$jscoverage['models/event.js'][368] = 0;
  _$jscoverage['models/event.js'][371] = 0;
  _$jscoverage['models/event.js'][376] = 0;
  _$jscoverage['models/event.js'][377] = 0;
  _$jscoverage['models/event.js'][378] = 0;
  _$jscoverage['models/event.js'][379] = 0;
  _$jscoverage['models/event.js'][383] = 0;
  _$jscoverage['models/event.js'][386] = 0;
  _$jscoverage['models/event.js'][388] = 0;
  _$jscoverage['models/event.js'][389] = 0;
  _$jscoverage['models/event.js'][390] = 0;
  _$jscoverage['models/event.js'][391] = 0;
  _$jscoverage['models/event.js'][392] = 0;
  _$jscoverage['models/event.js'][393] = 0;
  _$jscoverage['models/event.js'][398] = 0;
  _$jscoverage['models/event.js'][403] = 0;
  _$jscoverage['models/event.js'][416] = 0;
  _$jscoverage['models/event.js'][418] = 0;
  _$jscoverage['models/event.js'][420] = 0;
  _$jscoverage['models/event.js'][421] = 0;
  _$jscoverage['models/event.js'][423] = 0;
  _$jscoverage['models/event.js'][425] = 0;
  _$jscoverage['models/event.js'][426] = 0;
  _$jscoverage['models/event.js'][427] = 0;
  _$jscoverage['models/event.js'][428] = 0;
  _$jscoverage['models/event.js'][430] = 0;
  _$jscoverage['models/event.js'][431] = 0;
  _$jscoverage['models/event.js'][432] = 0;
  _$jscoverage['models/event.js'][433] = 0;
  _$jscoverage['models/event.js'][434] = 0;
  _$jscoverage['models/event.js'][441] = 0;
  _$jscoverage['models/event.js'][443] = 0;
  _$jscoverage['models/event.js'][445] = 0;
  _$jscoverage['models/event.js'][446] = 0;
  _$jscoverage['models/event.js'][447] = 0;
  _$jscoverage['models/event.js'][450] = 0;
  _$jscoverage['models/event.js'][459] = 0;
  _$jscoverage['models/event.js'][460] = 0;
  _$jscoverage['models/event.js'][461] = 0;
  _$jscoverage['models/event.js'][462] = 0;
  _$jscoverage['models/event.js'][463] = 0;
  _$jscoverage['models/event.js'][464] = 0;
  _$jscoverage['models/event.js'][465] = 0;
  _$jscoverage['models/event.js'][466] = 0;
  _$jscoverage['models/event.js'][468] = 0;
  _$jscoverage['models/event.js'][469] = 0;
  _$jscoverage['models/event.js'][470] = 0;
  _$jscoverage['models/event.js'][473] = 0;
  _$jscoverage['models/event.js'][482] = 0;
  _$jscoverage['models/event.js'][483] = 0;
  _$jscoverage['models/event.js'][484] = 0;
  _$jscoverage['models/event.js'][485] = 0;
  _$jscoverage['models/event.js'][486] = 0;
  _$jscoverage['models/event.js'][496] = 0;
  _$jscoverage['models/event.js'][497] = 0;
  _$jscoverage['models/event.js'][498] = 0;
  _$jscoverage['models/event.js'][499] = 0;
  _$jscoverage['models/event.js'][506] = 0;
  _$jscoverage['models/event.js'][507] = 0;
  _$jscoverage['models/event.js'][509] = 0;
  _$jscoverage['models/event.js'][510] = 0;
  _$jscoverage['models/event.js'][514] = 0;
  _$jscoverage['models/event.js'][518] = 0;
  _$jscoverage['models/event.js'][519] = 0;
  _$jscoverage['models/event.js'][520] = 0;
  _$jscoverage['models/event.js'][521] = 0;
  _$jscoverage['models/event.js'][523] = 0;
  _$jscoverage['models/event.js'][524] = 0;
  _$jscoverage['models/event.js'][525] = 0;
  _$jscoverage['models/event.js'][526] = 0;
  _$jscoverage['models/event.js'][530] = 0;
  _$jscoverage['models/event.js'][531] = 0;
  _$jscoverage['models/event.js'][532] = 0;
  _$jscoverage['models/event.js'][534] = 0;
  _$jscoverage['models/event.js'][538] = 0;
  _$jscoverage['models/event.js'][541] = 0;
  _$jscoverage['models/event.js'][543] = 0;
  _$jscoverage['models/event.js'][544] = 0;
  _$jscoverage['models/event.js'][545] = 0;
  _$jscoverage['models/event.js'][546] = 0;
  _$jscoverage['models/event.js'][547] = 0;
  _$jscoverage['models/event.js'][548] = 0;
  _$jscoverage['models/event.js'][551] = 0;
  _$jscoverage['models/event.js'][552] = 0;
  _$jscoverage['models/event.js'][553] = 0;
  _$jscoverage['models/event.js'][554] = 0;
  _$jscoverage['models/event.js'][555] = 0;
  _$jscoverage['models/event.js'][556] = 0;
  _$jscoverage['models/event.js'][559] = 0;
  _$jscoverage['models/event.js'][560] = 0;
  _$jscoverage['models/event.js'][564] = 0;
  _$jscoverage['models/event.js'][565] = 0;
  _$jscoverage['models/event.js'][568] = 0;
  _$jscoverage['models/event.js'][571] = 0;
  _$jscoverage['models/event.js'][573] = 0;
  _$jscoverage['models/event.js'][576] = 0;
  _$jscoverage['models/event.js'][578] = 0;
  _$jscoverage['models/event.js'][579] = 0;
  _$jscoverage['models/event.js'][580] = 0;
  _$jscoverage['models/event.js'][581] = 0;
  _$jscoverage['models/event.js'][584] = 0;
  _$jscoverage['models/event.js'][586] = 0;
  _$jscoverage['models/event.js'][588] = 0;
  _$jscoverage['models/event.js'][589] = 0;
  _$jscoverage['models/event.js'][590] = 0;
  _$jscoverage['models/event.js'][591] = 0;
  _$jscoverage['models/event.js'][595] = 0;
  _$jscoverage['models/event.js'][596] = 0;
  _$jscoverage['models/event.js'][597] = 0;
  _$jscoverage['models/event.js'][601] = 0;
  _$jscoverage['models/event.js'][602] = 0;
  _$jscoverage['models/event.js'][603] = 0;
  _$jscoverage['models/event.js'][605] = 0;
  _$jscoverage['models/event.js'][608] = 0;
  _$jscoverage['models/event.js'][609] = 0;
  _$jscoverage['models/event.js'][610] = 0;
  _$jscoverage['models/event.js'][614] = 0;
  _$jscoverage['models/event.js'][615] = 0;
  _$jscoverage['models/event.js'][616] = 0;
  _$jscoverage['models/event.js'][621] = 0;
  _$jscoverage['models/event.js'][624] = 0;
  _$jscoverage['models/event.js'][626] = 0;
  _$jscoverage['models/event.js'][627] = 0;
  _$jscoverage['models/event.js'][628] = 0;
  _$jscoverage['models/event.js'][629] = 0;
  _$jscoverage['models/event.js'][630] = 0;
  _$jscoverage['models/event.js'][631] = 0;
  _$jscoverage['models/event.js'][636] = 0;
  _$jscoverage['models/event.js'][639] = 0;
  _$jscoverage['models/event.js'][640] = 0;
  _$jscoverage['models/event.js'][641] = 0;
  _$jscoverage['models/event.js'][642] = 0;
  _$jscoverage['models/event.js'][649] = 0;
  _$jscoverage['models/event.js'][650] = 0;
  _$jscoverage['models/event.js'][653] = 0;
  _$jscoverage['models/event.js'][654] = 0;
  _$jscoverage['models/event.js'][655] = 0;
  _$jscoverage['models/event.js'][658] = 0;
  _$jscoverage['models/event.js'][659] = 0;
  _$jscoverage['models/event.js'][662] = 0;
  _$jscoverage['models/event.js'][663] = 0;
  _$jscoverage['models/event.js'][668] = 0;
  _$jscoverage['models/event.js'][670] = 0;
  _$jscoverage['models/event.js'][671] = 0;
  _$jscoverage['models/event.js'][672] = 0;
  _$jscoverage['models/event.js'][673] = 0;
  _$jscoverage['models/event.js'][676] = 0;
  _$jscoverage['models/event.js'][678] = 0;
  _$jscoverage['models/event.js'][679] = 0;
  _$jscoverage['models/event.js'][680] = 0;
  _$jscoverage['models/event.js'][681] = 0;
  _$jscoverage['models/event.js'][686] = 0;
  _$jscoverage['models/event.js'][688] = 0;
  _$jscoverage['models/event.js'][690] = 0;
  _$jscoverage['models/event.js'][691] = 0;
  _$jscoverage['models/event.js'][692] = 0;
  _$jscoverage['models/event.js'][693] = 0;
  _$jscoverage['models/event.js'][694] = 0;
  _$jscoverage['models/event.js'][695] = 0;
  _$jscoverage['models/event.js'][698] = 0;
  _$jscoverage['models/event.js'][701] = 0;
  _$jscoverage['models/event.js'][702] = 0;
  _$jscoverage['models/event.js'][703] = 0;
  _$jscoverage['models/event.js'][707] = 0;
  _$jscoverage['models/event.js'][708] = 0;
  _$jscoverage['models/event.js'][709] = 0;
  _$jscoverage['models/event.js'][710] = 0;
  _$jscoverage['models/event.js'][717] = 0;
  _$jscoverage['models/event.js'][718] = 0;
  _$jscoverage['models/event.js'][719] = 0;
  _$jscoverage['models/event.js'][720] = 0;
  _$jscoverage['models/event.js'][721] = 0;
  _$jscoverage['models/event.js'][722] = 0;
  _$jscoverage['models/event.js'][725] = 0;
  _$jscoverage['models/event.js'][726] = 0;
  _$jscoverage['models/event.js'][728] = 0;
  _$jscoverage['models/event.js'][729] = 0;
  _$jscoverage['models/event.js'][730] = 0;
  _$jscoverage['models/event.js'][731] = 0;
  _$jscoverage['models/event.js'][732] = 0;
  _$jscoverage['models/event.js'][733] = 0;
  _$jscoverage['models/event.js'][734] = 0;
  _$jscoverage['models/event.js'][735] = 0;
  _$jscoverage['models/event.js'][736] = 0;
  _$jscoverage['models/event.js'][737] = 0;
  _$jscoverage['models/event.js'][738] = 0;
  _$jscoverage['models/event.js'][739] = 0;
  _$jscoverage['models/event.js'][740] = 0;
  _$jscoverage['models/event.js'][741] = 0;
  _$jscoverage['models/event.js'][744] = 0;
  _$jscoverage['models/event.js'][746] = 0;
  _$jscoverage['models/event.js'][747] = 0;
  _$jscoverage['models/event.js'][752] = 0;
  _$jscoverage['models/event.js'][759] = 0;
  _$jscoverage['models/event.js'][760] = 0;
  _$jscoverage['models/event.js'][761] = 0;
  _$jscoverage['models/event.js'][762] = 0;
  _$jscoverage['models/event.js'][763] = 0;
  _$jscoverage['models/event.js'][779] = 0;
  _$jscoverage['models/event.js'][780] = 0;
  _$jscoverage['models/event.js'][782] = 0;
  _$jscoverage['models/event.js'][784] = 0;
  _$jscoverage['models/event.js'][786] = 0;
  _$jscoverage['models/event.js'][787] = 0;
  _$jscoverage['models/event.js'][788] = 0;
  _$jscoverage['models/event.js'][792] = 0;
}
_$jscoverage['models/event.js'][1]++;
var nodemailer = require("nodemailer"), check = require("validator").check, blade = require("blade");
_$jscoverage['models/event.js'][5]++;
var incorrectParams = {errCode: 6};
_$jscoverage['models/event.js'][6]++;
var backendError = {errCode: 7};
_$jscoverage['models/event.js'][7]++;
var badTimes = {errCode: 8};
_$jscoverage['models/event.js'][8]++;
var badTableJoin = {errCode: 9};
_$jscoverage['models/event.js'][10]++;
var Event = (function () {
  _$jscoverage['models/event.js'][12]++;
  this.defineProperties({name: {type: "string", required: true}, description: {type: "string"}, time1: {type: "number"}, time2: {type: "number"}, begindate: {type: "number"}, enddate: {type: "number"}, activityid: {type: "string"}, attendingusers: {type: "string"}});
});
_$jscoverage['models/event.js'][46]++;
Event.add = (function (params, callback) {
  _$jscoverage['models/event.js'][48]++;
  if (params.name && params.begindate && params.enddate && params.time1 && params.time2 && params.activityid && params.attendingusers) {
    _$jscoverage['models/event.js'][50]++;
    var idsOrEmails = params.attendingusers.split(",");
    _$jscoverage['models/event.js'][51]++;
    getEmailAndId(idsOrEmails, callback, (function (emailAndId) {
  _$jscoverage['models/event.js'][53]++;
  var emails = emailAndId.email;
  _$jscoverage['models/event.js'][54]++;
  var userIds = emailAndId.id;
  _$jscoverage['models/event.js'][55]++;
  geddy.model.Activity.first({id: params.activityid}, (function (err, activityRecord) {
  _$jscoverage['models/event.js'][57]++;
  if (activityRecord && activityRecord.name) {
    _$jscoverage['models/event.js'][59]++;
    if (params.begindate <= params.enddate && params.time1 <= params.time2) {
      _$jscoverage['models/event.js'][62]++;
      eventDict = {};
      _$jscoverage['models/event.js'][63]++;
      eventDict.name = params.name;
      _$jscoverage['models/event.js'][64]++;
      eventDict.begindate = params.begindate;
      _$jscoverage['models/event.js'][65]++;
      eventDict.enddate = params.enddate;
      _$jscoverage['models/event.js'][66]++;
      eventDict.time1 = params.time1;
      _$jscoverage['models/event.js'][67]++;
      eventDict.time2 = params.time2;
      _$jscoverage['models/event.js'][68]++;
      eventDict.description = params.description;
      _$jscoverage['models/event.js'][69]++;
      eventDict.activityid = params.activityid;
      _$jscoverage['models/event.js'][70]++;
      eventDict.attendingusers = userIds.toString();
      _$jscoverage['models/event.js'][71]++;
      var eventRecord = geddy.model.Event.create(eventDict);
      _$jscoverage['models/event.js'][72]++;
      geddy.model.Event.save(eventRecord, (function (err, eventModel) {
  _$jscoverage['models/event.js'][74]++;
  if (err) {
    _$jscoverage['models/event.js'][76]++;
    console.log("error in event.save in Event.add");
    _$jscoverage['models/event.js'][77]++;
    console.dir(err);
    _$jscoverage['models/event.js'][78]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][82]++;
    addEventToUsers(eventModel.id, userIds, (function (respDict) {
  _$jscoverage['models/event.js'][84]++;
  if (params.noemail) {
    _$jscoverage['models/event.js'][86]++;
    callback(respDict);
  }
  else {
    _$jscoverage['models/event.js'][90]++;
    var inviter = "Somebody";
    _$jscoverage['models/event.js'][91]++;
    if (params.inviter) {
      _$jscoverage['models/event.js'][93]++;
      inviter = params.inviter;
    }
    _$jscoverage['models/event.js'][95]++;
    var message = inviter + " wants you to join the following event: " + params.name + " if you haven't signed up with Group Activity Planner check it out!";
    _$jscoverage['models/event.js'][96]++;
    Event.invite({eventid: eventModel.id, emails: emails, message: message}, (function () {
  _$jscoverage['models/event.js'][98]++;
  callback(respDict);
}));
  }
}));
  }
}));
    }
    else {
      _$jscoverage['models/event.js'][107]++;
      callback(badTimes);
    }
  }
  else {
    _$jscoverage['models/event.js'][112]++;
    callback(badTableJoin);
  }
}));
}));
  }
  else {
    _$jscoverage['models/event.js'][119]++;
    callback(incorrectParams);
  }
});
_$jscoverage['models/event.js'][124]++;
function getEmailAndId(usernamesOrEmails, errorCallback, successCallback) {
  _$jscoverage['models/event.js'][125]++;
  emails = [];
  _$jscoverage['models/event.js'][126]++;
  userIds = [];
  _$jscoverage['models/event.js'][127]++;
  for (var key in usernamesOrEmails) {
    _$jscoverage['models/event.js'][129]++;
    var id = usernamesOrEmails[key];
    _$jscoverage['models/event.js'][130]++;
    if (id.indexOf("@") >= 0) {
      _$jscoverage['models/event.js'][133]++;
      emails.push(id);
      _$jscoverage['models/event.js'][134]++;
      continue;
    }
    else {
      _$jscoverage['models/event.js'][138]++;
      geddy.model.User.first({username: id}, (function (err, record) {
  _$jscoverage['models/event.js'][140]++;
  if (err) {
    _$jscoverage['models/event.js'][142]++;
    console.log("error in user.first in Event.add");
    _$jscoverage['models/event.js'][143]++;
    console.dir(err);
    _$jscoverage['models/event.js'][144]++;
    errorCallback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][148]++;
    if (record && record.email && record.username) {
      _$jscoverage['models/event.js'][151]++;
      emails.push(record.email);
      _$jscoverage['models/event.js'][152]++;
      userIds.push(record.username);
    }
    else {
      _$jscoverage['models/event.js'][156]++;
      errorCallback(badTableJoin);
    }
  }
}));
    }
}
  _$jscoverage['models/event.js'][162]++;
  result = {};
  _$jscoverage['models/event.js'][163]++;
  result.email = emails;
  _$jscoverage['models/event.js'][164]++;
  result.id = userIds;
  _$jscoverage['models/event.js'][165]++;
  successCallback(result);
}
_$jscoverage['models/event.js'][168]++;
Event.addUsersToEvent = (function (eventid, usernames, callback) {
  _$jscoverage['models/event.js'][170]++;
  usernames = usernames.split(",");
  _$jscoverage['models/event.js'][171]++;
  geddy.model.Event.first({id: eventid}, (function (err, eventRecord) {
  _$jscoverage['models/event.js'][173]++;
  if (eventRecord && eventRecord.attendingusers) {
    _$jscoverage['models/event.js'][175]++;
    var data = eventRecord.attendingusers.split(",").concat(usernames);
    _$jscoverage['models/event.js'][176]++;
    var newUids = data.id;
    _$jscoverage['models/event.js'][177]++;
    newUids = validateUserIds(newUids, eventid);
    _$jscoverage['models/event.js'][178]++;
    eventRecord.attendingusers = newUids.toString();
    _$jscoverage['models/event.js'][179]++;
    geddy.model.Event.save(eventRecord, (function (err, result) {
  _$jscoverage['models/event.js'][181]++;
  if (err) {
    _$jscoverage['models/event.js'][183]++;
    console.log("error in event.save in Event.addUsersToEvent");
    _$jscoverage['models/event.js'][184]++;
    console.dir(err);
    _$jscoverage['models/event.js'][185]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][189]++;
    var message = "You are cordially invited to join the following event: " + eventRecord.name + " login or signup at Group Activity Planner for more details!";
    _$jscoverage['models/event.js'][190]++;
    Event.invite({eventid: eventid, emails: data.email, message: message}, (function (respDict) {
  _$jscoverage['models/event.js'][192]++;
  callback({errCode: 1});
}));
  }
}));
  }
  else {
    _$jscoverage['models/event.js'][199]++;
    callback(badTableJoin);
  }
}));
});
_$jscoverage['models/event.js'][205]++;
function validateUserIds(idArray, eventid) {
  _$jscoverage['models/event.js'][206]++;
  toReturn = {};
  _$jscoverage['models/event.js'][207]++;
  idHash = {};
  _$jscoverage['models/event.js'][208]++;
  idReturn = [];
  _$jscoverage['models/event.js'][209]++;
  emailReturn = [];
  _$jscoverage['models/event.js'][210]++;
  for (var key in idArray) {
    _$jscoverage['models/event.js'][212]++;
    var id = idArray[key];
    _$jscoverage['models/event.js'][213]++;
    if (idHash[id]) {
      _$jscoverage['models/event.js'][215]++;
      continue;
    }
    else {
      _$jscoverage['models/event.js'][219]++;
      idHash[id] = true;
      _$jscoverage['models/event.js'][220]++;
      if (id.indexOf("@") >= 0) {
        _$jscoverage['models/event.js'][222]++;
        emailReturn.push(id);
      }
      else {
        _$jscoverage['models/event.js'][226]++;
        geddy.model.User.first({username: id}, (function (err, userRecord) {
  _$jscoverage['models/event.js'][228]++;
  if (userRecord && userRecord.username) {
    _$jscoverage['models/event.js'][230]++;
    if (! userRecord.myevents || (userRecord.myevents.search(eventid) < 0)) {
      _$jscoverage['models/event.js'][232]++;
      if (userRecord.myevents) {
        _$jscoverage['models/event.js'][234]++;
        userRecord.myevents += "," + eventid;
      }
      else {
        _$jscoverage['models/event.js'][238]++;
        userRecord.myevents = eventid;
      }
      _$jscoverage['models/event.js'][240]++;
      userRecord.confirmPassword = userRecord.password;
      _$jscoverage['models/event.js'][241]++;
      geddy.model.User.save(userRecord, (function (err, result) {
  _$jscoverage['models/event.js'][243]++;
  if (! err) {
    _$jscoverage['models/event.js'][245]++;
    emailReturn.push(userRecord.email);
    _$jscoverage['models/event.js'][246]++;
    idReturn.push(userRecord.username);
  }
}));
    }
  }
}));
      }
    }
}
  _$jscoverage['models/event.js'][255]++;
  toReturn.id = idReturn;
  _$jscoverage['models/event.js'][256]++;
  toReturn.email = emailReturn;
  _$jscoverage['models/event.js'][257]++;
  return toReturn;
}
_$jscoverage['models/event.js'][261]++;
function addEventToUsers(eventid, userIds, callback) {
  _$jscoverage['models/event.js'][262]++;
  for (var key in userIds) {
    _$jscoverage['models/event.js'][264]++;
    var uid = userIds[key];
    _$jscoverage['models/event.js'][265]++;
    geddy.model.User.first({username: uid}, (function (err, record) {
  _$jscoverage['models/event.js'][267]++;
  if (err) {
    _$jscoverage['models/event.js'][269]++;
    console.log("error in user.first in Event.addEventToUsers");
    _$jscoverage['models/event.js'][270]++;
    console.dir(err);
    _$jscoverage['models/event.js'][271]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][275]++;
    if (record && record.myevents) {
      _$jscoverage['models/event.js'][277]++;
      record.myevents += "," + eventid;
    }
    else {
      _$jscoverage['models/event.js'][281]++;
      record.myevents = eventid;
    }
    _$jscoverage['models/event.js'][283]++;
    record.confirmPassword = record.password;
    _$jscoverage['models/event.js'][284]++;
    record.errors = null;
    _$jscoverage['models/event.js'][285]++;
    geddy.model.User.save(record, (function (err, result) {
  _$jscoverage['models/event.js'][287]++;
  if (err) {
    _$jscoverage['models/event.js'][289]++;
    console.log("error in event.save in Event.addEventToUsers");
    _$jscoverage['models/event.js'][290]++;
    console.dir(err);
    _$jscoverage['models/event.js'][291]++;
    callback(backendError);
  }
}));
  }
}));
}
  _$jscoverage['models/event.js'][298]++;
  callback({errCode: 1});
}
_$jscoverage['models/event.js'][303]++;
Event.invite = (function (params, callback) {
  _$jscoverage['models/event.js'][306]++;
  var self = this;
  _$jscoverage['models/event.js'][307]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][309]++;
  var eventID = params.eventid;
  _$jscoverage['models/event.js'][310]++;
  var emailList = params.emails;
  _$jscoverage['models/event.js'][311]++;
  var message = params.message;
  _$jscoverage['models/event.js'][313]++;
  if (eventID === null || eventID === undefined) {
    _$jscoverage['models/event.js'][316]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][317]++;
    responseDict.message = "null eventid";
    _$jscoverage['models/event.js'][318]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][319]++;
    return;
  }
  _$jscoverage['models/event.js'][322]++;
  if (emailList === null || emailList === undefined || emailList === []) {
    _$jscoverage['models/event.js'][325]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][326]++;
    responseDict.message = "null emails";
    _$jscoverage['models/event.js'][327]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][328]++;
    return;
  }
  _$jscoverage['models/event.js'][331]++;
  if (message === null || message === undefined) {
    _$jscoverage['models/event.js'][334]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][335]++;
    responseDict.message = "null message";
    _$jscoverage['models/event.js'][336]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][337]++;
    return;
  }
  _$jscoverage['models/event.js'][341]++;
  var badEmails = [];
  _$jscoverage['models/event.js'][342]++;
  var goodEmailsString = "";
  _$jscoverage['models/event.js'][343]++;
  for (var index in emailList) {
    _$jscoverage['models/event.js'][345]++;
    var emailAddr = emailList[index];
    _$jscoverage['models/event.js'][346]++;
    if (! isValidEmail(emailAddr)) {
      _$jscoverage['models/event.js'][349]++;
      badEmails.push(emailAddr);
    }
    else {
      _$jscoverage['models/event.js'][352]++;
      goodEmailsString += emailAddr + ", ";
    }
}
  _$jscoverage['models/event.js'][358]++;
  if (badEmails.length > 0) {
    _$jscoverage['models/event.js'][360]++;
    responseDict.errCode = 12;
    _$jscoverage['models/event.js'][361]++;
    responseDict.message = "malformed emails";
    _$jscoverage['models/event.js'][362]++;
    responseDict.bademails = badEmails;
    _$jscoverage['models/event.js'][363]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][364]++;
    return;
  }
  _$jscoverage['models/event.js'][368]++;
  if (goodEmailsString.length > 2) {
    _$jscoverage['models/event.js'][371]++;
    goodEmailsString = goodEmailsString.substring(0, goodEmailsString.length - 2);
  }
  else {
    _$jscoverage['models/event.js'][376]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][377]++;
    responseDict.message = "null emails";
    _$jscoverage['models/event.js'][378]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][379]++;
    return;
  }
  _$jscoverage['models/event.js'][383]++;
  geddy.model.Event.first({id: eventID}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][386]++;
  if (err) {
    _$jscoverage['models/event.js'][388]++;
    console.log("err");
    _$jscoverage['models/event.js'][389]++;
    console.dir(err);
    _$jscoverage['models/event.js'][390]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][391]++;
    responseDict.message = "database error";
    _$jscoverage['models/event.js'][392]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][393]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][398]++;
    if (eventModel) {
      _$jscoverage['models/event.js'][403]++;
      var smtpTransport = nodemailer.createTransport("SMTP", {service: "Gmail", auth: {user: "groupactivityplanner.gap@gmail.com", pass: "gapgapgap"}});
      _$jscoverage['models/event.js'][416]++;
      blade.compileFile("app/helpers/templates/bladeEmailTemplate.blade", (function (err, tmpl) {
  _$jscoverage['models/event.js'][418]++;
  if (! err && tmpl) {
    _$jscoverage['models/event.js'][420]++;
    geddy.model.Activity.first({id: eventModel.activityid}, (function (err, activityModel) {
  _$jscoverage['models/event.js'][421]++;
  if (activityModel) {
    _$jscoverage['models/event.js'][423]++;
    reverseGeocodeAddressForActivity(activityModel, (function (address) {
  _$jscoverage['models/event.js'][425]++;
  var time1 = convertMsToString(eventModel.time1);
  _$jscoverage['models/event.js'][426]++;
  var time2 = convertMsToString(eventModel.time2);
  _$jscoverage['models/event.js'][427]++;
  eventModel.time1 = time1;
  _$jscoverage['models/event.js'][428]++;
  eventModel.time2 = time2;
  _$jscoverage['models/event.js'][430]++;
  var beginDate = new Date(eventModel.begindate);
  _$jscoverage['models/event.js'][431]++;
  var endDate = new Date(eventModel.enddate);
  _$jscoverage['models/event.js'][432]++;
  eventModel.begindate = beginDate.toDateString();
  _$jscoverage['models/event.js'][433]++;
  eventModel.enddate = endDate.toDateString();
  _$jscoverage['models/event.js'][434]++;
  var templateVars = {event: eventModel, activity: activityModel, message: message, location: address};
  _$jscoverage['models/event.js'][441]++;
  var templateHTML = tmpl(templateVars, (function (err, html) {
  _$jscoverage['models/event.js'][443]++;
  if (err) {
    _$jscoverage['models/event.js'][443]++;
    throw err;
  }
  _$jscoverage['models/event.js'][445]++;
  var templateHTML = null;
  _$jscoverage['models/event.js'][446]++;
  if (html) {
    _$jscoverage['models/event.js'][447]++;
    templateHTML = html;
  }
  _$jscoverage['models/event.js'][450]++;
  var mailOptions = {from: "Group Activity Planner \u00e2\u009c\u0094 <groupactivityplanner@gmail.com>", to: goodEmailsString, subject: "You have been invited to an event!", text: null, html: templateHTML};
  _$jscoverage['models/event.js'][459]++;
  smtpTransport.sendMail(mailOptions, (function (error, response) {
  _$jscoverage['models/event.js'][460]++;
  if (error) {
    _$jscoverage['models/event.js'][461]++;
    console.log("error");
    _$jscoverage['models/event.js'][462]++;
    console.dir(error);
    _$jscoverage['models/event.js'][463]++;
    responseDict.errCode = 13;
    _$jscoverage['models/event.js'][464]++;
    responseDict.message = "email failed";
    _$jscoverage['models/event.js'][465]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][466]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][468]++;
    responseDict.errCode = 1;
    _$jscoverage['models/event.js'][469]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][470]++;
    return;
  }
  _$jscoverage['models/event.js'][473]++;
  smtpTransport.close();
}));
}));
}));
  }
}));
  }
  else {
    _$jscoverage['models/event.js'][482]++;
    console.log("err =");
    _$jscoverage['models/event.js'][483]++;
    console.dir(err);
    _$jscoverage['models/event.js'][484]++;
    responseDict.errCode = 13;
    _$jscoverage['models/event.js'][485]++;
    responseDict.message = "email failed";
    _$jscoverage['models/event.js'][486]++;
    callback(responseDict);
  }
}));
    }
    else {
      _$jscoverage['models/event.js'][496]++;
      responseDict.errCode = 10;
      _$jscoverage['models/event.js'][497]++;
      responseDict.message = "invalid eventid";
      _$jscoverage['models/event.js'][498]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][499]++;
      return;
    }
  }
}));
});
_$jscoverage['models/event.js'][506]++;
function isValidEmail(email) {
  _$jscoverage['models/event.js'][507]++;
  try {
    _$jscoverage['models/event.js'][509]++;
    check(email).isEmail();
    _$jscoverage['models/event.js'][510]++;
    return true;
  }
  catch (error) {
    _$jscoverage['models/event.js'][514]++;
    return false;
  }
}
_$jscoverage['models/event.js'][518]++;
function reverseGeocodeAddressForActivity(activityModel, callback) {
  _$jscoverage['models/event.js'][519]++;
  if (activityModel.latitude && activityModel.longitude) {
    _$jscoverage['models/event.js'][520]++;
    var gm = require("googlemaps");
    _$jscoverage['models/event.js'][521]++;
    var util = require("util");
    _$jscoverage['models/event.js'][523]++;
    var latLong = activityModel.latitude + "," + activityModel.longitude;
    _$jscoverage['models/event.js'][524]++;
    gm.reverseGeocode(latLong, (function (err, data) {
  _$jscoverage['models/event.js'][525]++;
  if (err) {
    _$jscoverage['models/event.js'][526]++;
    callback(null);
  }
  else {
    _$jscoverage['models/event.js'][530]++;
    var address = "";
    _$jscoverage['models/event.js'][531]++;
    if (data.status == "OK") {
      _$jscoverage['models/event.js'][532]++;
      address = data.results[0].formatted_address;
    }
    _$jscoverage['models/event.js'][534]++;
    callback(address);
  }
}));
  }
  else {
    _$jscoverage['models/event.js'][538]++;
    callback(null);
  }
}
_$jscoverage['models/event.js'][541]++;
function convertMsToString(time) {
  _$jscoverage['models/event.js'][543]++;
  var d = new Date(0, 0, 0, 0, 0, 0, time);
  _$jscoverage['models/event.js'][544]++;
  var hours = d.getHours();
  _$jscoverage['models/event.js'][545]++;
  var hoursStr = hours.toString();
  _$jscoverage['models/event.js'][546]++;
  var minutes = d.getMinutes();
  _$jscoverage['models/event.js'][547]++;
  var minutesStr = minutes.toString();
  _$jscoverage['models/event.js'][548]++;
  var am_pm = "AM";
  _$jscoverage['models/event.js'][551]++;
  if (hours === 12) {
    _$jscoverage['models/event.js'][552]++;
    am_pm = "PM";
  }
  else {
    _$jscoverage['models/event.js'][553]++;
    if (hours > 12) {
      _$jscoverage['models/event.js'][554]++;
      hours = hours % 12;
      _$jscoverage['models/event.js'][555]++;
      am_pm = "PM";
      _$jscoverage['models/event.js'][556]++;
      hoursStr = hours.toString();
    }
  }
  _$jscoverage['models/event.js'][559]++;
  if (minutes < 10) {
    _$jscoverage['models/event.js'][560]++;
    minutesStr = "0" + minutesStr;
  }
  _$jscoverage['models/event.js'][564]++;
  var dateString = hoursStr + ":" + minutesStr + am_pm;
  _$jscoverage['models/event.js'][565]++;
  return dateString;
}
_$jscoverage['models/event.js'][568]++;
Event.changeDateTime = (function (params, callback) {
  _$jscoverage['models/event.js'][571]++;
  var self = this;
  _$jscoverage['models/event.js'][573]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][576]++;
  if (! params.eventid) {
    _$jscoverage['models/event.js'][578]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][579]++;
    responseDict.message = "null eventid";
    _$jscoverage['models/event.js'][580]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][581]++;
    return;
  }
  _$jscoverage['models/event.js'][584]++;
  var eventID = params.eventid;
  _$jscoverage['models/event.js'][586]++;
  if (! params.time1 && ! params.time2 && ! params.begindate && ! params.enddate) {
    _$jscoverage['models/event.js'][588]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][589]++;
    responseDict.message = "all date/time parameters are null";
    _$jscoverage['models/event.js'][590]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][591]++;
    return;
  }
  _$jscoverage['models/event.js'][595]++;
  var newTime1;
  _$jscoverage['models/event.js'][596]++;
  if (params.time1) {
    _$jscoverage['models/event.js'][597]++;
    newTime1 = parseFloat(params.time1);
  }
  _$jscoverage['models/event.js'][601]++;
  var newTime2;
  _$jscoverage['models/event.js'][602]++;
  if (params.time2) {
    _$jscoverage['models/event.js'][603]++;
    newTime2 = parseFloat(params.time2);
  }
  _$jscoverage['models/event.js'][605]++;
  console.log("NEW TIME 2 = " + newTime2);
  _$jscoverage['models/event.js'][608]++;
  var newBeginDate;
  _$jscoverage['models/event.js'][609]++;
  if (params.begindate) {
    _$jscoverage['models/event.js'][610]++;
    newBeginDate = parseFloat(params.begindate);
  }
  _$jscoverage['models/event.js'][614]++;
  var newEndDate;
  _$jscoverage['models/event.js'][615]++;
  if (params.enddate) {
    _$jscoverage['models/event.js'][616]++;
    newEndDate = parseFloat(params.enddate);
  }
  _$jscoverage['models/event.js'][621]++;
  geddy.model.Event.first({id: eventID}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][624]++;
  if (err) {
    _$jscoverage['models/event.js'][626]++;
    console.log("err change date time");
    _$jscoverage['models/event.js'][627]++;
    console.dir(err);
    _$jscoverage['models/event.js'][628]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][629]++;
    responseDict.message = "database error";
    _$jscoverage['models/event.js'][630]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][631]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][636]++;
    if (! eventModel) {
      _$jscoverage['models/event.js'][639]++;
      responseDict.errCode = 10;
      _$jscoverage['models/event.js'][640]++;
      responseDict.message = "invalid eventid";
      _$jscoverage['models/event.js'][641]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][642]++;
      return;
    }
    else {
      _$jscoverage['models/event.js'][649]++;
      if ((typeof newTime1) == "number") {
        _$jscoverage['models/event.js'][650]++;
        eventModel.time1 = newTime1;
      }
      _$jscoverage['models/event.js'][653]++;
      if ((typeof newTime2) == "number") {
        _$jscoverage['models/event.js'][654]++;
        eventModel.time2 = newTime2;
        _$jscoverage['models/event.js'][655]++;
        console.log("CHANGED TIME 2");
      }
      _$jscoverage['models/event.js'][658]++;
      if ((typeof newBeginDate) == "number") {
        _$jscoverage['models/event.js'][659]++;
        eventModel.begindate = newBeginDate;
      }
      _$jscoverage['models/event.js'][662]++;
      if ((typeof newEndDate) == "number") {
        _$jscoverage['models/event.js'][663]++;
        eventModel.enddate = newEndDate;
      }
    }
    _$jscoverage['models/event.js'][668]++;
    if (eventModel.time1 >= eventModel.time2) {
      _$jscoverage['models/event.js'][670]++;
      responseDict.errCode = 11;
      _$jscoverage['models/event.js'][671]++;
      responseDict.message = "invalid times";
      _$jscoverage['models/event.js'][672]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][673]++;
      return;
    }
    _$jscoverage['models/event.js'][676]++;
    if (eventModel.begindate >= eventModel.enddate) {
      _$jscoverage['models/event.js'][678]++;
      responseDict.errCode = 11;
      _$jscoverage['models/event.js'][679]++;
      responseDict.message = "invalid dates";
      _$jscoverage['models/event.js'][680]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][681]++;
      return;
    }
    _$jscoverage['models/event.js'][686]++;
    geddy.model.Event.save(eventModel, (function (err, result) {
  _$jscoverage['models/event.js'][688]++;
  if (err) {
    _$jscoverage['models/event.js'][690]++;
    console.log("error in Event.save in changeDateTime");
    _$jscoverage['models/event.js'][691]++;
    console.dir(err);
    _$jscoverage['models/event.js'][692]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][693]++;
    responseDict.message = "database error";
    _$jscoverage['models/event.js'][694]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][695]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][698]++;
    if (result) {
      _$jscoverage['models/event.js'][701]++;
      responseDict.errCode = 1;
      _$jscoverage['models/event.js'][702]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][703]++;
      return;
    }
    else {
      _$jscoverage['models/event.js'][707]++;
      responseDict.errCode = 7;
      _$jscoverage['models/event.js'][708]++;
      responseDict.message = "database error";
      _$jscoverage['models/event.js'][709]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][710]++;
      return;
    }
  }
}));
  }
}));
});
_$jscoverage['models/event.js'][717]++;
Event.getMyEvents = (function (params, callback) {
  _$jscoverage['models/event.js'][718]++;
  geddy.model.User.first({id: params.userId}, (function (err, userModel) {
  _$jscoverage['models/event.js'][719]++;
  if (err) {
    _$jscoverage['models/event.js'][720]++;
    console.log("error in getMyEvents");
    _$jscoverage['models/event.js'][721]++;
    console.dir(err);
    _$jscoverage['models/event.js'][722]++;
    responseDict.events = [];
    _$jscoverage['models/event.js'][725]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][726]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/event.js'][728]++;
    if (userModel) {
      _$jscoverage['models/event.js'][729]++;
      var myEvents = [];
      _$jscoverage['models/event.js'][730]++;
      if (userModel.myevents) {
        _$jscoverage['models/event.js'][731]++;
        var eventIds = userModel.myevents.split(",");
        _$jscoverage['models/event.js'][732]++;
        for (var index in eventIds) {
          _$jscoverage['models/event.js'][733]++;
          var eventId = eventIds[index];
          _$jscoverage['models/event.js'][734]++;
          geddy.model.Event.first({id: eventId}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][735]++;
  if (err) {
    _$jscoverage['models/event.js'][736]++;
    console.log("error in event.first in getMyEvents");
    _$jscoverage['models/event.js'][737]++;
    console.dir(err);
    _$jscoverage['models/event.js'][738]++;
    responseDict.events = [];
    _$jscoverage['models/event.js'][739]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][740]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/event.js'][741]++;
    if (eventModel) {
      _$jscoverage['models/event.js'][744]++;
      myEvents.push(eventModel);
    }
  }
  _$jscoverage['models/event.js'][746]++;
  if (index == myEvents.length - 1) {
    _$jscoverage['models/event.js'][747]++;
    getEventsCallback(1, myEvents, callback);
  }
}));
}
      }
      else {
        _$jscoverage['models/event.js'][752]++;
        getEventsCallback(1, myEvents, callback);
      }
    }
  }
}));
});
_$jscoverage['models/event.js'][759]++;
function getEventsCallback(errCode, events, callback) {
  _$jscoverage['models/event.js'][760]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][761]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][762]++;
  responseDict.events = events;
  _$jscoverage['models/event.js'][763]++;
  callback(responseDict);
}
_$jscoverage['models/event.js'][779]++;
Event.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/event.js'][780]++;
  geddy.model.Event.all((function (err, result) {
  _$jscoverage['models/event.js'][782]++;
  for (var eventModel in result) {
    _$jscoverage['models/event.js'][784]++;
    geddy.model.Event.remove(result[eventModel].id);
}
  _$jscoverage['models/event.js'][786]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][787]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][788]++;
  callback(responseDict);
}));
});
_$jscoverage['models/event.js'][792]++;
Event = geddy.model.register("Event", Event);
_$jscoverage['models/event.js'].source = ["var nodemailer = require(\"nodemailer\")","  , check = require(\"validator\").check","  , blade = require(\"blade\");","","var incorrectParams = {errCode: 6};","var backendError = {errCode: 7};","var badTimes = {errCode: 8};","var badTableJoin = {errCode: 9};","","var Event = function () {","","  this.defineProperties({","    name: {type: 'string', required: true},","    description: {type: 'string'},","    time1: {type: 'number'},","    time2: {type: 'number'},","    begindate: {type: 'number'},","    enddate: {type: 'number'},","    activityid: {type: 'string'},","    attendingusers: {type: 'string'}","  });","","  /*","  this.property('login', 'string', {required: true});","  this.property('password', 'string', {required: true});","  this.property('lastName', 'string');","  this.property('firstName', 'string');","","  this.validatesPresent('login');","  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});","  this.validatesLength('login', {min: 3});","  // Use with the name of the other parameter to compare with","  this.validatesConfirmed('password', 'confirmPassword');","  // Use with any function that returns a Boolean","  this.validatesWithFunction('password', function (s) {","      return s.length &gt; 0;","  });","","  // Can define methods for instances like this","  this.someMethod = function () {","    // Do some stuff","  };","  */","};","","Event.add = function(params, callback)","{","  if(params.name &amp;&amp; params.begindate &amp;&amp; params.enddate &amp;&amp; params.time1  &amp;&amp; params.time2 &amp;&amp; params.activityid &amp;&amp; params.attendingusers)","  {","    var idsOrEmails = params.attendingusers.split(',');","    getEmailAndId(idsOrEmails, callback, function(emailAndId)","    {","      var emails = emailAndId.email;","      var userIds = emailAndId.id;","      geddy.model.Activity.first({id: params.activityid}, function(err, activityRecord)","      {","        if(activityRecord &amp;&amp; activityRecord.name) //basic assertion that record exists","        {","          if(params.begindate &lt;= params.enddate &amp;&amp; params.time1 &lt;= params.time2)","          {","            //all required fields are valid","            eventDict = {};","            eventDict.name = params.name;","            eventDict.begindate = params.begindate;","            eventDict.enddate = params.enddate;","            eventDict.time1 = params.time1;","            eventDict.time2 = params.time2;","            eventDict.description = params.description;","            eventDict.activityid = params.activityid;","            eventDict.attendingusers = userIds.toString();","            var eventRecord = geddy.model.Event.create(eventDict);","            geddy.model.Event.save(eventRecord, function(err, eventModel)","            {","              if(err)","              {","                console.log(\"error in event.save in Event.add\");","                console.dir(err);","                callback(backendError);","              }","              else","              {","                addEventToUsers(eventModel.id, userIds, function(respDict)","                {","                  if(params.noemail)","                  {","                    callback(respDict);","                  }","                  else","                  {","                    var inviter = \"Somebody\";","                    if(params.inviter)","                    {","                      inviter = params.inviter;","                    }","                    var message = inviter+\" wants you to join the following event: \" + params.name + \" if you haven't signed up with Group Activity Planner check it out!\";","                    Event.invite({eventid: eventModel.id, emails: emails , message: message}, function()","                    {","                      callback(respDict);","                    });","                  }","                });","              }","            });","          }","          else","          {","            callback(badTimes);","          }","        }","        else","        {","          callback(badTableJoin);","        }","      });","    });","  }","  else","  {","    callback(incorrectParams);","  }","};","","function getEmailAndId(usernamesOrEmails, errorCallback, successCallback)","{","  emails = [];","  userIds = [];","  for(var key in usernamesOrEmails)","  {","    var id = usernamesOrEmails[key];","    if(id.indexOf('@') &gt;= 0) //special characters cant be in usernames only in emails","    {","      //console.log('EMAIL found is: '+name);","      emails.push(id);","      continue;","    }","    else","    {","      geddy.model.User.first({username: id}, function(err, record)","      {","          if(err)","          {","            console.log(\"error in user.first in Event.add\");","            console.dir(err);","            errorCallback(backendError);","          }","          else","          {","            if(record &amp;&amp; record.email &amp;&amp; record.username)","            {","              //console.log('EMAIL found is: '+record.email);","              emails.push(record.email);","              userIds.push(record.username);","            }","            else","            {","              errorCallback(badTableJoin);","            }","          }","        });","      }","    }","    result = {};","    result.email = emails;","    result.id = userIds;","    successCallback(result);","}","","Event.addUsersToEvent = function(eventid, usernames, callback)","{","  usernames = usernames.split(',');","  geddy.model.Event.first({id: eventid}, function(err, eventRecord)","  {","    if(eventRecord &amp;&amp; eventRecord.attendingusers)","    {","      var data = eventRecord.attendingusers.split(',').concat(usernames);","      var newUids = data.id;","      newUids = validateUserIds(newUids, eventid);","      eventRecord.attendingusers = newUids.toString();","      geddy.model.Event.save(eventRecord, function(err, result)","      {","        if(err)","        {","          console.log(\"error in event.save in Event.addUsersToEvent\");","          console.dir(err);","          callback(backendError);","        }","        else","        {","          var message = \"You are cordially invited to join the following event: \" + eventRecord.name + \" login or signup at Group Activity Planner for more details!\";","          Event.invite({eventid: eventid, emails: data.email, message: message}, function(respDict)","          {","            callback({errCode: 1});","          });","        }","      });","    }","    else","    {","      callback(badTableJoin);","    } ","  });","};","","function validateUserIds(idArray, eventid) //assumes valid usernames","{","  toReturn = {};","  idHash = {};","  idReturn = [];","  emailReturn = [];","  for(var key in idArray)","  {","    var id = idArray[key];","    if(idHash[id])","    {","      continue;","    }","    else","    {","      idHash[id] = true;","      if(id.indexOf('@') &gt;= 0)","      {","        emailReturn.push(id);","      }","      else","      {","        geddy.model.User.first({username: id}, function(err, userRecord)","        {","          if(userRecord &amp;&amp; userRecord.username)","          {","            if(!(userRecord.myevents) || (userRecord.myevents.search(eventid) &lt; 0))","            {","              if(userRecord.myevents)","              {","                userRecord.myevents += ',' + eventid;","              }","              else","              {","                userRecord.myevents = eventid;","              }","              userRecord.confirmPassword = userRecord.password;","              geddy.model.User.save(userRecord, function(err, result)","              {","                if(!err)","                {","                  emailReturn.push(userRecord.email);","                  idReturn.push(userRecord.username);","                }","              });","            }","          }","        });","      }","    }","  }","  toReturn.id = idReturn;","  toReturn.email = emailReturn;","  return toReturn;","}","","function addEventToUsers(eventid, userIds, callback)","{","  for(var key in userIds)","  {","    var uid = userIds[key];","    geddy.model.User.first({username: uid}, function(err, record)","    {","      if(err)","      {","        console.log(\"error in user.first in Event.addEventToUsers\");","        console.dir(err);","        callback(backendError);","      }","      else","      {","        if(record &amp;&amp; record.myevents)","        {","          record.myevents += \",\"+eventid;","        }","        else","        {","          record.myevents = eventid;","        }","        record.confirmPassword = record.password;","        record.errors = null;","        geddy.model.User.save(record, function(err, result)","        {","          if(err)","          {","            console.log(\"error in event.save in Event.addEventToUsers\");","            console.dir(err);","            callback(backendError);","          }","","        });","      }","    });","  }","  callback({errCode: 1}); //success!","}","","","//params requires eventid, emails, and message","Event.invite = function(params, callback) ","{","  //send email containing \"message\" to list of emails","  var self = this;","  var responseDict = {};","","  var eventID = params.eventid;","  var emailList = params.emails;","  var message = params.message;","","  if (eventID === null || eventID === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null eventid\";","    callback(responseDict);","    return;","  } ","","  if (emailList === null || emailList === undefined || emailList === [] ) ","  {","    //handle empty emails","    responseDict.errCode = 6;","    responseDict.message = \"null emails\";","    callback(responseDict);","    return;","  } ","","  if (message === null || message === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null message\";","    callback(responseDict);","    return;","  } ","","  //check all emails for propper form","  var badEmails = [];","  var goodEmailsString = \"\";","  for(var index in emailList)","  {","    var emailAddr = emailList[index];","    if (!isValidEmail(emailAddr))","    {","      //email address is malformed","      badEmails.push(emailAddr);","    } else {","","      goodEmailsString += emailAddr + \", \";","","    }","  }","","  //some emails are bad","  if(badEmails.length &gt; 0 ){","","    responseDict.errCode = 12;","    responseDict.message = \"malformed emails\";","    responseDict.bademails = badEmails;","    callback(responseDict);","    return;","  }","","  //chop off the \", \" at the end of the string","  if(goodEmailsString.length &gt; 2)","  {","","    goodEmailsString = goodEmailsString.substring(0,goodEmailsString.length-2);","  } ","  else","  {","","    responseDict.errCode = 6;","    responseDict.message = \"null emails\";","    callback(responseDict);","    return;","  } ","","","  geddy.model.Event.first({id: eventID}, function (err, eventModel) ","    {","","      if(err){","        //handle error","        console.log(\"err\");","        console.dir(err);","        responseDict.errCode = 7;","        responseDict.message = \"database error\";","        callback(responseDict);","        return;","      } ","      else ","      {","","        if(eventModel)","        {","          //invite all emails","","          // create reusable transport method (opens pool of SMTP connections)","          var smtpTransport = nodemailer.createTransport(\"SMTP\",{","              service: \"Gmail\",","              auth: {","                user: \"groupactivityplanner.gap@gmail.com\",","                pass: \"gapgapgap\"","              }","              // auth: {","              //     user: \"groupactivityplanner@gmail.com\",","              //     pass: \"gapgapgap\"","              // }","          });","","          //Append event data to message","          blade.compileFile('app/helpers/templates/bladeEmailTemplate.blade', function (err, tmpl) {","            //console.log(\"Compiled Blade File\");","            if (!err &amp;&amp; tmpl){","              //Look up activity info","              geddy.model.Activity.first({id: eventModel.activityid}, function (err, activityModel) {","                if (activityModel){","                  //TODO Get Location","                  reverseGeocodeAddressForActivity(activityModel, function(address) {","                    //Convert time to human readable","                    var time1 = convertMsToString(eventModel.time1);","                    var time2 = convertMsToString(eventModel.time2);","                    eventModel.time1 = time1;","                    eventModel.time2 = time2;","                    //Convert date to human readable","                    var beginDate = new Date(eventModel.begindate);","                    var endDate = new Date(eventModel.enddate);","                    eventModel.begindate = beginDate.toDateString();","                    eventModel.enddate = endDate.toDateString();","                    var templateVars = {","                      event: eventModel,","                      activity: activityModel,","                      message: message,","                      location: address","                    };","","                    var templateHTML = tmpl(templateVars, function(err, html) {","                        //console.log(\"GOT HTML\");","                        if(err) throw err;","","                        var templateHTML = null;","                        if (html){","                          templateHTML = html;","                        }","","                        var mailOptions = {","                            from: \"Group Activity Planner &#226;&#156;&#148; &lt;groupactivityplanner@gmail.com&gt;\", // sender address","                            to: goodEmailsString, // list of receivers","                            subject: \"You have been invited to an event!\", // Subject line","                            text: null, // plaintext body","                            html: templateHTML // html body","                        };","","                        // send mail with defined transport object","                        smtpTransport.sendMail(mailOptions, function(error, response){","                            if(error){","                                console.log(\"error\");","                                console.dir(error);","                                responseDict.errCode = 13;","                                responseDict.message = \"email failed\";","                                callback(responseDict);","                                return;","                            }else{","                                responseDict.errCode = 1;","                                callback(responseDict);","                                return;","                            }","","                            smtpTransport.close();","","                        });","                    });","                  });","                }","              });","              ","            } else {","              console.log(\"err =\");","              console.dir(err);","              responseDict.errCode = 13;","              responseDict.message = \"email failed\";","              callback(responseDict);","            }","","","          });","","        }","         else ","        {","        ","        responseDict.errCode = 10;","        responseDict.message = \"invalid eventid\";","        callback(responseDict);","        return;","        }","      }","","    });","};","","function isValidEmail(email) { ","  try","  {","    check(email).isEmail();","    return true;","  } ","  catch (error)","  {","    return false;","  }","}","","function reverseGeocodeAddressForActivity(activityModel, callback) {","  if (activityModel.latitude &amp;&amp; activityModel.longitude){","    var gm = require('googlemaps');","    var util = require('util');","","    var latLong = activityModel.latitude + ',' + activityModel.longitude;","    gm.reverseGeocode(latLong, function(err, data){","      if (err){","        callback(null);","      }","       else ","      {","        var address = '';","        if (data.status == \"OK\") {","          address = data.results[0].formatted_address;","        }","        callback(address);","      }","    });","  } else {","    callback(null);","  }","}","function convertMsToString(time) {","  // Create a Date object with that time as the milliseconds","  var d = new Date(0,0,0,0,0,0,time);","  var hours = d.getHours();","  var hoursStr = hours.toString();","  var minutes = d.getMinutes();","  var minutesStr = minutes.toString();","  var am_pm = 'AM';","","  // Change from 24-hr clock time to 12-hr clock time","  if (hours === 12) {","    am_pm = 'PM';","  } else if (hours &gt; 12) {","    hours = hours % 12;","    am_pm = 'PM';","    hoursStr = hours.toString();","  }","  // Add the '0' before the minutes if less than 10 minutes","  if (minutes &lt; 10) {","    minutesStr = '0' + minutesStr;","  }","","  // Create the string in the proper format HH:MM(AM/PM)","  var dateString = hoursStr + ':' + minutesStr + am_pm;","  return dateString;","}","","Event.changeDateTime = function(params, callback) ","{","","  var self = this;","","  var responseDict = {};","","  //eventid","  if(!params.eventid)","  {","    responseDict.errCode = 6;","    responseDict.message = \"null eventid\";","    callback(responseDict);","    return;","  }","","  var eventID = params.eventid;","","  if (!params.time1 &amp;&amp; !params.time2 &amp;&amp; !params.begindate &amp;&amp; !params.enddate )","  {","    responseDict.errCode = 6;","    responseDict.message = \"all date/time parameters are null\";","    callback(responseDict);","    return;","  }","","  //time1","  var newTime1;","  if(params.time1) {","    newTime1 = parseFloat(params.time1);","  }","","  //time2","  var newTime2;","  if(params.time2) {","    newTime2 = parseFloat(params.time2);","  }","  console.log(\"NEW TIME 2 = \"+ newTime2);","","  //begindate","  var newBeginDate;","  if(params.begindate) {","    newBeginDate = parseFloat(params.begindate);","  }","","  //enddate","  var newEndDate;","  if(params.enddate) {","    newEndDate = parseFloat(params.enddate);","  }","","","  //get the event","  geddy.model.Event.first({id: eventID}, function (err, eventModel) ","    {","","      if (err){","        //handle error","        console.log(\"err change date time\");","        console.dir(err);","        responseDict.errCode = 7;","        responseDict.message = \"database error\";","        callback(responseDict);","        return;","      } ","      else ","      {","","        if(!eventModel)","        {","          //event model for this id not found","          responseDict.errCode = 10;","          responseDict.message = \"invalid eventid\";","          callback(responseDict);","          return;","","        }","        else","        {","","          //set fields if neccesary","          if ((typeof newTime1) == 'number') {","            eventModel.time1 = newTime1;","          }","","          if ((typeof newTime2) == 'number') {","            eventModel.time2 = newTime2;","            console.log(\"CHANGED TIME 2\");","          }","","          if ((typeof newBeginDate) == 'number') {","            eventModel.begindate = newBeginDate;","          }","","          if ((typeof newEndDate) == 'number') {","            eventModel.enddate = newEndDate;","          }","        }","","        //check to see if fields are valid","        if(eventModel.time1 &gt;= eventModel.time2)","        {","          responseDict.errCode = 11;","          responseDict.message = \"invalid times\";","          callback(responseDict);","          return;","        }","","        if(eventModel.begindate &gt;= eventModel.enddate)","        {","          responseDict.errCode = 11;","          responseDict.message = \"invalid dates\";","          callback(responseDict);","          return;","        }","","","        //save model!","        geddy.model.Event.save(eventModel, function(err, result)","        {","          if(err)","          {","            console.log(\"error in Event.save in changeDateTime\");","            console.dir(err);","            responseDict.errCode = 7;","            responseDict.message = \"database error\";","            callback(responseDict);","            return;","","          } ","          else if (result)","          {","            //save succeded","            responseDict.errCode = 1;","            callback(responseDict);","            return;","          } ","          else","          {","            responseDict.errCode = 7;","            responseDict.message = \"database error\";","            callback(responseDict);","            return;            ","          }","        });","      }","    });","};","","Event.getMyEvents = function (params, callback) {","  geddy.model.User.first({id: params.userId}, function (err, userModel) {","    if (err){","      console.log(\"error in getMyEvents\");","      console.dir(err);","      responseDict.events = [];","      // console.log(\"err exists: \");","      // console.dir(err);","      responseDict.errCode = 7;","      callback(responseDict);","    } else {","      if (userModel){","        var myEvents = [];","        if (userModel.myevents){","          var eventIds = userModel.myevents.split(',');","          for (var index in eventIds){","            var eventId = eventIds[index];","            geddy.model.Event.first({id: eventId}, function (err, eventModel){","              if (err){","                console.log(\"error in event.first in getMyEvents\");","                console.dir(err);","                responseDict.events = [];","                responseDict.errCode = 7;","                callback(responseDict);","              } else if (eventModel){","                //console.log(\"EVENT MODEL:\");","                //console.log(eventModel);","                myEvents.push(eventModel);","              }","              if (index == myEvents.length - 1){","                getEventsCallback(1, myEvents, callback);","              }","            });","          }","        } else {","          getEventsCallback(1, myEvents, callback);","        }","      }","    }","  });","};","","function getEventsCallback(errCode, events, callback){","  var responseDict = {};","  responseDict.errCode = 1;","  responseDict.events = events;","  callback(responseDict);","}","","  ","/*","// Can also define them on the prototype","Event.prototype.someOtherMethod = function () {","  // Do some other stuff","};","// Can also define static methods and properties","Event.someStaticMethod = function () {","  // Do some other stuff","};","Event.someStaticProperty = 'YYZ';","*/","","Event.TESTAPI_resetFixture = function (callback) {","  geddy.model.Event.all(function (err, result) {","    // console.log(\"got all activity models with error: \" + err + \" and result: \" + result);","    for (var eventModel in result){","      // console.log(\"trying to remove activityModel: \" + result[activityModel]);","      geddy.model.Event.remove(result[eventModel].id);","    }","    var responseDict = {};","    responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};  ","","Event = geddy.model.register('Event', Event);"];
