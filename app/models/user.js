/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/user.js']) {
  _$jscoverage['models/user.js'] = [];
  _$jscoverage['models/user.js'][1] = 0;
  _$jscoverage['models/user.js'][5] = 0;
  _$jscoverage['models/user.js'][6] = 0;
  _$jscoverage['models/user.js'][7] = 0;
  _$jscoverage['models/user.js'][8] = 0;
  _$jscoverage['models/user.js'][9] = 0;
  _$jscoverage['models/user.js'][10] = 0;
  _$jscoverage['models/user.js'][11] = 0;
  _$jscoverage['models/user.js'][12] = 0;
  _$jscoverage['models/user.js'][13] = 0;
  _$jscoverage['models/user.js'][14] = 0;
  _$jscoverage['models/user.js'][16] = 0;
  _$jscoverage['models/user.js'][19] = 0;
  _$jscoverage['models/user.js'][21] = 0;
  _$jscoverage['models/user.js'][22] = 0;
  _$jscoverage['models/user.js'][23] = 0;
  _$jscoverage['models/user.js'][26] = 0;
  _$jscoverage['models/user.js'][27] = 0;
  _$jscoverage['models/user.js'][32] = 0;
  _$jscoverage['models/user.js'][34] = 0;
  _$jscoverage['models/user.js'][35] = 0;
  _$jscoverage['models/user.js'][36] = 0;
  _$jscoverage['models/user.js'][40] = 0;
  _$jscoverage['models/user.js'][41] = 0;
  _$jscoverage['models/user.js'][43] = 0;
  _$jscoverage['models/user.js'][44] = 0;
  _$jscoverage['models/user.js'][47] = 0;
  _$jscoverage['models/user.js'][49] = 0;
  _$jscoverage['models/user.js'][52] = 0;
  _$jscoverage['models/user.js'][53] = 0;
  _$jscoverage['models/user.js'][54] = 0;
  _$jscoverage['models/user.js'][55] = 0;
  _$jscoverage['models/user.js'][57] = 0;
  _$jscoverage['models/user.js'][58] = 0;
  _$jscoverage['models/user.js'][59] = 0;
  _$jscoverage['models/user.js'][64] = 0;
  _$jscoverage['models/user.js'][65] = 0;
  _$jscoverage['models/user.js'][74] = 0;
  _$jscoverage['models/user.js'][76] = 0;
  _$jscoverage['models/user.js'][77] = 0;
  _$jscoverage['models/user.js'][79] = 0;
  _$jscoverage['models/user.js'][81] = 0;
  _$jscoverage['models/user.js'][83] = 0;
  _$jscoverage['models/user.js'][84] = 0;
  _$jscoverage['models/user.js'][88] = 0;
  _$jscoverage['models/user.js'][89] = 0;
  _$jscoverage['models/user.js'][91] = 0;
  _$jscoverage['models/user.js'][93] = 0;
  _$jscoverage['models/user.js'][95] = 0;
  _$jscoverage['models/user.js'][96] = 0;
  _$jscoverage['models/user.js'][97] = 0;
  _$jscoverage['models/user.js'][101] = 0;
}
_$jscoverage['models/user.js'][1]++;
var passport = require("passport"), passportHelper = require("../helpers/passport/index"), cryptPass = passportHelper.cryptPass;
_$jscoverage['models/user.js'][5]++;
var User = (function () {
  _$jscoverage['models/user.js'][6]++;
  this.property("username", "string", {required: true});
  _$jscoverage['models/user.js'][7]++;
  this.property("password", "string", {required: true});
  _$jscoverage['models/user.js'][8]++;
  this.property("familyName", "string");
  _$jscoverage['models/user.js'][9]++;
  this.property("givenName", "string");
  _$jscoverage['models/user.js'][10]++;
  this.property("email", "string");
  _$jscoverage['models/user.js'][11]++;
  this.property("myevents", "string");
  _$jscoverage['models/user.js'][12]++;
  this.validatesLength("username", {min: 3, max: 128});
  _$jscoverage['models/user.js'][13]++;
  this.validatesLength("password", {min: 8, max: 128});
  _$jscoverage['models/user.js'][14]++;
  this.validatesConfirmed("password", "confirmPassword");
  _$jscoverage['models/user.js'][16]++;
  this.hasMany("Passports");
});
_$jscoverage['models/user.js'][19]++;
User.add = (function (user, callback) {
  _$jscoverage['models/user.js'][21]++;
  User.first({username: user.username}, (function (err, data) {
  _$jscoverage['models/user.js'][22]++;
  var responseDict = {};
  _$jscoverage['models/user.js'][23]++;
  if (data) {
    _$jscoverage['models/user.js'][26]++;
    responseDict.errCode = 2;
    _$jscoverage['models/user.js'][27]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/user.js'][32]++;
    if (! user.username || user.username.length === 0 || user.username.length > 128) {
      _$jscoverage['models/user.js'][34]++;
      responseDict.errCode = 3;
      _$jscoverage['models/user.js'][35]++;
      callback(responseDict);
    }
    else {
      _$jscoverage['models/user.js'][36]++;
      if (! user.password || user.password.length === 0 || user.password.length > 128) {
        _$jscoverage['models/user.js'][40]++;
        responseDict.errCode = 4;
        _$jscoverage['models/user.js'][41]++;
        callback(responseDict);
      }
      else {
        _$jscoverage['models/user.js'][43]++;
        if (user.isValid()) {
          _$jscoverage['models/user.js'][44]++;
          user.password = cryptPass(user.password);
        }
        _$jscoverage['models/user.js'][47]++;
        user.save((function (err, data) {
  _$jscoverage['models/user.js'][49]++;
  if (err) {
    _$jscoverage['models/user.js'][52]++;
    console.log("Error saving User: ");
    _$jscoverage['models/user.js'][53]++;
    responseDict.message = "";
    _$jscoverage['models/user.js'][54]++;
    for (var item in err) {
      _$jscoverage['models/user.js'][55]++;
      responseDict.message += err[item];
}
    _$jscoverage['models/user.js'][57]++;
    console.log(responseDict.message);
    _$jscoverage['models/user.js'][58]++;
    responseDict.errCode = 7;
    _$jscoverage['models/user.js'][59]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/user.js'][64]++;
    responseDict.errCode = 1;
    _$jscoverage['models/user.js'][65]++;
    callback(responseDict);
  }
}));
      }
    }
  }
}));
});
_$jscoverage['models/user.js'][74]++;
User.getUsernames = (function (callback) {
  _$jscoverage['models/user.js'][76]++;
  usernames = [];
  _$jscoverage['models/user.js'][77]++;
  geddy.model.User.all((function (err, result) {
  _$jscoverage['models/user.js'][79]++;
  for (var key in result) {
    _$jscoverage['models/user.js'][81]++;
    usernames.push(result[key].username);
}
  _$jscoverage['models/user.js'][83]++;
  usernames.sort();
  _$jscoverage['models/user.js'][84]++;
  callback(usernames);
}));
});
_$jscoverage['models/user.js'][88]++;
User.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/user.js'][89]++;
  geddy.model.User.all((function (err, result) {
  _$jscoverage['models/user.js'][91]++;
  for (var userModel in result) {
    _$jscoverage['models/user.js'][93]++;
    geddy.model.User.remove(result[userModel].id);
}
  _$jscoverage['models/user.js'][95]++;
  var responseDict = {};
  _$jscoverage['models/user.js'][96]++;
  responseDict.errCode = 1;
  _$jscoverage['models/user.js'][97]++;
  callback(responseDict);
}));
});
_$jscoverage['models/user.js'][101]++;
User = geddy.model.register("User", User);
_$jscoverage['models/user.js'].source = ["var passport = require('passport')","  , passportHelper = require('../helpers/passport/index')","  , cryptPass = passportHelper.cryptPass;","","var User = function () {","\tthis.property('username', 'string', {required: true});","    this.property('password', 'string', {required: true});","    this.property('familyName', 'string');","    this.property('givenName', 'string');","    this.property('email', 'string');","    this.property('myevents', 'string');","    this.validatesLength('username', {min: 3, max:128});","    this.validatesLength('password', {min: 8, max:128});","    this.validatesConfirmed('password', 'confirmPassword');","","    this.hasMany('Passports');","};","","User.add = function(user, callback){","    // Non-blocking uniqueness checks are hard","    User.first({username: user.username}, function(err, data) {","      var responseDict = {};","    if (data) {","      // console.log(\"USER EXISTS\");","      //Username Exists errCode=2","      responseDict.errCode = 2;","      callback(responseDict);","      //self.transfer('add');","    }","    else {","      // console.log(\"USER DOESNT EXIST\");","      if (!user.username || user.username.length === 0 || user.username.length &gt; 128) {","        // console.log(\"bad username block\");","        responseDict.errCode = 3; //\"ERR_BAD_USERNAME\"","        callback(responseDict);","      } else if (!user.password || user.password.length === 0 || user.password.length &gt; 128 ) {","        //|| user.confirmPassword != user.password){","        // console.log(\"bad password block with confirmPassword: \" + user.confirmPassword);","        //Check if password is not empty and &lt;128 chars","        responseDict.errCode = 4; //\"ERR_BAD_PASSWORD\"","        callback(responseDict);","      } else {","        if (user.isValid()) {","          user.password = cryptPass(user.password);","        }","        // console.log(\"user is : username: \" + user.username + \" and password: \" + user.password);","        user.save(function(err, data) {","          // console.log(\"Got Data: \" + data);","          if (err) {","            // params.errors = err;","            //Database Error errCode=7","            console.log(\"Error saving User: \");","            responseDict.message = \"\";","            for (var item in err){","              responseDict.message += err[item];","            }","            console.log(responseDict.message);","            responseDict.errCode = 7;","            callback(responseDict);","            // self.transfer('add');","          }","          else {","            //Success errCode=1","            responseDict.errCode = 1;","            callback(responseDict);","              // self.redirect({controller: self.name});","          }","        });","      }","    }","    });","};","","User.getUsernames = function(callback)","{","  usernames = [];","  geddy.model.User.all(function(err, result)","  {","    for(var key in result)","    {","      usernames.push(result[key].username);","    }","    usernames.sort();","    callback(usernames);","  });","};","","User.TESTAPI_resetFixture = function (callback) {","  geddy.model.User.all(function (err, result) {","     // console.log(\"got all users models with error: \" + err + \" and result: \" + result);","    for (var userModel in result){","       // console.log(\"trying to remove userModel: \" + result[userModel]);","      geddy.model.User.remove(result[userModel].id);","    }","    var responseDict = {};","  responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};","","User = geddy.model.register('User', User);"];
