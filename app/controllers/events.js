/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['controllers/events.js']) {
  _$jscoverage['controllers/events.js'] = [];
  _$jscoverage['controllers/events.js'][1] = 0;
  _$jscoverage['controllers/events.js'][4] = 0;
  _$jscoverage['controllers/events.js'][5] = 0;
  _$jscoverage['controllers/events.js'][9] = 0;
  _$jscoverage['controllers/events.js'][11] = 0;
  _$jscoverage['controllers/events.js'][12] = 0;
  _$jscoverage['controllers/events.js'][14] = 0;
  _$jscoverage['controllers/events.js'][15] = 0;
  _$jscoverage['controllers/events.js'][19] = 0;
  _$jscoverage['controllers/events.js'][21] = 0;
  _$jscoverage['controllers/events.js'][23] = 0;
  _$jscoverage['controllers/events.js'][27] = 0;
  _$jscoverage['controllers/events.js'][28] = 0;
  _$jscoverage['controllers/events.js'][30] = 0;
  _$jscoverage['controllers/events.js'][33] = 0;
  _$jscoverage['controllers/events.js'][34] = 0;
  _$jscoverage['controllers/events.js'][35] = 0;
  _$jscoverage['controllers/events.js'][38] = 0;
  _$jscoverage['controllers/events.js'][39] = 0;
  _$jscoverage['controllers/events.js'][40] = 0;
  _$jscoverage['controllers/events.js'][41] = 0;
  _$jscoverage['controllers/events.js'][43] = 0;
  _$jscoverage['controllers/events.js'][48] = 0;
  _$jscoverage['controllers/events.js'][49] = 0;
  _$jscoverage['controllers/events.js'][51] = 0;
  _$jscoverage['controllers/events.js'][52] = 0;
  _$jscoverage['controllers/events.js'][53] = 0;
  _$jscoverage['controllers/events.js'][54] = 0;
  _$jscoverage['controllers/events.js'][55] = 0;
  _$jscoverage['controllers/events.js'][57] = 0;
  _$jscoverage['controllers/events.js'][62] = 0;
  _$jscoverage['controllers/events.js'][63] = 0;
  _$jscoverage['controllers/events.js'][65] = 0;
  _$jscoverage['controllers/events.js'][66] = 0;
  _$jscoverage['controllers/events.js'][67] = 0;
  _$jscoverage['controllers/events.js'][68] = 0;
  _$jscoverage['controllers/events.js'][69] = 0;
  _$jscoverage['controllers/events.js'][71] = 0;
  _$jscoverage['controllers/events.js'][76] = 0;
  _$jscoverage['controllers/events.js'][77] = 0;
  _$jscoverage['controllers/events.js'][79] = 0;
  _$jscoverage['controllers/events.js'][80] = 0;
  _$jscoverage['controllers/events.js'][81] = 0;
  _$jscoverage['controllers/events.js'][82] = 0;
  _$jscoverage['controllers/events.js'][83] = 0;
  _$jscoverage['controllers/events.js'][86] = 0;
  _$jscoverage['controllers/events.js'][87] = 0;
  _$jscoverage['controllers/events.js'][88] = 0;
  _$jscoverage['controllers/events.js'][89] = 0;
  _$jscoverage['controllers/events.js'][91] = 0;
  _$jscoverage['controllers/events.js'][97] = 0;
  _$jscoverage['controllers/events.js'][98] = 0;
  _$jscoverage['controllers/events.js'][100] = 0;
  _$jscoverage['controllers/events.js'][101] = 0;
  _$jscoverage['controllers/events.js'][102] = 0;
  _$jscoverage['controllers/events.js'][103] = 0;
  _$jscoverage['controllers/events.js'][105] = 0;
  _$jscoverage['controllers/events.js'][111] = 0;
  _$jscoverage['controllers/events.js'][115] = 0;
  _$jscoverage['controllers/events.js'][120] = 0;
  _$jscoverage['controllers/events.js'][121] = 0;
  _$jscoverage['controllers/events.js'][123] = 0;
  _$jscoverage['controllers/events.js'][124] = 0;
  _$jscoverage['controllers/events.js'][125] = 0;
  _$jscoverage['controllers/events.js'][126] = 0;
  _$jscoverage['controllers/events.js'][128] = 0;
  _$jscoverage['controllers/events.js'][129] = 0;
  _$jscoverage['controllers/events.js'][130] = 0;
  _$jscoverage['controllers/events.js'][137] = 0;
}
_$jscoverage['controllers/events.js'][1]++;
var passport = require("../helpers/passport"), requireAuth = passport.requireAuth;
_$jscoverage['controllers/events.js'][4]++;
var Events = (function () {
  _$jscoverage['controllers/events.js'][5]++;
  this.before(requireAuth, {except: [""]});
  _$jscoverage['controllers/events.js'][9]++;
  this.respondsWith = ["html", "json", "xml", "js", "txt"];
  _$jscoverage['controllers/events.js'][11]++;
  this.index = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][12]++;
  var self = this;
  _$jscoverage['controllers/events.js'][14]++;
  geddy.model.Event.all((function (err, events) {
  _$jscoverage['controllers/events.js'][15]++;
  self.respond({params: params, events: events});
}));
});
  _$jscoverage['controllers/events.js'][19]++;
  this.add = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][21]++;
  geddy.model.Event.add(params, (function (respDict) {
  _$jscoverage['controllers/events.js'][23]++;
  this.respond(respDict);
}));
});
  _$jscoverage['controllers/events.js'][27]++;
  this.create = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][28]++;
  params.id = params.id || geddy.string.uuid(10);
  _$jscoverage['controllers/events.js'][30]++;
  var self = this, event = geddy.model.Event.create(params);
  _$jscoverage['controllers/events.js'][33]++;
  if (! event.isValid()) {
    _$jscoverage['controllers/events.js'][34]++;
    params.errors = event.errors;
    _$jscoverage['controllers/events.js'][35]++;
    self.transfer("add");
  }
  _$jscoverage['controllers/events.js'][38]++;
  event.save((function (err, data) {
  _$jscoverage['controllers/events.js'][39]++;
  if (err) {
    _$jscoverage['controllers/events.js'][40]++;
    params.errors = err;
    _$jscoverage['controllers/events.js'][41]++;
    self.transfer("add");
  }
  else {
    _$jscoverage['controllers/events.js'][43]++;
    self.redirect({controller: self.name});
  }
}));
});
  _$jscoverage['controllers/events.js'][48]++;
  this.show = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][49]++;
  var self = this;
  _$jscoverage['controllers/events.js'][51]++;
  geddy.model.Event.first(params.id, (function (err, event) {
  _$jscoverage['controllers/events.js'][52]++;
  if (! event) {
    _$jscoverage['controllers/events.js'][53]++;
    var err = new Error();
    _$jscoverage['controllers/events.js'][54]++;
    err.statusCode = 400;
    _$jscoverage['controllers/events.js'][55]++;
    self.error(err);
  }
  else {
    _$jscoverage['controllers/events.js'][57]++;
    self.respond({params: params, event: event.toObj()});
  }
}));
});
  _$jscoverage['controllers/events.js'][62]++;
  this.edit = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][63]++;
  var self = this;
  _$jscoverage['controllers/events.js'][65]++;
  geddy.model.Event.first(params.id, (function (err, event) {
  _$jscoverage['controllers/events.js'][66]++;
  if (! event) {
    _$jscoverage['controllers/events.js'][67]++;
    var err = new Error();
    _$jscoverage['controllers/events.js'][68]++;
    err.statusCode = 400;
    _$jscoverage['controllers/events.js'][69]++;
    self.error(err);
  }
  else {
    _$jscoverage['controllers/events.js'][71]++;
    self.respond({params: params, event: event});
  }
}));
});
  _$jscoverage['controllers/events.js'][76]++;
  this.update = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][77]++;
  var self = this;
  _$jscoverage['controllers/events.js'][79]++;
  geddy.model.Event.first(params.id, (function (err, event) {
  _$jscoverage['controllers/events.js'][80]++;
  event.updateProperties(params);
  _$jscoverage['controllers/events.js'][81]++;
  if (! event.isValid()) {
    _$jscoverage['controllers/events.js'][82]++;
    params.errors = event.errors;
    _$jscoverage['controllers/events.js'][83]++;
    self.transfer("edit");
  }
  _$jscoverage['controllers/events.js'][86]++;
  event.save((function (err, data) {
  _$jscoverage['controllers/events.js'][87]++;
  if (err) {
    _$jscoverage['controllers/events.js'][88]++;
    params.errors = err;
    _$jscoverage['controllers/events.js'][89]++;
    self.transfer("edit");
  }
  else {
    _$jscoverage['controllers/events.js'][91]++;
    self.redirect({controller: self.name});
  }
}));
}));
});
  _$jscoverage['controllers/events.js'][97]++;
  this.destroy = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][98]++;
  var self = this;
  _$jscoverage['controllers/events.js'][100]++;
  geddy.model.Event.remove(params.id, (function (err) {
  _$jscoverage['controllers/events.js'][101]++;
  if (err) {
    _$jscoverage['controllers/events.js'][102]++;
    params.errors = err;
    _$jscoverage['controllers/events.js'][103]++;
    self.transfer("edit");
  }
  else {
    _$jscoverage['controllers/events.js'][105]++;
    self.redirect({controller: self.name});
  }
}));
});
  _$jscoverage['controllers/events.js'][111]++;
  this.invite = (function (req, resp, params) {
});
  _$jscoverage['controllers/events.js'][115]++;
  this.changeDateTime = (function (req, resp, params) {
});
  _$jscoverage['controllers/events.js'][120]++;
  this.getMyEvents = (function (req, resp, params) {
  _$jscoverage['controllers/events.js'][121]++;
  var self = this;
  _$jscoverage['controllers/events.js'][123]++;
  geddy.model.Event.getMyEvents({userId: self.session.get("userId")}, (function (err, responseDict) {
  _$jscoverage['controllers/events.js'][124]++;
  if (err) {
    _$jscoverage['controllers/events.js'][125]++;
    params.errors = err;
    _$jscoverage['controllers/events.js'][126]++;
    self.respond();
  }
  else {
    _$jscoverage['controllers/events.js'][128]++;
    params.errCode = responseDict.errCode;
    _$jscoverage['controllers/events.js'][129]++;
    params.events = responseDict.events;
    _$jscoverage['controllers/events.js'][130]++;
    self.respond(responseDict, {format: "json"});
  }
}));
});
});
_$jscoverage['controllers/events.js'][137]++;
exports.Events = Events;
_$jscoverage['controllers/events.js'].source = ["var passport = require('../helpers/passport')","  , requireAuth = passport.requireAuth;","","var Events = function () {","  this.before(requireAuth, {","    except: ['']","  });","","  this.respondsWith = ['html', 'json', 'xml', 'js', 'txt'];","","  this.index = function (req, resp, params) {","    var self = this;","","    geddy.model.Event.all(function(err, events) {","      self.respond({params: params, events: events});","    });","  };","","  this.add = function (req, resp, params) ","  {","    geddy.model.Event.add(params, function(respDict)","    {","      this.respond(respDict);","    });","  };","","  this.create = function (req, resp, params) {","    params.id = params.id || geddy.string.uuid(10);","","    var self = this","      , event = geddy.model.Event.create(params);","","    if (!event.isValid()) {","      params.errors = event.errors;","      self.transfer('add');","    }","","    event.save(function(err, data) {","      if (err) {","        params.errors = err;","        self.transfer('add');","      } else {","        self.redirect({controller: self.name});","      }","    });","  };","","  this.show = function (req, resp, params) {","    var self = this;","","    geddy.model.Event.first(params.id, function(err, event) {","      if (!event) {","        var err = new Error();","        err.statusCode = 400;","        self.error(err);","      } else {","        self.respond({params: params, event: event.toObj()});","      }","    });","  };","","  this.edit = function (req, resp, params) {","    var self = this;","","    geddy.model.Event.first(params.id, function(err, event) {","      if (!event) {","        var err = new Error();","        err.statusCode = 400;","        self.error(err);","      } else {","        self.respond({params: params, event: event});","      }","    });","  };","","  this.update = function (req, resp, params) {","    var self = this;","","    geddy.model.Event.first(params.id, function(err, event) {","      event.updateProperties(params);","      if (!event.isValid()) {","        params.errors = event.errors;","        self.transfer('edit');","      }","","      event.save(function(err, data) {","        if (err) {","          params.errors = err;","          self.transfer('edit');","        } else {","          self.redirect({controller: self.name});","        }","      });","    });","  };","","  this.destroy = function (req, resp, params) {","    var self = this;","","    geddy.model.Event.remove(params.id, function(err) {","      if (err) {","        params.errors = err;","        self.transfer('edit');","      } else {","        self.redirect({controller: self.name});","      }","    });","  };","","","  this.invite = function (req, resp, params) {","","  };","","  this.changeDateTime = function (req, resp, params) {","","  };","","  //Get My Events","  this.getMyEvents = function (req, resp, params) {","    var self = this;","","    geddy.model.Event.getMyEvents({userId: self.session.get('userId')}, function(err, responseDict) {","      if (err) {","        params.errors = err;","        self.respond();","      } else {","        params.errCode = responseDict.errCode;","        params.events = responseDict.events;","        self.respond(responseDict, {format: 'json'});","      }","    });","  };","","};","","exports.Events = Events;"];
