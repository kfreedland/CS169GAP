(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/activity.js']) {
  _$jscoverage['models/activity.js'] = [];
  _$jscoverage['models/activity.js'][4] = 0;
  _$jscoverage['models/activity.js'][6] = 0;
  _$jscoverage['models/activity.js'][26] = 0;
  _$jscoverage['models/activity.js'][28] = 0;
  _$jscoverage['models/activity.js'][33] = 0;
  _$jscoverage['models/activity.js'][35] = 0;
  _$jscoverage['models/activity.js'][37] = 0;
  _$jscoverage['models/activity.js'][38] = 0;
  _$jscoverage['models/activity.js'][39] = 0;
  _$jscoverage['models/activity.js'][40] = 0;
  _$jscoverage['models/activity.js'][42] = 0;
  _$jscoverage['models/activity.js'][43] = 0;
  _$jscoverage['models/activity.js'][46] = 0;
  _$jscoverage['models/activity.js'][49] = 0;
  _$jscoverage['models/activity.js'][51] = 0;
  _$jscoverage['models/activity.js'][53] = 0;
  _$jscoverage['models/activity.js'][59] = 0;
  _$jscoverage['models/activity.js'][61] = 0;
  _$jscoverage['models/activity.js'][66] = 0;
  _$jscoverage['models/activity.js'][68] = 0;
  _$jscoverage['models/activity.js'][69] = 0;
  _$jscoverage['models/activity.js'][70] = 0;
  _$jscoverage['models/activity.js'][71] = 0;
  _$jscoverage['models/activity.js'][75] = 0;
  _$jscoverage['models/activity.js'][80] = 0;
  _$jscoverage['models/activity.js'][82] = 0;
  _$jscoverage['models/activity.js'][87] = 0;
  _$jscoverage['models/activity.js'][89] = 0;
  _$jscoverage['models/activity.js'][90] = 0;
  _$jscoverage['models/activity.js'][91] = 0;
  _$jscoverage['models/activity.js'][92] = 0;
  _$jscoverage['models/activity.js'][94] = 0;
  _$jscoverage['models/activity.js'][96] = 0;
  _$jscoverage['models/activity.js'][97] = 0;
  _$jscoverage['models/activity.js'][98] = 0;
  _$jscoverage['models/activity.js'][99] = 0;
  _$jscoverage['models/activity.js'][103] = 0;
  _$jscoverage['models/activity.js'][107] = 0;
  _$jscoverage['models/activity.js'][109] = 0;
  _$jscoverage['models/activity.js'][110] = 0;
  _$jscoverage['models/activity.js'][111] = 0;
  _$jscoverage['models/activity.js'][112] = 0;
  _$jscoverage['models/activity.js'][114] = 0;
  _$jscoverage['models/activity.js'][118] = 0;
  _$jscoverage['models/activity.js'][119] = 0;
  _$jscoverage['models/activity.js'][120] = 0;
  _$jscoverage['models/activity.js'][121] = 0;
  _$jscoverage['models/activity.js'][126] = 0;
  _$jscoverage['models/activity.js'][131] = 0;
  _$jscoverage['models/activity.js'][134] = 0;
  _$jscoverage['models/activity.js'][136] = 0;
  _$jscoverage['models/activity.js'][137] = 0;
  _$jscoverage['models/activity.js'][138] = 0;
  _$jscoverage['models/activity.js'][139] = 0;
  _$jscoverage['models/activity.js'][142] = 0;
  _$jscoverage['models/activity.js'][144] = 0;
  _$jscoverage['models/activity.js'][145] = 0;
  _$jscoverage['models/activity.js'][146] = 0;
  _$jscoverage['models/activity.js'][147] = 0;
  _$jscoverage['models/activity.js'][152] = 0;
  _$jscoverage['models/activity.js'][153] = 0;
  _$jscoverage['models/activity.js'][155] = 0;
  _$jscoverage['models/activity.js'][157] = 0;
  _$jscoverage['models/activity.js'][158] = 0;
  _$jscoverage['models/activity.js'][159] = 0;
  _$jscoverage['models/activity.js'][160] = 0;
  _$jscoverage['models/activity.js'][167] = 0;
  _$jscoverage['models/activity.js'][169] = 0;
  _$jscoverage['models/activity.js'][171] = 0;
  _$jscoverage['models/activity.js'][173] = 0;
  _$jscoverage['models/activity.js'][176] = 0;
  _$jscoverage['models/activity.js'][179] = 0;
  _$jscoverage['models/activity.js'][181] = 0;
  _$jscoverage['models/activity.js'][182] = 0;
  _$jscoverage['models/activity.js'][183] = 0;
  _$jscoverage['models/activity.js'][184] = 0;
  _$jscoverage['models/activity.js'][192] = 0;
  _$jscoverage['models/activity.js'][194] = 0;
  _$jscoverage['models/activity.js'][196] = 0;
  _$jscoverage['models/activity.js'][198] = 0;
  _$jscoverage['models/activity.js'][199] = 0;
  _$jscoverage['models/activity.js'][200] = 0;
  _$jscoverage['models/activity.js'][201] = 0;
  _$jscoverage['models/activity.js'][206] = 0;
  _$jscoverage['models/activity.js'][208] = 0;
  _$jscoverage['models/activity.js'][210] = 0;
  _$jscoverage['models/activity.js'][212] = 0;
  _$jscoverage['models/activity.js'][214] = 0;
  _$jscoverage['models/activity.js'][215] = 0;
  _$jscoverage['models/activity.js'][216] = 0;
  _$jscoverage['models/activity.js'][217] = 0;
  _$jscoverage['models/activity.js'][222] = 0;
  _$jscoverage['models/activity.js'][225] = 0;
  _$jscoverage['models/activity.js'][227] = 0;
  _$jscoverage['models/activity.js'][228] = 0;
  _$jscoverage['models/activity.js'][229] = 0;
  _$jscoverage['models/activity.js'][230] = 0;
  _$jscoverage['models/activity.js'][235] = 0;
  _$jscoverage['models/activity.js'][237] = 0;
  _$jscoverage['models/activity.js'][238] = 0;
  _$jscoverage['models/activity.js'][240] = 0;
  _$jscoverage['models/activity.js'][241] = 0;
  _$jscoverage['models/activity.js'][242] = 0;
  _$jscoverage['models/activity.js'][243] = 0;
  _$jscoverage['models/activity.js'][247] = 0;
  _$jscoverage['models/activity.js'][250] = 0;
  _$jscoverage['models/activity.js'][252] = 0;
  _$jscoverage['models/activity.js'][254] = 0;
  _$jscoverage['models/activity.js'][255] = 0;
  _$jscoverage['models/activity.js'][256] = 0;
  _$jscoverage['models/activity.js'][257] = 0;
  _$jscoverage['models/activity.js'][261] = 0;
  _$jscoverage['models/activity.js'][263] = 0;
  _$jscoverage['models/activity.js'][265] = 0;
  _$jscoverage['models/activity.js'][266] = 0;
  _$jscoverage['models/activity.js'][267] = 0;
  _$jscoverage['models/activity.js'][268] = 0;
  _$jscoverage['models/activity.js'][274] = 0;
  _$jscoverage['models/activity.js'][275] = 0;
  _$jscoverage['models/activity.js'][277] = 0;
  _$jscoverage['models/activity.js'][278] = 0;
  _$jscoverage['models/activity.js'][283] = 0;
  _$jscoverage['models/activity.js'][284] = 0;
  _$jscoverage['models/activity.js'][285] = 0;
  _$jscoverage['models/activity.js'][286] = 0;
  _$jscoverage['models/activity.js'][287] = 0;
  _$jscoverage['models/activity.js'][288] = 0;
  _$jscoverage['models/activity.js'][289] = 0;
  _$jscoverage['models/activity.js'][294] = 0;
  _$jscoverage['models/activity.js'][296] = 0;
  _$jscoverage['models/activity.js'][297] = 0;
  _$jscoverage['models/activity.js'][298] = 0;
  _$jscoverage['models/activity.js'][299] = 0;
  _$jscoverage['models/activity.js'][306] = 0;
  _$jscoverage['models/activity.js'][311] = 0;
  _$jscoverage['models/activity.js'][313] = 0;
  _$jscoverage['models/activity.js'][314] = 0;
  _$jscoverage['models/activity.js'][315] = 0;
  _$jscoverage['models/activity.js'][316] = 0;
  _$jscoverage['models/activity.js'][318] = 0;
  _$jscoverage['models/activity.js'][319] = 0;
  _$jscoverage['models/activity.js'][320] = 0;
  _$jscoverage['models/activity.js'][324] = 0;
  _$jscoverage['models/activity.js'][325] = 0;
  _$jscoverage['models/activity.js'][332] = 0;
  _$jscoverage['models/activity.js'][348] = 0;
  _$jscoverage['models/activity.js'][350] = 0;
  _$jscoverage['models/activity.js'][352] = 0;
  _$jscoverage['models/activity.js'][353] = 0;
  _$jscoverage['models/activity.js'][355] = 0;
  _$jscoverage['models/activity.js'][357] = 0;
  _$jscoverage['models/activity.js'][359] = 0;
  _$jscoverage['models/activity.js'][361] = 0;
  _$jscoverage['models/activity.js'][364] = 0;
  _$jscoverage['models/activity.js'][366] = 0;
  _$jscoverage['models/activity.js'][372] = 0;
  _$jscoverage['models/activity.js'][377] = 0;
  _$jscoverage['models/activity.js'][378] = 0;
  _$jscoverage['models/activity.js'][379] = 0;
  _$jscoverage['models/activity.js'][380] = 0;
  _$jscoverage['models/activity.js'][381] = 0;
  _$jscoverage['models/activity.js'][382] = 0;
  _$jscoverage['models/activity.js'][383] = 0;
  _$jscoverage['models/activity.js'][385] = 0;
  _$jscoverage['models/activity.js'][386] = 0;
  _$jscoverage['models/activity.js'][388] = 0;
  _$jscoverage['models/activity.js'][391] = 0;
  _$jscoverage['models/activity.js'][392] = 0;
  _$jscoverage['models/activity.js'][393] = 0;
  _$jscoverage['models/activity.js'][394] = 0;
  _$jscoverage['models/activity.js'][398] = 0;
  _$jscoverage['models/activity.js'][399] = 0;
  _$jscoverage['models/activity.js'][401] = 0;
  _$jscoverage['models/activity.js'][403] = 0;
  _$jscoverage['models/activity.js'][405] = 0;
  _$jscoverage['models/activity.js'][406] = 0;
  _$jscoverage['models/activity.js'][407] = 0;
  _$jscoverage['models/activity.js'][411] = 0;
}
_$jscoverage['models/activity.js'][4]++;
var Activity = (function () {
  _$jscoverage['models/activity.js'][6]++;
  this.defineProperties({name: {type: "string", required: "true"}, description: {type: "string"}, category: {type: "string"}, flag: {type: "string", required: "true"}, time1: {type: "number"}, time2: {type: "number"}, begindate: {type: "number"}, enddate: {type: "number"}, lowprice: {type: "number"}, highprice: {type: "number"}, lownumparticipants: {type: "number"}, highnumparticipants: {type: "number"}, latitude: {type: "number"}, longitude: {type: "number"}, duration: {type: "number"}});
});
_$jscoverage['models/activity.js'][26]++;
var geoSearchHelper = (function (records, lat, myLong, callback) {
  _$jscoverage['models/activity.js'][28]++;
  var consDist = 69.1, consAng = 57.3, returnRecords = [], count = 0, idx;
  _$jscoverage['models/activity.js'][33]++;
  for (idx in records) {
    _$jscoverage['models/activity.js'][35]++;
    var record = records[idx];
    _$jscoverage['models/activity.js'][37]++;
    var dist = Math.sqrt(Math.pow(record.latitude - lat, 2) + Math.pow((record.longitude - myLong) * Math.cos(lat / 57.3), 2));
    _$jscoverage['models/activity.js'][38]++;
    record.distance = dist * 100;
    _$jscoverage['models/activity.js'][39]++;
    returnRecords.push(record);
    _$jscoverage['models/activity.js'][40]++;
    count = count + 1;
}
  _$jscoverage['models/activity.js'][42]++;
  if (returnRecords.length > 0) {
    _$jscoverage['models/activity.js'][43]++;
    returnRecords.sort((function (recA, recB) {
  _$jscoverage['models/activity.js'][43]++;
  return recA.distance - recB.distance;
}));
  }
  _$jscoverage['models/activity.js'][46]++;
  callback(returnRecords, count);
});
_$jscoverage['models/activity.js'][49]++;
Activity.add = (function (parameterDict, callback) {
  _$jscoverage['models/activity.js'][51]++;
  var self = this;
  _$jscoverage['models/activity.js'][53]++;
  var respDict = {};
  _$jscoverage['models/activity.js'][59]++;
  var validCategories = ["Sports", "Entertainment", "Food", "Arts", "Nature"];
  _$jscoverage['models/activity.js'][61]++;
  var activityDict = {};
  _$jscoverage['models/activity.js'][66]++;
  if (! parameterDict.name) {
    _$jscoverage['models/activity.js'][68]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][69]++;
    respDict.message = "null name";
    _$jscoverage['models/activity.js'][70]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][71]++;
    return;
  }
  else {
    _$jscoverage['models/activity.js'][75]++;
    activityDict.name = parameterDict.name;
  }
  _$jscoverage['models/activity.js'][80]++;
  if (parameterDict.description) {
    _$jscoverage['models/activity.js'][82]++;
    activityDict.description = parameterDict.description;
  }
  _$jscoverage['models/activity.js'][87]++;
  if (! parameterDict.category) {
    _$jscoverage['models/activity.js'][89]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][90]++;
    respDict.message = "null category";
    _$jscoverage['models/activity.js'][91]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][92]++;
    return;
  }
  else {
    _$jscoverage['models/activity.js'][94]++;
    if (validCategories.indexOf(parameterDict.category) === -1) {
      _$jscoverage['models/activity.js'][96]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][97]++;
      respDict.message = "invalid category";
      _$jscoverage['models/activity.js'][98]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][99]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][103]++;
      activityDict.category = parameterDict.category;
    }
  }
  _$jscoverage['models/activity.js'][107]++;
  if (! parameterDict.flag) {
    _$jscoverage['models/activity.js'][109]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][110]++;
    respDict.message = "null flag";
    _$jscoverage['models/activity.js'][111]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][112]++;
    return;
  }
  else {
    _$jscoverage['models/activity.js'][114]++;
    if (parameterDict.flag !== "startEnd" && parameterDict.flag !== "openClose" && parameterDict.flag !== "anyTime" && parameterDict.flag !== "dayTime" && parameterDict.flag !== "nightTime") {
      _$jscoverage['models/activity.js'][118]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][119]++;
      respDict.message = "invalid flag";
      _$jscoverage['models/activity.js'][120]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][121]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][126]++;
      activityDict.flag = parameterDict.flag;
    }
  }
  _$jscoverage['models/activity.js'][131]++;
  if (parameterDict.flag === "startEnd" || parameterDict.flag === "openClose") {
    _$jscoverage['models/activity.js'][134]++;
    if (! parameterDict.time1) {
      _$jscoverage['models/activity.js'][136]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][137]++;
      respDict.message = "null time1";
      _$jscoverage['models/activity.js'][138]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][139]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][142]++;
      if (! parameterDict.time2) {
        _$jscoverage['models/activity.js'][144]++;
        respDict.errCode = 6;
        _$jscoverage['models/activity.js'][145]++;
        respDict.message = "null time2";
        _$jscoverage['models/activity.js'][146]++;
        callback(respDict);
        _$jscoverage['models/activity.js'][147]++;
        return;
      }
      else {
        _$jscoverage['models/activity.js'][152]++;
        activityDict.time1 = parseFloat(parameterDict.time1);
        _$jscoverage['models/activity.js'][153]++;
        activityDict.time2 = parseFloat(parameterDict.time2);
        _$jscoverage['models/activity.js'][155]++;
        if (activityDict.time1 > activityDict.time2) {
          _$jscoverage['models/activity.js'][157]++;
          respDict.errCode = 6;
          _$jscoverage['models/activity.js'][158]++;
          respDict.message = "invalid times";
          _$jscoverage['models/activity.js'][159]++;
          callback(respDict);
          _$jscoverage['models/activity.js'][160]++;
          return;
        }
      }
    }
  }
  _$jscoverage['models/activity.js'][167]++;
  if (parameterDict.begindate) {
    _$jscoverage['models/activity.js'][169]++;
    parameterDict.begindate = parseFloat(parameterDict.begindate);
  }
  _$jscoverage['models/activity.js'][171]++;
  if (parameterDict.enddate) {
    _$jscoverage['models/activity.js'][173]++;
    parameterDict.enddate = parseFloat(parameterDict.enddate);
  }
  _$jscoverage['models/activity.js'][176]++;
  if (parameterDict.begindate && parameterDict.enddate) {
    _$jscoverage['models/activity.js'][179]++;
    if (parameterDict.begindate > parameterDict.enddate) {
      _$jscoverage['models/activity.js'][181]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][182]++;
      respDict.message = "invalid dates";
      _$jscoverage['models/activity.js'][183]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][184]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][192]++;
  if (parameterDict.lowprice === "0" || (parameterDict.lowprice === 0)) {
    _$jscoverage['models/activity.js'][194]++;
    activityDict.lowprice = 0;
  }
  else {
    _$jscoverage['models/activity.js'][196]++;
    if (! parameterDict.lowprice) {
      _$jscoverage['models/activity.js'][198]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][199]++;
      respDict.message = "null lowprice";
      _$jscoverage['models/activity.js'][200]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][201]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][206]++;
      activityDict.lowprice = parseFloat(parameterDict.lowprice);
    }
  }
  _$jscoverage['models/activity.js'][208]++;
  if ((parameterDict.highprice === "0") || (parameterDict.highprice === 0)) {
    _$jscoverage['models/activity.js'][210]++;
    activityDict.highprice = 0;
  }
  else {
    _$jscoverage['models/activity.js'][212]++;
    if (! parameterDict.highprice) {
      _$jscoverage['models/activity.js'][214]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][215]++;
      respDict.message = "null highprice";
      _$jscoverage['models/activity.js'][216]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][217]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][222]++;
      activityDict.highprice = parseFloat(parameterDict.highprice);
    }
  }
  _$jscoverage['models/activity.js'][225]++;
  if (activityDict.lowprice > activityDict.highprice) {
    _$jscoverage['models/activity.js'][227]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][228]++;
    respDict.message = "invalid prices";
    _$jscoverage['models/activity.js'][229]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][230]++;
    return;
  }
  _$jscoverage['models/activity.js'][235]++;
  if (parameterDict.lownumparticipants) {
    _$jscoverage['models/activity.js'][237]++;
    activityDict.lownumparticipants = parseFloat(parameterDict.lownumparticipants);
    _$jscoverage['models/activity.js'][238]++;
    if (activityDict.lownumparticipants <= 0) {
      _$jscoverage['models/activity.js'][240]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][241]++;
      respDict.message = "invalid participants";
      _$jscoverage['models/activity.js'][242]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][243]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][247]++;
  if (parameterDict.highnumparticipants) {
    _$jscoverage['models/activity.js'][250]++;
    activityDict.highnumparticipants = parseFloat(parameterDict.highnumparticipants);
    _$jscoverage['models/activity.js'][252]++;
    if (activityDict.highnumparticipants <= 0) {
      _$jscoverage['models/activity.js'][254]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][255]++;
      respDict.message = "invalid participants";
      _$jscoverage['models/activity.js'][256]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][257]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][261]++;
  if (parameterDict.lownumparticipants && parameterDict.highnumparticipants) {
    _$jscoverage['models/activity.js'][263]++;
    if (activityDict.lownumparticipants > activityDict.highnumparticipants) {
      _$jscoverage['models/activity.js'][265]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][266]++;
      respDict.message = "invalid participants";
      _$jscoverage['models/activity.js'][267]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][268]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][274]++;
  if (parameterDict.latitude) {
    _$jscoverage['models/activity.js'][275]++;
    activityDict.latitude = parseFloat(parameterDict.latitude);
  }
  _$jscoverage['models/activity.js'][277]++;
  if (parameterDict.longitude) {
    _$jscoverage['models/activity.js'][278]++;
    activityDict.longitude = parseFloat(parameterDict.longitude);
  }
  _$jscoverage['models/activity.js'][283]++;
  if (parameterDict.duration) {
    _$jscoverage['models/activity.js'][284]++;
    activityDict.duration = parseFloat(parameterDict.duration);
    _$jscoverage['models/activity.js'][285]++;
    if (activityDict.duration <= 0) {
      _$jscoverage['models/activity.js'][286]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][287]++;
      respDict.message = "invalid duration";
      _$jscoverage['models/activity.js'][288]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][289]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][294]++;
  geddy.model.Activity.first(activityDict, (function (err, result) {
  _$jscoverage['models/activity.js'][296]++;
  if (result) {
    _$jscoverage['models/activity.js'][297]++;
    respDict.errCode = 10;
    _$jscoverage['models/activity.js'][298]++;
    respDict.message = "That Activity already exists.";
    _$jscoverage['models/activity.js'][299]++;
    callback(respDict);
  }
  else {
    _$jscoverage['models/activity.js'][306]++;
    var activityRecord = geddy.model.Activity.create(activityDict);
    _$jscoverage['models/activity.js'][311]++;
    geddy.model.Activity.save(activityRecord, (function (err, result) {
  _$jscoverage['models/activity.js'][313]++;
  if (err) {
    _$jscoverage['models/activity.js'][314]++;
    console.log("ERROR in Activity SAVE");
    _$jscoverage['models/activity.js'][315]++;
    for (var item in err) {
      _$jscoverage['models/activity.js'][316]++;
      console.log(item + " : " + err.item);
}
    _$jscoverage['models/activity.js'][318]++;
    respDict.errCode = 7;
    _$jscoverage['models/activity.js'][319]++;
    respDict.message = "database error";
    _$jscoverage['models/activity.js'][320]++;
    callback(respDict);
  }
  else {
    _$jscoverage['models/activity.js'][324]++;
    respDict.errCode = 1;
    _$jscoverage['models/activity.js'][325]++;
    callback(respDict);
  }
}));
  }
}));
});
_$jscoverage['models/activity.js'][332]++;
Activity.search = (function search(params, myLat, myLong, callback) {
  _$jscoverage['models/activity.js'][348]++;
  var respDict = {};
  _$jscoverage['models/activity.js'][350]++;
  if (typeof params !== "object") {
    _$jscoverage['models/activity.js'][352]++;
    respDict.errCode = 7;
    _$jscoverage['models/activity.js'][353]++;
    callback(respDict);
  }
  _$jscoverage['models/activity.js'][355]++;
  Activity.all(params, (function (err, activities) {
  _$jscoverage['models/activity.js'][357]++;
  if (err) {
    _$jscoverage['models/activity.js'][359]++;
    throw err;
  }
  _$jscoverage['models/activity.js'][361]++;
  if (myLat && myLong && (typeof myLat == "number") && (typeof myLong == "number")) {
    _$jscoverage['models/activity.js'][364]++;
    geoSearchHelper(activities, myLat, myLong, (function (returnRecords, count) {
  _$jscoverage['models/activity.js'][366]++;
  callback(returnRecords);
}));
  }
  else {
    _$jscoverage['models/activity.js'][372]++;
    callback(activities);
  }
}));
});
_$jscoverage['models/activity.js'][377]++;
Activity.getById = (function (activityID, callback) {
  _$jscoverage['models/activity.js'][378]++;
  if (activityID) {
    _$jscoverage['models/activity.js'][379]++;
    geddy.model.Activity.first({id: activityID}, (function (err, activityModel) {
  _$jscoverage['models/activity.js'][380]++;
  var responseDict = {};
  _$jscoverage['models/activity.js'][381]++;
  if (! err && activityModel) {
    _$jscoverage['models/activity.js'][382]++;
    responseDict.errCode = 1;
    _$jscoverage['models/activity.js'][383]++;
    responseDict.activity = activityModel;
  }
  else {
    _$jscoverage['models/activity.js'][385]++;
    responseDict.errCode = 7;
    _$jscoverage['models/activity.js'][386]++;
    responseDict.activity = null;
  }
  _$jscoverage['models/activity.js'][388]++;
  callback(responseDict);
}));
  }
  else {
    _$jscoverage['models/activity.js'][391]++;
    var responseDict = {};
    _$jscoverage['models/activity.js'][392]++;
    responseDict.errCode = 6;
    _$jscoverage['models/activity.js'][393]++;
    responseDict.activity = null;
    _$jscoverage['models/activity.js'][394]++;
    callback(responseDict);
  }
});
_$jscoverage['models/activity.js'][398]++;
Activity.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/activity.js'][399]++;
  geddy.model.Activity.all((function (err, result) {
  _$jscoverage['models/activity.js'][401]++;
  for (var activityModel in result) {
    _$jscoverage['models/activity.js'][403]++;
    geddy.model.Activity.remove(result[activityModel].id);
}
  _$jscoverage['models/activity.js'][405]++;
  var responseDict = {};
  _$jscoverage['models/activity.js'][406]++;
  responseDict.errCode = 1;
  _$jscoverage['models/activity.js'][407]++;
  callback(responseDict);
}));
});
_$jscoverage['models/activity.js'][411]++;
Activity = geddy.model.register("Activity", Activity);
_$jscoverage['models/activity.js'].source = ["/*jslint white: false */","/*jslint indent: 2 */","","var Activity = function () {","","  this.defineProperties({","    name: {type: 'string', required: 'true'},","    description: {type: 'string'},","    category: {type: 'string'},","    flag: {type: 'string', required: 'true'},","    time1: {type: 'number'},","    time2: {type: 'number'},","    begindate: {type: 'number'},","    enddate: {type: 'number'},","    lowprice: {type: 'number'},","    highprice: {type: 'number'},","    lownumparticipants: {type: 'number'},","    highnumparticipants: {type: 'number'},","    latitude: {type: 'number'},","    longitude: {type: 'number'},","    duration: {type: 'number'}","  });","","};","","var geoSearchHelper = function (records, lat, myLong, callback)","{","  var consDist = 69.1","    , consAng = 57.3","    , returnRecords = []","    , count = 0","    , idx;","  for (idx in records)","  {","    var record = records[idx];","    //using a geo dist equation","    var dist = Math.sqrt(Math.pow(record.latitude - lat, 2) + Math.pow((record.longitude - myLong) * Math.cos(lat / 57.3), 2));","    record.distance = dist*100;","    returnRecords.push(record);","    count = count + 1;","  }","  if (returnRecords.length &gt; 0){","    returnRecords.sort(function (recA, recB) {return recA.distance - recB.distance;});","  }","  // console.dir(returnRecords);","  callback(returnRecords, count);","};","","Activity.add = function (parameterDict, callback){","","  var self = this;","","  var respDict = {};","","  // console.log(\"reached model create\");","  // console.dir(parameterDict);","","","  var validCategories = [\"Sports\", \"Entertainment\", \"Food\", \"Arts\", \"Nature\"];","","  var activityDict = {};","","  //make sure required fields are defineed","","  //NAME","  if (!parameterDict.name) ","  {","    respDict.errCode = 6;","    respDict.message = \"null name\";","    callback(respDict);","    return;","  } ","  else ","  {","    activityDict.name = parameterDict.name;","  } ","","","  //DESCRIPTION","  if(parameterDict.description)","  {","    activityDict.description = parameterDict.description;","  }","","","  //CATEGORY","  if(!parameterDict.category) ","  {","    respDict.errCode = 6;","    respDict.message = \"null category\";","    callback(respDict);","    return;","  } ","  else if (validCategories.indexOf(parameterDict.category) === -1) ","  {","    respDict.errCode = 6;","    respDict.message = \"invalid category\";","    callback(respDict);","    return; ","  } ","  else ","  {","    activityDict.category = parameterDict.category;","  }","","  //FLAG","  if (!parameterDict.flag) ","  {","    respDict.errCode = 6;","    respDict.message = \"null flag\";","    callback(respDict);","    return;","  } ","  else if (parameterDict.flag !== 'startEnd' &amp;&amp; parameterDict.flag !== 'openClose' ","      &amp;&amp; parameterDict.flag !== 'anyTime' &amp;&amp;  parameterDict.flag !== 'dayTime' &amp;&amp; ","      parameterDict.flag !== 'nightTime') ","  {","    respDict.errCode = 6;","    respDict.message = \"invalid flag\";","    callback(respDict);","    return;","","  } ","  else ","  {","    activityDict.flag = parameterDict.flag;","  }","","","  //TIME 1 TIME 2","  if (parameterDict.flag === 'startEnd' || parameterDict.flag === 'openClose') ","  {","    ","    if(!parameterDict.time1) ","    {","      respDict.errCode = 6;","      respDict.message = \"null time1\";","      callback(respDict);","      return;","","    } ","    else if(!parameterDict.time2) ","    {","      respDict.errCode = 6;","      respDict.message = \"null time2\";","      callback(respDict);","      return;","    ","    } ","    else ","    {","      activityDict.time1 = parseFloat(parameterDict.time1);","      activityDict.time2 = parseFloat(parameterDict.time2);","","      if(activityDict.time1 &gt; activityDict.time2)","      {","        respDict.errCode = 6;","        respDict.message = \"invalid times\";","        callback(respDict);","        return;","      }","    }","  } ","","","  //BEGIN DATE AND END DATE","  if (parameterDict.begindate) ","  {","    parameterDict.begindate = parseFloat(parameterDict.begindate);","  } ","  if (parameterDict.enddate) ","  {","    parameterDict.enddate = parseFloat(parameterDict.enddate);","  } ","","  if(parameterDict.begindate &amp;&amp; parameterDict.enddate) ","  {","","    if (parameterDict.begindate &gt; parameterDict.enddate) ","    {","      respDict.errCode = 6;","      respDict.message = \"invalid dates\";","      callback(respDict);","      return;","    }","  }","","","  //PRICES","  // console.log(\"LOWPRICE = \" + parameterDict.lowprice);","  // console.log(\"HIGHPRICE = \" + parameterDict.highprice);","  if ((parameterDict.lowprice) === \"0\" || (parameterDict.lowprice === 0))","  {","    activityDict.lowprice = 0;","","  } else if (!parameterDict.lowprice) ","  {","    respDict.errCode = 6;","    respDict.message = \"null lowprice\";","    callback(respDict);","    return;","","  } ","  else ","  {","    activityDict.lowprice = parseFloat(parameterDict.lowprice);","  }","  if ((parameterDict.highprice === \"0\") || (parameterDict.highprice === 0))","  {","    activityDict.highprice = 0;","    ","  } else if (!parameterDict.highprice) ","  {","    respDict.errCode = 6;","    respDict.message = \"null highprice\";","    callback(respDict);","    return; ","","  } ","  else ","  {","    activityDict.highprice = parseFloat(parameterDict.highprice);","  }","","  if (activityDict.lowprice &gt; activityDict.highprice) ","  {","    respDict.errCode = 6;","    respDict.message = \"invalid prices\";","    callback(respDict);","    return;","  }","","","  //NUMBER OF PARTICIPANTS","  if (parameterDict.lownumparticipants) ","  {","    activityDict.lownumparticipants = parseFloat(parameterDict.lownumparticipants);","    if(activityDict.lownumparticipants &lt;= 0 )","    {","      respDict.errCode = 6;","      respDict.message = \"invalid participants\";","      callback(respDict);","      return;","    }","  }","","  if (parameterDict.highnumparticipants)","   {","    ","    activityDict.highnumparticipants = parseFloat(parameterDict.highnumparticipants);","    ","    if(activityDict.highnumparticipants &lt;= 0 )","    {","      respDict.errCode = 6;","      respDict.message = \"invalid participants\";","      callback(respDict);","      return;","    }","  }","","  if (parameterDict.lownumparticipants &amp;&amp; parameterDict.highnumparticipants) ","  {","    if(activityDict.lownumparticipants &gt; activityDict.highnumparticipants)","    {","      respDict.errCode = 6;","      respDict.message = \"invalid participants\";","      callback(respDict);","      return;","    }","  } ","","","  //LATTITUDE LONGITUDE","  if (parameterDict.latitude) {","    activityDict.latitude = parseFloat(parameterDict.latitude);","  }","  if (parameterDict.longitude) {","    activityDict.longitude = parseFloat(parameterDict.longitude);","  }","","","  //DURATION","  if(parameterDict.duration){","    activityDict.duration = parseFloat(parameterDict.duration);","    if(activityDict.duration &lt;= 0 ){","      respDict.errCode = 6;","      respDict.message = \"invalid duration\";","      callback(respDict);","      return;","    }","  }","","  //Make sure does not exist","   geddy.model.Activity.first(activityDict,","    function (err, result) {","      if (result){","        respDict.errCode = 10;","        respDict.message = \"That Activity already exists.\";","        callback(respDict);","      } else {","        // console.log(\"activity does not exists yet, so we continue to create it\");","        //all checks pass","        // console.log(\"ACTIVITY DICT: \");","        // console.dir(activityDict);","","        var activityRecord = geddy.model.Activity.create(activityDict);","","        // console.log(\"ACTIVITY RECORD: \");","        // console.dir(activityRecord);","","        geddy.model.Activity.save(activityRecord, ","          function (err, result){","            if(err){","              console.log(\"ERROR in Activity SAVE\");","              for (var item in err){","                console.log(item + \" : \" + err.item);","              }","              respDict.errCode = 7;","              respDict.message = \"database error\";","              callback(respDict);","            } else {","","","              respDict.errCode = 1;","              callback(respDict);","            }","          });","      }","  });  ","};","","Activity.search = function search(params, myLat, myLong, callback)","{","  /** data is of the following form","  Name: string","  time1: time","  time2: time","  flag: string startEnd, openClose, anyTime, dayTime, nightTime","  begin_date: date","  end_date: date","  low_price: int","  high_price: int","  low_num_participants: int","  high_num_participants: int","  latitude: number","  longitude: number","  **/","  var respDict = {};","  //we want to just return values based on the name if they supply a name so we shouldnt look at max/min values just matching vals or none","  if (typeof params !== 'object')","  {","    respDict.errCode = 7;","    callback(respDict);","  }","  Activity.all(params, function (err, activities)","  {","    if(err)","    {","      throw err;","    }","    if(myLat &amp;&amp; myLong &amp;&amp; (typeof myLat == 'number') &amp;&amp; (typeof myLong == 'number'))","    {","      // console.log(\"Calling geoSearchHelper\");","      geoSearchHelper(activities, myLat, myLong, function (returnRecords, count)","      {","        callback(returnRecords);","      });","    }","    else","    {","      // console.log(\"Not using geoSearchHelper\");","      callback(activities);","    }","  });","};  ","","Activity.getById = function (activityID, callback){","  if (activityID){","    geddy.model.Activity.first({id: activityID}, function (err, activityModel) {","      var responseDict = {};","      if (!err &amp;&amp; activityModel) {","        responseDict.errCode = 1;","        responseDict.activity = activityModel;","      } else {","        responseDict.errCode = 7;","        responseDict.activity = null;","      }","      callback(responseDict);","    });","  } else {","    var responseDict = {};","    responseDict.errCode = 6;","    responseDict.activity = null;","    callback(responseDict);","  }","};","","Activity.TESTAPI_resetFixture = function (callback) {","  geddy.model.Activity.all(function (err, result) {","    // console.log(\"got all activity models with error: \" + err + \" and result: \" + result);","    for (var activityModel in result){","      // console.log(\"trying to remove activityModel: \" + result[activityModel]);","      geddy.model.Activity.remove(result[activityModel].id);","    }","    var responseDict = {};","  responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};   ","","Activity = geddy.model.register('Activity', Activity);"];
}());

(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/event.js']) {
  _$jscoverage['models/event.js'] = [];
  _$jscoverage['models/event.js'][1] = 0;
  _$jscoverage['models/event.js'][5] = 0;
  _$jscoverage['models/event.js'][6] = 0;
  _$jscoverage['models/event.js'][7] = 0;
  _$jscoverage['models/event.js'][8] = 0;
  _$jscoverage['models/event.js'][10] = 0;
  _$jscoverage['models/event.js'][12] = 0;
  _$jscoverage['models/event.js'][46] = 0;
  _$jscoverage['models/event.js'][48] = 0;
  _$jscoverage['models/event.js'][50] = 0;
  _$jscoverage['models/event.js'][51] = 0;
  _$jscoverage['models/event.js'][53] = 0;
  _$jscoverage['models/event.js'][54] = 0;
  _$jscoverage['models/event.js'][55] = 0;
  _$jscoverage['models/event.js'][57] = 0;
  _$jscoverage['models/event.js'][59] = 0;
  _$jscoverage['models/event.js'][62] = 0;
  _$jscoverage['models/event.js'][63] = 0;
  _$jscoverage['models/event.js'][64] = 0;
  _$jscoverage['models/event.js'][65] = 0;
  _$jscoverage['models/event.js'][66] = 0;
  _$jscoverage['models/event.js'][67] = 0;
  _$jscoverage['models/event.js'][68] = 0;
  _$jscoverage['models/event.js'][69] = 0;
  _$jscoverage['models/event.js'][70] = 0;
  _$jscoverage['models/event.js'][71] = 0;
  _$jscoverage['models/event.js'][72] = 0;
  _$jscoverage['models/event.js'][74] = 0;
  _$jscoverage['models/event.js'][76] = 0;
  _$jscoverage['models/event.js'][77] = 0;
  _$jscoverage['models/event.js'][78] = 0;
  _$jscoverage['models/event.js'][82] = 0;
  _$jscoverage['models/event.js'][84] = 0;
  _$jscoverage['models/event.js'][86] = 0;
  _$jscoverage['models/event.js'][90] = 0;
  _$jscoverage['models/event.js'][91] = 0;
  _$jscoverage['models/event.js'][93] = 0;
  _$jscoverage['models/event.js'][95] = 0;
  _$jscoverage['models/event.js'][96] = 0;
  _$jscoverage['models/event.js'][98] = 0;
  _$jscoverage['models/event.js'][107] = 0;
  _$jscoverage['models/event.js'][112] = 0;
  _$jscoverage['models/event.js'][119] = 0;
  _$jscoverage['models/event.js'][124] = 0;
  _$jscoverage['models/event.js'][125] = 0;
  _$jscoverage['models/event.js'][126] = 0;
  _$jscoverage['models/event.js'][127] = 0;
  _$jscoverage['models/event.js'][129] = 0;
  _$jscoverage['models/event.js'][130] = 0;
  _$jscoverage['models/event.js'][131] = 0;
  _$jscoverage['models/event.js'][134] = 0;
  _$jscoverage['models/event.js'][135] = 0;
  _$jscoverage['models/event.js'][139] = 0;
  _$jscoverage['models/event.js'][141] = 0;
  _$jscoverage['models/event.js'][143] = 0;
  _$jscoverage['models/event.js'][144] = 0;
  _$jscoverage['models/event.js'][145] = 0;
  _$jscoverage['models/event.js'][149] = 0;
  _$jscoverage['models/event.js'][152] = 0;
  _$jscoverage['models/event.js'][153] = 0;
  _$jscoverage['models/event.js'][157] = 0;
  _$jscoverage['models/event.js'][171] = 0;
  _$jscoverage['models/event.js'][172] = 0;
  _$jscoverage['models/event.js'][173] = 0;
  _$jscoverage['models/event.js'][174] = 0;
  _$jscoverage['models/event.js'][177] = 0;
  _$jscoverage['models/event.js'][179] = 0;
  _$jscoverage['models/event.js'][180] = 0;
  _$jscoverage['models/event.js'][182] = 0;
  _$jscoverage['models/event.js'][184] = 0;
  _$jscoverage['models/event.js'][185] = 0;
  _$jscoverage['models/event.js'][186] = 0;
  _$jscoverage['models/event.js'][187] = 0;
  _$jscoverage['models/event.js'][188] = 0;
  _$jscoverage['models/event.js'][190] = 0;
  _$jscoverage['models/event.js'][192] = 0;
  _$jscoverage['models/event.js'][193] = 0;
  _$jscoverage['models/event.js'][194] = 0;
  _$jscoverage['models/event.js'][198] = 0;
  _$jscoverage['models/event.js'][199] = 0;
  _$jscoverage['models/event.js'][201] = 0;
  _$jscoverage['models/event.js'][208] = 0;
  _$jscoverage['models/event.js'][214] = 0;
  _$jscoverage['models/event.js'][215] = 0;
  _$jscoverage['models/event.js'][216] = 0;
  _$jscoverage['models/event.js'][217] = 0;
  _$jscoverage['models/event.js'][218] = 0;
  _$jscoverage['models/event.js'][219] = 0;
  _$jscoverage['models/event.js'][221] = 0;
  _$jscoverage['models/event.js'][222] = 0;
  _$jscoverage['models/event.js'][224] = 0;
  _$jscoverage['models/event.js'][228] = 0;
  _$jscoverage['models/event.js'][229] = 0;
  _$jscoverage['models/event.js'][231] = 0;
  _$jscoverage['models/event.js'][235] = 0;
  _$jscoverage['models/event.js'][237] = 0;
  _$jscoverage['models/event.js'][239] = 0;
  _$jscoverage['models/event.js'][241] = 0;
  _$jscoverage['models/event.js'][243] = 0;
  _$jscoverage['models/event.js'][247] = 0;
  _$jscoverage['models/event.js'][249] = 0;
  _$jscoverage['models/event.js'][250] = 0;
  _$jscoverage['models/event.js'][252] = 0;
  _$jscoverage['models/event.js'][254] = 0;
  _$jscoverage['models/event.js'][255] = 0;
  _$jscoverage['models/event.js'][256] = 0;
  _$jscoverage['models/event.js'][257] = 0;
  _$jscoverage['models/event.js'][258] = 0;
  _$jscoverage['models/event.js'][259] = 0;
  _$jscoverage['models/event.js'][272] = 0;
  _$jscoverage['models/event.js'][273] = 0;
  _$jscoverage['models/event.js'][275] = 0;
  _$jscoverage['models/event.js'][276] = 0;
  _$jscoverage['models/event.js'][278] = 0;
  _$jscoverage['models/event.js'][280] = 0;
  _$jscoverage['models/event.js'][281] = 0;
  _$jscoverage['models/event.js'][282] = 0;
  _$jscoverage['models/event.js'][286] = 0;
  _$jscoverage['models/event.js'][288] = 0;
  _$jscoverage['models/event.js'][292] = 0;
  _$jscoverage['models/event.js'][294] = 0;
  _$jscoverage['models/event.js'][295] = 0;
  _$jscoverage['models/event.js'][296] = 0;
  _$jscoverage['models/event.js'][298] = 0;
  _$jscoverage['models/event.js'][300] = 0;
  _$jscoverage['models/event.js'][301] = 0;
  _$jscoverage['models/event.js'][302] = 0;
  _$jscoverage['models/event.js'][309] = 0;
  _$jscoverage['models/event.js'][314] = 0;
  _$jscoverage['models/event.js'][317] = 0;
  _$jscoverage['models/event.js'][318] = 0;
  _$jscoverage['models/event.js'][320] = 0;
  _$jscoverage['models/event.js'][321] = 0;
  _$jscoverage['models/event.js'][322] = 0;
  _$jscoverage['models/event.js'][324] = 0;
  _$jscoverage['models/event.js'][327] = 0;
  _$jscoverage['models/event.js'][328] = 0;
  _$jscoverage['models/event.js'][329] = 0;
  _$jscoverage['models/event.js'][330] = 0;
  _$jscoverage['models/event.js'][333] = 0;
  _$jscoverage['models/event.js'][336] = 0;
  _$jscoverage['models/event.js'][337] = 0;
  _$jscoverage['models/event.js'][338] = 0;
  _$jscoverage['models/event.js'][339] = 0;
  _$jscoverage['models/event.js'][342] = 0;
  _$jscoverage['models/event.js'][345] = 0;
  _$jscoverage['models/event.js'][346] = 0;
  _$jscoverage['models/event.js'][347] = 0;
  _$jscoverage['models/event.js'][348] = 0;
  _$jscoverage['models/event.js'][352] = 0;
  _$jscoverage['models/event.js'][353] = 0;
  _$jscoverage['models/event.js'][354] = 0;
  _$jscoverage['models/event.js'][356] = 0;
  _$jscoverage['models/event.js'][357] = 0;
  _$jscoverage['models/event.js'][360] = 0;
  _$jscoverage['models/event.js'][363] = 0;
  _$jscoverage['models/event.js'][369] = 0;
  _$jscoverage['models/event.js'][371] = 0;
  _$jscoverage['models/event.js'][372] = 0;
  _$jscoverage['models/event.js'][373] = 0;
  _$jscoverage['models/event.js'][374] = 0;
  _$jscoverage['models/event.js'][375] = 0;
  _$jscoverage['models/event.js'][379] = 0;
  _$jscoverage['models/event.js'][382] = 0;
  _$jscoverage['models/event.js'][387] = 0;
  _$jscoverage['models/event.js'][388] = 0;
  _$jscoverage['models/event.js'][389] = 0;
  _$jscoverage['models/event.js'][390] = 0;
  _$jscoverage['models/event.js'][394] = 0;
  _$jscoverage['models/event.js'][397] = 0;
  _$jscoverage['models/event.js'][399] = 0;
  _$jscoverage['models/event.js'][400] = 0;
  _$jscoverage['models/event.js'][401] = 0;
  _$jscoverage['models/event.js'][402] = 0;
  _$jscoverage['models/event.js'][403] = 0;
  _$jscoverage['models/event.js'][404] = 0;
  _$jscoverage['models/event.js'][409] = 0;
  _$jscoverage['models/event.js'][414] = 0;
  _$jscoverage['models/event.js'][427] = 0;
  _$jscoverage['models/event.js'][429] = 0;
  _$jscoverage['models/event.js'][431] = 0;
  _$jscoverage['models/event.js'][432] = 0;
  _$jscoverage['models/event.js'][434] = 0;
  _$jscoverage['models/event.js'][436] = 0;
  _$jscoverage['models/event.js'][437] = 0;
  _$jscoverage['models/event.js'][438] = 0;
  _$jscoverage['models/event.js'][439] = 0;
  _$jscoverage['models/event.js'][441] = 0;
  _$jscoverage['models/event.js'][442] = 0;
  _$jscoverage['models/event.js'][443] = 0;
  _$jscoverage['models/event.js'][444] = 0;
  _$jscoverage['models/event.js'][445] = 0;
  _$jscoverage['models/event.js'][452] = 0;
  _$jscoverage['models/event.js'][454] = 0;
  _$jscoverage['models/event.js'][456] = 0;
  _$jscoverage['models/event.js'][457] = 0;
  _$jscoverage['models/event.js'][458] = 0;
  _$jscoverage['models/event.js'][461] = 0;
  _$jscoverage['models/event.js'][470] = 0;
  _$jscoverage['models/event.js'][471] = 0;
  _$jscoverage['models/event.js'][472] = 0;
  _$jscoverage['models/event.js'][473] = 0;
  _$jscoverage['models/event.js'][474] = 0;
  _$jscoverage['models/event.js'][475] = 0;
  _$jscoverage['models/event.js'][476] = 0;
  _$jscoverage['models/event.js'][477] = 0;
  _$jscoverage['models/event.js'][479] = 0;
  _$jscoverage['models/event.js'][480] = 0;
  _$jscoverage['models/event.js'][481] = 0;
  _$jscoverage['models/event.js'][484] = 0;
  _$jscoverage['models/event.js'][493] = 0;
  _$jscoverage['models/event.js'][494] = 0;
  _$jscoverage['models/event.js'][495] = 0;
  _$jscoverage['models/event.js'][496] = 0;
  _$jscoverage['models/event.js'][497] = 0;
  _$jscoverage['models/event.js'][507] = 0;
  _$jscoverage['models/event.js'][508] = 0;
  _$jscoverage['models/event.js'][509] = 0;
  _$jscoverage['models/event.js'][510] = 0;
  _$jscoverage['models/event.js'][517] = 0;
  _$jscoverage['models/event.js'][518] = 0;
  _$jscoverage['models/event.js'][520] = 0;
  _$jscoverage['models/event.js'][521] = 0;
  _$jscoverage['models/event.js'][525] = 0;
  _$jscoverage['models/event.js'][529] = 0;
  _$jscoverage['models/event.js'][530] = 0;
  _$jscoverage['models/event.js'][531] = 0;
  _$jscoverage['models/event.js'][532] = 0;
  _$jscoverage['models/event.js'][534] = 0;
  _$jscoverage['models/event.js'][535] = 0;
  _$jscoverage['models/event.js'][536] = 0;
  _$jscoverage['models/event.js'][537] = 0;
  _$jscoverage['models/event.js'][541] = 0;
  _$jscoverage['models/event.js'][542] = 0;
  _$jscoverage['models/event.js'][543] = 0;
  _$jscoverage['models/event.js'][545] = 0;
  _$jscoverage['models/event.js'][549] = 0;
  _$jscoverage['models/event.js'][552] = 0;
  _$jscoverage['models/event.js'][554] = 0;
  _$jscoverage['models/event.js'][555] = 0;
  _$jscoverage['models/event.js'][556] = 0;
  _$jscoverage['models/event.js'][557] = 0;
  _$jscoverage['models/event.js'][558] = 0;
  _$jscoverage['models/event.js'][559] = 0;
  _$jscoverage['models/event.js'][562] = 0;
  _$jscoverage['models/event.js'][563] = 0;
  _$jscoverage['models/event.js'][564] = 0;
  _$jscoverage['models/event.js'][565] = 0;
  _$jscoverage['models/event.js'][566] = 0;
  _$jscoverage['models/event.js'][567] = 0;
  _$jscoverage['models/event.js'][570] = 0;
  _$jscoverage['models/event.js'][571] = 0;
  _$jscoverage['models/event.js'][575] = 0;
  _$jscoverage['models/event.js'][576] = 0;
  _$jscoverage['models/event.js'][579] = 0;
  _$jscoverage['models/event.js'][582] = 0;
  _$jscoverage['models/event.js'][584] = 0;
  _$jscoverage['models/event.js'][587] = 0;
  _$jscoverage['models/event.js'][589] = 0;
  _$jscoverage['models/event.js'][590] = 0;
  _$jscoverage['models/event.js'][591] = 0;
  _$jscoverage['models/event.js'][592] = 0;
  _$jscoverage['models/event.js'][595] = 0;
  _$jscoverage['models/event.js'][597] = 0;
  _$jscoverage['models/event.js'][599] = 0;
  _$jscoverage['models/event.js'][600] = 0;
  _$jscoverage['models/event.js'][601] = 0;
  _$jscoverage['models/event.js'][602] = 0;
  _$jscoverage['models/event.js'][606] = 0;
  _$jscoverage['models/event.js'][607] = 0;
  _$jscoverage['models/event.js'][608] = 0;
  _$jscoverage['models/event.js'][612] = 0;
  _$jscoverage['models/event.js'][613] = 0;
  _$jscoverage['models/event.js'][614] = 0;
  _$jscoverage['models/event.js'][616] = 0;
  _$jscoverage['models/event.js'][619] = 0;
  _$jscoverage['models/event.js'][620] = 0;
  _$jscoverage['models/event.js'][621] = 0;
  _$jscoverage['models/event.js'][625] = 0;
  _$jscoverage['models/event.js'][626] = 0;
  _$jscoverage['models/event.js'][627] = 0;
  _$jscoverage['models/event.js'][632] = 0;
  _$jscoverage['models/event.js'][635] = 0;
  _$jscoverage['models/event.js'][637] = 0;
  _$jscoverage['models/event.js'][638] = 0;
  _$jscoverage['models/event.js'][639] = 0;
  _$jscoverage['models/event.js'][640] = 0;
  _$jscoverage['models/event.js'][641] = 0;
  _$jscoverage['models/event.js'][642] = 0;
  _$jscoverage['models/event.js'][647] = 0;
  _$jscoverage['models/event.js'][650] = 0;
  _$jscoverage['models/event.js'][651] = 0;
  _$jscoverage['models/event.js'][652] = 0;
  _$jscoverage['models/event.js'][653] = 0;
  _$jscoverage['models/event.js'][660] = 0;
  _$jscoverage['models/event.js'][661] = 0;
  _$jscoverage['models/event.js'][664] = 0;
  _$jscoverage['models/event.js'][665] = 0;
  _$jscoverage['models/event.js'][666] = 0;
  _$jscoverage['models/event.js'][669] = 0;
  _$jscoverage['models/event.js'][670] = 0;
  _$jscoverage['models/event.js'][673] = 0;
  _$jscoverage['models/event.js'][674] = 0;
  _$jscoverage['models/event.js'][679] = 0;
  _$jscoverage['models/event.js'][681] = 0;
  _$jscoverage['models/event.js'][682] = 0;
  _$jscoverage['models/event.js'][683] = 0;
  _$jscoverage['models/event.js'][684] = 0;
  _$jscoverage['models/event.js'][687] = 0;
  _$jscoverage['models/event.js'][689] = 0;
  _$jscoverage['models/event.js'][690] = 0;
  _$jscoverage['models/event.js'][691] = 0;
  _$jscoverage['models/event.js'][692] = 0;
  _$jscoverage['models/event.js'][697] = 0;
  _$jscoverage['models/event.js'][699] = 0;
  _$jscoverage['models/event.js'][701] = 0;
  _$jscoverage['models/event.js'][702] = 0;
  _$jscoverage['models/event.js'][703] = 0;
  _$jscoverage['models/event.js'][704] = 0;
  _$jscoverage['models/event.js'][705] = 0;
  _$jscoverage['models/event.js'][706] = 0;
  _$jscoverage['models/event.js'][709] = 0;
  _$jscoverage['models/event.js'][712] = 0;
  _$jscoverage['models/event.js'][713] = 0;
  _$jscoverage['models/event.js'][714] = 0;
  _$jscoverage['models/event.js'][718] = 0;
  _$jscoverage['models/event.js'][719] = 0;
  _$jscoverage['models/event.js'][720] = 0;
  _$jscoverage['models/event.js'][721] = 0;
  _$jscoverage['models/event.js'][728] = 0;
  _$jscoverage['models/event.js'][729] = 0;
  _$jscoverage['models/event.js'][730] = 0;
  _$jscoverage['models/event.js'][731] = 0;
  _$jscoverage['models/event.js'][732] = 0;
  _$jscoverage['models/event.js'][733] = 0;
  _$jscoverage['models/event.js'][736] = 0;
  _$jscoverage['models/event.js'][737] = 0;
  _$jscoverage['models/event.js'][739] = 0;
  _$jscoverage['models/event.js'][740] = 0;
  _$jscoverage['models/event.js'][741] = 0;
  _$jscoverage['models/event.js'][742] = 0;
  _$jscoverage['models/event.js'][743] = 0;
  _$jscoverage['models/event.js'][744] = 0;
  _$jscoverage['models/event.js'][745] = 0;
  _$jscoverage['models/event.js'][746] = 0;
  _$jscoverage['models/event.js'][747] = 0;
  _$jscoverage['models/event.js'][748] = 0;
  _$jscoverage['models/event.js'][749] = 0;
  _$jscoverage['models/event.js'][750] = 0;
  _$jscoverage['models/event.js'][751] = 0;
  _$jscoverage['models/event.js'][752] = 0;
  _$jscoverage['models/event.js'][755] = 0;
  _$jscoverage['models/event.js'][757] = 0;
  _$jscoverage['models/event.js'][758] = 0;
  _$jscoverage['models/event.js'][759] = 0;
  _$jscoverage['models/event.js'][764] = 0;
  _$jscoverage['models/event.js'][771] = 0;
  _$jscoverage['models/event.js'][772] = 0;
  _$jscoverage['models/event.js'][773] = 0;
  _$jscoverage['models/event.js'][774] = 0;
  _$jscoverage['models/event.js'][775] = 0;
  _$jscoverage['models/event.js'][791] = 0;
  _$jscoverage['models/event.js'][792] = 0;
  _$jscoverage['models/event.js'][794] = 0;
  _$jscoverage['models/event.js'][796] = 0;
  _$jscoverage['models/event.js'][798] = 0;
  _$jscoverage['models/event.js'][799] = 0;
  _$jscoverage['models/event.js'][800] = 0;
  _$jscoverage['models/event.js'][804] = 0;
}
_$jscoverage['models/event.js'][1]++;
var nodemailer = require("nodemailer"), check = require("validator").check, blade = require("blade");
_$jscoverage['models/event.js'][5]++;
var incorrectParams = {errCode: 6};
_$jscoverage['models/event.js'][6]++;
var backendError = {errCode: 7};
_$jscoverage['models/event.js'][7]++;
var badTimes = {errCode: 8};
_$jscoverage['models/event.js'][8]++;
var badTableJoin = {errCode: 9};
_$jscoverage['models/event.js'][10]++;
var Event = (function () {
  _$jscoverage['models/event.js'][12]++;
  this.defineProperties({name: {type: "string", required: true}, description: {type: "string"}, time1: {type: "number"}, time2: {type: "number"}, begindate: {type: "number"}, enddate: {type: "number"}, activityid: {type: "string"}, attendingusers: {type: "string"}});
});
_$jscoverage['models/event.js'][46]++;
Event.add = (function (params, callback) {
  _$jscoverage['models/event.js'][48]++;
  if (params.name && params.begindate && params.enddate && params.time1 && params.time2 && params.activityid && params.attendingusers) {
    _$jscoverage['models/event.js'][50]++;
    var idsOrEmails = params.attendingusers.split(",");
    _$jscoverage['models/event.js'][51]++;
    getEmailAndId(idsOrEmails, callback, (function (emailAndId) {
  _$jscoverage['models/event.js'][53]++;
  var emails = emailAndId.email;
  _$jscoverage['models/event.js'][54]++;
  var userIds = emailAndId.id;
  _$jscoverage['models/event.js'][55]++;
  geddy.model.Activity.first({id: params.activityid}, (function (err, activityRecord) {
  _$jscoverage['models/event.js'][57]++;
  if (activityRecord && activityRecord.name) {
    _$jscoverage['models/event.js'][59]++;
    if (params.begindate <= params.enddate && params.time1 <= params.time2) {
      _$jscoverage['models/event.js'][62]++;
      eventDict = {};
      _$jscoverage['models/event.js'][63]++;
      eventDict.name = params.name;
      _$jscoverage['models/event.js'][64]++;
      eventDict.begindate = params.begindate;
      _$jscoverage['models/event.js'][65]++;
      eventDict.enddate = params.enddate;
      _$jscoverage['models/event.js'][66]++;
      eventDict.time1 = params.time1;
      _$jscoverage['models/event.js'][67]++;
      eventDict.time2 = params.time2;
      _$jscoverage['models/event.js'][68]++;
      eventDict.description = params.description;
      _$jscoverage['models/event.js'][69]++;
      eventDict.activityid = params.activityid;
      _$jscoverage['models/event.js'][70]++;
      eventDict.attendingusers = userIds.toString();
      _$jscoverage['models/event.js'][71]++;
      var eventRecord = geddy.model.Event.create(eventDict);
      _$jscoverage['models/event.js'][72]++;
      geddy.model.Event.save(eventRecord, (function (err, eventModel) {
  _$jscoverage['models/event.js'][74]++;
  if (err) {
    _$jscoverage['models/event.js'][76]++;
    console.log("error in event.save in Event.add");
    _$jscoverage['models/event.js'][77]++;
    console.dir(err);
    _$jscoverage['models/event.js'][78]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][82]++;
    addEventToUsers(eventModel.id, userIds, (function (respDict) {
  _$jscoverage['models/event.js'][84]++;
  if (params.noemail) {
    _$jscoverage['models/event.js'][86]++;
    callback(respDict);
  }
  else {
    _$jscoverage['models/event.js'][90]++;
    var inviter = "Somebody";
    _$jscoverage['models/event.js'][91]++;
    if (params.inviter) {
      _$jscoverage['models/event.js'][93]++;
      inviter = params.inviter;
    }
    _$jscoverage['models/event.js'][95]++;
    var message = inviter + " wants you to join the following event: " + params.name + " if you haven't signed up with Group Activity Planner check it out!";
    _$jscoverage['models/event.js'][96]++;
    Event.invite({eventid: eventModel.id, emails: emails, message: message}, (function () {
  _$jscoverage['models/event.js'][98]++;
  callback(respDict);
}));
  }
}));
  }
}));
    }
    else {
      _$jscoverage['models/event.js'][107]++;
      callback(badTimes);
    }
  }
  else {
    _$jscoverage['models/event.js'][112]++;
    callback(badTableJoin);
  }
}));
}));
  }
  else {
    _$jscoverage['models/event.js'][119]++;
    callback(incorrectParams);
  }
});
_$jscoverage['models/event.js'][124]++;
function getEmailAndId(usernamesOrEmails, errorCallback, successCallback) {
  _$jscoverage['models/event.js'][125]++;
  emails = [];
  _$jscoverage['models/event.js'][126]++;
  userIds = [];
  _$jscoverage['models/event.js'][127]++;
  for (var key in usernamesOrEmails) {
    _$jscoverage['models/event.js'][129]++;
    var id = usernamesOrEmails[key];
    _$jscoverage['models/event.js'][130]++;
    console.log(id);
    _$jscoverage['models/event.js'][131]++;
    if (id.indexOf("@") >= 0) {
      _$jscoverage['models/event.js'][134]++;
      emails.push(id);
      _$jscoverage['models/event.js'][135]++;
      continue;
    }
    else {
      _$jscoverage['models/event.js'][139]++;
      geddy.model.User.first({username: id}, (function (err, record) {
  _$jscoverage['models/event.js'][141]++;
  if (err) {
    _$jscoverage['models/event.js'][143]++;
    console.log("error in user.first in Event.add");
    _$jscoverage['models/event.js'][144]++;
    console.dir(err);
    _$jscoverage['models/event.js'][145]++;
    errorCallback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][149]++;
    if (record && record.email && record.username) {
      _$jscoverage['models/event.js'][152]++;
      emails.push(record.email);
      _$jscoverage['models/event.js'][153]++;
      userIds.push(record.username);
    }
    else {
      _$jscoverage['models/event.js'][157]++;
      errorCallback(badTableJoin);
    }
  }
}));
    }
}
  _$jscoverage['models/event.js'][171]++;
  result = {};
  _$jscoverage['models/event.js'][172]++;
  result.email = emails;
  _$jscoverage['models/event.js'][173]++;
  result.id = userIds;
  _$jscoverage['models/event.js'][174]++;
  successCallback(result);
}
_$jscoverage['models/event.js'][177]++;
Event.addUsersToEvent = (function (eventid, usernames, callback) {
  _$jscoverage['models/event.js'][179]++;
  usernames = usernames.split(",");
  _$jscoverage['models/event.js'][180]++;
  geddy.model.Event.first({id: eventid}, (function (err, eventRecord) {
  _$jscoverage['models/event.js'][182]++;
  if (eventRecord && eventRecord.attendingusers) {
    _$jscoverage['models/event.js'][184]++;
    var data = eventRecord.attendingusers.split(",").concat(usernames);
    _$jscoverage['models/event.js'][185]++;
    var newUids = data.id;
    _$jscoverage['models/event.js'][186]++;
    newUids = validateUserIds(newUids, eventid);
    _$jscoverage['models/event.js'][187]++;
    eventRecord.attendingusers = newUids.toString();
    _$jscoverage['models/event.js'][188]++;
    geddy.model.Event.save(eventRecord, (function (err, result) {
  _$jscoverage['models/event.js'][190]++;
  if (err) {
    _$jscoverage['models/event.js'][192]++;
    console.log("error in event.save in Event.addUsersToEvent");
    _$jscoverage['models/event.js'][193]++;
    console.dir(err);
    _$jscoverage['models/event.js'][194]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][198]++;
    var message = "You are cordially invited to join the following event: " + eventRecord.name + " login or signup at Group Activity Planner for more details!";
    _$jscoverage['models/event.js'][199]++;
    Event.invite({eventid: eventid, emails: data.email, message: message}, (function (respDict) {
  _$jscoverage['models/event.js'][201]++;
  callback({errCode: 1});
}));
  }
}));
  }
  else {
    _$jscoverage['models/event.js'][208]++;
    callback(badTableJoin);
  }
}));
});
_$jscoverage['models/event.js'][214]++;
function validateUserIds(idArray, eventid) {
  _$jscoverage['models/event.js'][215]++;
  toReturn = {};
  _$jscoverage['models/event.js'][216]++;
  idHash = {};
  _$jscoverage['models/event.js'][217]++;
  idReturn = [];
  _$jscoverage['models/event.js'][218]++;
  emailReturn = [];
  _$jscoverage['models/event.js'][219]++;
  for (var key in idArray) {
    _$jscoverage['models/event.js'][221]++;
    var id = idArray[key];
    _$jscoverage['models/event.js'][222]++;
    if (idHash[id]) {
      _$jscoverage['models/event.js'][224]++;
      continue;
    }
    else {
      _$jscoverage['models/event.js'][228]++;
      idHash[id] = true;
      _$jscoverage['models/event.js'][229]++;
      if (id.indexOf("@") >= 0) {
        _$jscoverage['models/event.js'][231]++;
        emailReturn.push(id);
      }
      else {
        _$jscoverage['models/event.js'][235]++;
        geddy.model.User.first({username: id}, (function (err, userRecord) {
  _$jscoverage['models/event.js'][237]++;
  if (userRecord && userRecord.username) {
    _$jscoverage['models/event.js'][239]++;
    if (! userRecord.myevents || (userRecord.myevents.search(eventid) < 0)) {
      _$jscoverage['models/event.js'][241]++;
      if (userRecord.myevents) {
        _$jscoverage['models/event.js'][243]++;
        userRecord.myevents += "," + eventid;
      }
      else {
        _$jscoverage['models/event.js'][247]++;
        userRecord.myevents = eventid;
      }
      _$jscoverage['models/event.js'][249]++;
      userRecord.confirmPassword = userRecord.password;
      _$jscoverage['models/event.js'][250]++;
      geddy.model.User.save(userRecord, (function (err, result) {
  _$jscoverage['models/event.js'][252]++;
  if (! err) {
    _$jscoverage['models/event.js'][254]++;
    emailReturn.push(userRecord.email);
    _$jscoverage['models/event.js'][255]++;
    idReturn.push(userRecord.username);
    _$jscoverage['models/event.js'][256]++;
    if (idReturn.length >= idArray.length - 1) {
      _$jscoverage['models/event.js'][257]++;
      toReturn.id = idReturn;
      _$jscoverage['models/event.js'][258]++;
      toReturn.email = emailReturn;
      _$jscoverage['models/event.js'][259]++;
      return toReturn;
    }
  }
}));
    }
  }
}));
      }
    }
}
}
_$jscoverage['models/event.js'][272]++;
function addEventToUsers(eventid, userIds, callback) {
  _$jscoverage['models/event.js'][273]++;
  for (var key in userIds) {
    _$jscoverage['models/event.js'][275]++;
    var uid = userIds[key];
    _$jscoverage['models/event.js'][276]++;
    geddy.model.User.first({username: uid}, (function (err, record) {
  _$jscoverage['models/event.js'][278]++;
  if (err) {
    _$jscoverage['models/event.js'][280]++;
    console.log("error in user.first in Event.addEventToUsers");
    _$jscoverage['models/event.js'][281]++;
    console.dir(err);
    _$jscoverage['models/event.js'][282]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][286]++;
    if (record && record.myevents) {
      _$jscoverage['models/event.js'][288]++;
      record.myevents += "," + eventid;
    }
    else {
      _$jscoverage['models/event.js'][292]++;
      record.myevents = eventid;
    }
    _$jscoverage['models/event.js'][294]++;
    record.confirmPassword = record.password;
    _$jscoverage['models/event.js'][295]++;
    record.errors = null;
    _$jscoverage['models/event.js'][296]++;
    geddy.model.User.save(record, (function (err, result) {
  _$jscoverage['models/event.js'][298]++;
  if (err) {
    _$jscoverage['models/event.js'][300]++;
    console.log("error in event.save in Event.addEventToUsers");
    _$jscoverage['models/event.js'][301]++;
    console.dir(err);
    _$jscoverage['models/event.js'][302]++;
    callback(backendError);
  }
}));
  }
}));
}
  _$jscoverage['models/event.js'][309]++;
  callback({errCode: 1});
}
_$jscoverage['models/event.js'][314]++;
Event.invite = (function (params, callback) {
  _$jscoverage['models/event.js'][317]++;
  var self = this;
  _$jscoverage['models/event.js'][318]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][320]++;
  var eventID = params.eventid;
  _$jscoverage['models/event.js'][321]++;
  var emailList = params.emails;
  _$jscoverage['models/event.js'][322]++;
  var message = params.message;
  _$jscoverage['models/event.js'][324]++;
  if (eventID === null || eventID === undefined) {
    _$jscoverage['models/event.js'][327]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][328]++;
    responseDict.message = "null eventid";
    _$jscoverage['models/event.js'][329]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][330]++;
    return;
  }
  _$jscoverage['models/event.js'][333]++;
  if (emailList === null || emailList === undefined || emailList === []) {
    _$jscoverage['models/event.js'][336]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][337]++;
    responseDict.message = "null emails";
    _$jscoverage['models/event.js'][338]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][339]++;
    return;
  }
  _$jscoverage['models/event.js'][342]++;
  if (message === null || message === undefined) {
    _$jscoverage['models/event.js'][345]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][346]++;
    responseDict.message = "null message";
    _$jscoverage['models/event.js'][347]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][348]++;
    return;
  }
  _$jscoverage['models/event.js'][352]++;
  var badEmails = [];
  _$jscoverage['models/event.js'][353]++;
  var goodEmailsString = "";
  _$jscoverage['models/event.js'][354]++;
  for (var index in emailList) {
    _$jscoverage['models/event.js'][356]++;
    var emailAddr = emailList[index];
    _$jscoverage['models/event.js'][357]++;
    if (! isValidEmail(emailAddr)) {
      _$jscoverage['models/event.js'][360]++;
      badEmails.push(emailAddr);
    }
    else {
      _$jscoverage['models/event.js'][363]++;
      goodEmailsString += emailAddr + ", ";
    }
}
  _$jscoverage['models/event.js'][369]++;
  if (badEmails.length > 0) {
    _$jscoverage['models/event.js'][371]++;
    responseDict.errCode = 12;
    _$jscoverage['models/event.js'][372]++;
    responseDict.message = "malformed emails";
    _$jscoverage['models/event.js'][373]++;
    responseDict.bademails = badEmails;
    _$jscoverage['models/event.js'][374]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][375]++;
    return;
  }
  _$jscoverage['models/event.js'][379]++;
  if (goodEmailsString.length > 2) {
    _$jscoverage['models/event.js'][382]++;
    goodEmailsString = goodEmailsString.substring(0, goodEmailsString.length - 2);
  }
  else {
    _$jscoverage['models/event.js'][387]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][388]++;
    responseDict.message = "null emails";
    _$jscoverage['models/event.js'][389]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][390]++;
    return;
  }
  _$jscoverage['models/event.js'][394]++;
  geddy.model.Event.first({id: eventID}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][397]++;
  if (err) {
    _$jscoverage['models/event.js'][399]++;
    console.log("err");
    _$jscoverage['models/event.js'][400]++;
    console.dir(err);
    _$jscoverage['models/event.js'][401]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][402]++;
    responseDict.message = "database error";
    _$jscoverage['models/event.js'][403]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][404]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][409]++;
    if (eventModel) {
      _$jscoverage['models/event.js'][414]++;
      var smtpTransport = nodemailer.createTransport("SMTP", {service: "Gmail", auth: {user: "groupactivityplanner.gap@gmail.com", pass: "gapgapgap"}});
      _$jscoverage['models/event.js'][427]++;
      blade.compileFile("app/helpers/templates/bladeEmailTemplate.blade", (function (err, tmpl) {
  _$jscoverage['models/event.js'][429]++;
  if (! err && tmpl) {
    _$jscoverage['models/event.js'][431]++;
    geddy.model.Activity.first({id: eventModel.activityid}, (function (err, activityModel) {
  _$jscoverage['models/event.js'][432]++;
  if (activityModel) {
    _$jscoverage['models/event.js'][434]++;
    reverseGeocodeAddressForActivity(activityModel, (function (address) {
  _$jscoverage['models/event.js'][436]++;
  var time1 = convertMsToString(eventModel.time1);
  _$jscoverage['models/event.js'][437]++;
  var time2 = convertMsToString(eventModel.time2);
  _$jscoverage['models/event.js'][438]++;
  eventModel.time1 = time1;
  _$jscoverage['models/event.js'][439]++;
  eventModel.time2 = time2;
  _$jscoverage['models/event.js'][441]++;
  var beginDate = new Date(eventModel.begindate);
  _$jscoverage['models/event.js'][442]++;
  var endDate = new Date(eventModel.enddate);
  _$jscoverage['models/event.js'][443]++;
  eventModel.begindate = beginDate.toDateString();
  _$jscoverage['models/event.js'][444]++;
  eventModel.enddate = endDate.toDateString();
  _$jscoverage['models/event.js'][445]++;
  var templateVars = {event: eventModel, activity: activityModel, message: message, location: address};
  _$jscoverage['models/event.js'][452]++;
  var templateHTML = tmpl(templateVars, (function (err, html) {
  _$jscoverage['models/event.js'][454]++;
  if (err) {
    _$jscoverage['models/event.js'][454]++;
    throw err;
  }
  _$jscoverage['models/event.js'][456]++;
  var templateHTML = null;
  _$jscoverage['models/event.js'][457]++;
  if (html) {
    _$jscoverage['models/event.js'][458]++;
    templateHTML = html;
  }
  _$jscoverage['models/event.js'][461]++;
  var mailOptions = {from: "Group Activity Planner \u00e2\u009c\u0094 <groupactivityplanner@gmail.com>", to: goodEmailsString, subject: "You have been invited to an event!", text: null, html: templateHTML};
  _$jscoverage['models/event.js'][470]++;
  smtpTransport.sendMail(mailOptions, (function (error, response) {
  _$jscoverage['models/event.js'][471]++;
  if (error) {
    _$jscoverage['models/event.js'][472]++;
    console.log("error");
    _$jscoverage['models/event.js'][473]++;
    console.dir(error);
    _$jscoverage['models/event.js'][474]++;
    responseDict.errCode = 13;
    _$jscoverage['models/event.js'][475]++;
    responseDict.message = "email failed";
    _$jscoverage['models/event.js'][476]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][477]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][479]++;
    responseDict.errCode = 1;
    _$jscoverage['models/event.js'][480]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][481]++;
    return;
  }
  _$jscoverage['models/event.js'][484]++;
  smtpTransport.close();
}));
}));
}));
  }
}));
  }
  else {
    _$jscoverage['models/event.js'][493]++;
    console.log("err =");
    _$jscoverage['models/event.js'][494]++;
    console.dir(err);
    _$jscoverage['models/event.js'][495]++;
    responseDict.errCode = 13;
    _$jscoverage['models/event.js'][496]++;
    responseDict.message = "email failed";
    _$jscoverage['models/event.js'][497]++;
    callback(responseDict);
  }
}));
    }
    else {
      _$jscoverage['models/event.js'][507]++;
      responseDict.errCode = 10;
      _$jscoverage['models/event.js'][508]++;
      responseDict.message = "invalid eventid";
      _$jscoverage['models/event.js'][509]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][510]++;
      return;
    }
  }
}));
});
_$jscoverage['models/event.js'][517]++;
function isValidEmail(email) {
  _$jscoverage['models/event.js'][518]++;
  try {
    _$jscoverage['models/event.js'][520]++;
    check(email).isEmail();
    _$jscoverage['models/event.js'][521]++;
    return true;
  }
  catch (error) {
    _$jscoverage['models/event.js'][525]++;
    return false;
  }
}
_$jscoverage['models/event.js'][529]++;
function reverseGeocodeAddressForActivity(activityModel, callback) {
  _$jscoverage['models/event.js'][530]++;
  if (activityModel.latitude && activityModel.longitude) {
    _$jscoverage['models/event.js'][531]++;
    var gm = require("googlemaps");
    _$jscoverage['models/event.js'][532]++;
    var util = require("util");
    _$jscoverage['models/event.js'][534]++;
    var latLong = activityModel.latitude + "," + activityModel.longitude;
    _$jscoverage['models/event.js'][535]++;
    gm.reverseGeocode(latLong, (function (err, data) {
  _$jscoverage['models/event.js'][536]++;
  if (err) {
    _$jscoverage['models/event.js'][537]++;
    callback(null);
  }
  else {
    _$jscoverage['models/event.js'][541]++;
    var address = "";
    _$jscoverage['models/event.js'][542]++;
    if (data.status == "OK") {
      _$jscoverage['models/event.js'][543]++;
      address = data.results[0].formatted_address;
    }
    _$jscoverage['models/event.js'][545]++;
    callback(address);
  }
}));
  }
  else {
    _$jscoverage['models/event.js'][549]++;
    callback(null);
  }
}
_$jscoverage['models/event.js'][552]++;
function convertMsToString(time) {
  _$jscoverage['models/event.js'][554]++;
  var d = new Date(0, 0, 0, 0, 0, 0, time);
  _$jscoverage['models/event.js'][555]++;
  var hours = d.getHours();
  _$jscoverage['models/event.js'][556]++;
  var hoursStr = hours.toString();
  _$jscoverage['models/event.js'][557]++;
  var minutes = d.getMinutes();
  _$jscoverage['models/event.js'][558]++;
  var minutesStr = minutes.toString();
  _$jscoverage['models/event.js'][559]++;
  var am_pm = "AM";
  _$jscoverage['models/event.js'][562]++;
  if (hours === 12) {
    _$jscoverage['models/event.js'][563]++;
    am_pm = "PM";
  }
  else {
    _$jscoverage['models/event.js'][564]++;
    if (hours > 12) {
      _$jscoverage['models/event.js'][565]++;
      hours = hours % 12;
      _$jscoverage['models/event.js'][566]++;
      am_pm = "PM";
      _$jscoverage['models/event.js'][567]++;
      hoursStr = hours.toString();
    }
  }
  _$jscoverage['models/event.js'][570]++;
  if (minutes < 10) {
    _$jscoverage['models/event.js'][571]++;
    minutesStr = "0" + minutesStr;
  }
  _$jscoverage['models/event.js'][575]++;
  var dateString = hoursStr + ":" + minutesStr + am_pm;
  _$jscoverage['models/event.js'][576]++;
  return dateString;
}
_$jscoverage['models/event.js'][579]++;
Event.changeDateTime = (function (params, callback) {
  _$jscoverage['models/event.js'][582]++;
  var self = this;
  _$jscoverage['models/event.js'][584]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][587]++;
  if (! params.eventid) {
    _$jscoverage['models/event.js'][589]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][590]++;
    responseDict.message = "null eventid";
    _$jscoverage['models/event.js'][591]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][592]++;
    return;
  }
  _$jscoverage['models/event.js'][595]++;
  var eventID = params.eventid;
  _$jscoverage['models/event.js'][597]++;
  if (! params.time1 && ! params.time2 && ! params.begindate && ! params.enddate) {
    _$jscoverage['models/event.js'][599]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][600]++;
    responseDict.message = "all date/time parameters are null";
    _$jscoverage['models/event.js'][601]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][602]++;
    return;
  }
  _$jscoverage['models/event.js'][606]++;
  var newTime1;
  _$jscoverage['models/event.js'][607]++;
  if (params.time1) {
    _$jscoverage['models/event.js'][608]++;
    newTime1 = parseFloat(params.time1);
  }
  _$jscoverage['models/event.js'][612]++;
  var newTime2;
  _$jscoverage['models/event.js'][613]++;
  if (params.time2) {
    _$jscoverage['models/event.js'][614]++;
    newTime2 = parseFloat(params.time2);
  }
  _$jscoverage['models/event.js'][616]++;
  console.log("NEW TIME 2 = " + newTime2);
  _$jscoverage['models/event.js'][619]++;
  var newBeginDate;
  _$jscoverage['models/event.js'][620]++;
  if (params.begindate) {
    _$jscoverage['models/event.js'][621]++;
    newBeginDate = parseFloat(params.begindate);
  }
  _$jscoverage['models/event.js'][625]++;
  var newEndDate;
  _$jscoverage['models/event.js'][626]++;
  if (params.enddate) {
    _$jscoverage['models/event.js'][627]++;
    newEndDate = parseFloat(params.enddate);
  }
  _$jscoverage['models/event.js'][632]++;
  geddy.model.Event.first({id: eventID}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][635]++;
  if (err) {
    _$jscoverage['models/event.js'][637]++;
    console.log("err change date time");
    _$jscoverage['models/event.js'][638]++;
    console.dir(err);
    _$jscoverage['models/event.js'][639]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][640]++;
    responseDict.message = "database error";
    _$jscoverage['models/event.js'][641]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][642]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][647]++;
    if (! eventModel) {
      _$jscoverage['models/event.js'][650]++;
      responseDict.errCode = 10;
      _$jscoverage['models/event.js'][651]++;
      responseDict.message = "invalid eventid";
      _$jscoverage['models/event.js'][652]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][653]++;
      return;
    }
    else {
      _$jscoverage['models/event.js'][660]++;
      if ((typeof newTime1) == "number") {
        _$jscoverage['models/event.js'][661]++;
        eventModel.time1 = newTime1;
      }
      _$jscoverage['models/event.js'][664]++;
      if ((typeof newTime2) == "number") {
        _$jscoverage['models/event.js'][665]++;
        eventModel.time2 = newTime2;
        _$jscoverage['models/event.js'][666]++;
        console.log("CHANGED TIME 2");
      }
      _$jscoverage['models/event.js'][669]++;
      if ((typeof newBeginDate) == "number") {
        _$jscoverage['models/event.js'][670]++;
        eventModel.begindate = newBeginDate;
      }
      _$jscoverage['models/event.js'][673]++;
      if ((typeof newEndDate) == "number") {
        _$jscoverage['models/event.js'][674]++;
        eventModel.enddate = newEndDate;
      }
    }
    _$jscoverage['models/event.js'][679]++;
    if (eventModel.time1 >= eventModel.time2) {
      _$jscoverage['models/event.js'][681]++;
      responseDict.errCode = 11;
      _$jscoverage['models/event.js'][682]++;
      responseDict.message = "invalid times";
      _$jscoverage['models/event.js'][683]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][684]++;
      return;
    }
    _$jscoverage['models/event.js'][687]++;
    if (eventModel.begindate >= eventModel.enddate) {
      _$jscoverage['models/event.js'][689]++;
      responseDict.errCode = 11;
      _$jscoverage['models/event.js'][690]++;
      responseDict.message = "invalid dates";
      _$jscoverage['models/event.js'][691]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][692]++;
      return;
    }
    _$jscoverage['models/event.js'][697]++;
    geddy.model.Event.save(eventModel, (function (err, result) {
  _$jscoverage['models/event.js'][699]++;
  if (err) {
    _$jscoverage['models/event.js'][701]++;
    console.log("error in Event.save in changeDateTime");
    _$jscoverage['models/event.js'][702]++;
    console.dir(err);
    _$jscoverage['models/event.js'][703]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][704]++;
    responseDict.message = "database error";
    _$jscoverage['models/event.js'][705]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][706]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][709]++;
    if (result) {
      _$jscoverage['models/event.js'][712]++;
      responseDict.errCode = 1;
      _$jscoverage['models/event.js'][713]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][714]++;
      return;
    }
    else {
      _$jscoverage['models/event.js'][718]++;
      responseDict.errCode = 7;
      _$jscoverage['models/event.js'][719]++;
      responseDict.message = "database error";
      _$jscoverage['models/event.js'][720]++;
      callback(responseDict);
      _$jscoverage['models/event.js'][721]++;
      return;
    }
  }
}));
  }
}));
});
_$jscoverage['models/event.js'][728]++;
Event.getMyEvents = (function (params, callback) {
  _$jscoverage['models/event.js'][729]++;
  geddy.model.User.first({id: params.userId}, (function (err, userModel) {
  _$jscoverage['models/event.js'][730]++;
  if (err) {
    _$jscoverage['models/event.js'][731]++;
    console.log("error in getMyEvents");
    _$jscoverage['models/event.js'][732]++;
    console.dir(err);
    _$jscoverage['models/event.js'][733]++;
    responseDict.events = [];
    _$jscoverage['models/event.js'][736]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][737]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/event.js'][739]++;
    if (userModel) {
      _$jscoverage['models/event.js'][740]++;
      var myEvents = [];
      _$jscoverage['models/event.js'][741]++;
      if (userModel.myevents) {
        _$jscoverage['models/event.js'][742]++;
        var eventIds = userModel.myevents.split(",");
        _$jscoverage['models/event.js'][743]++;
        for (var index in eventIds) {
          _$jscoverage['models/event.js'][744]++;
          var eventId = eventIds[index];
          _$jscoverage['models/event.js'][745]++;
          geddy.model.Event.first({id: eventId}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][746]++;
  if (err) {
    _$jscoverage['models/event.js'][747]++;
    console.log("error in event.first in getMyEvents");
    _$jscoverage['models/event.js'][748]++;
    console.dir(err);
    _$jscoverage['models/event.js'][749]++;
    responseDict.events = [];
    _$jscoverage['models/event.js'][750]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][751]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/event.js'][752]++;
    if (eventModel) {
      _$jscoverage['models/event.js'][755]++;
      myEvents.push(eventModel);
    }
  }
  _$jscoverage['models/event.js'][757]++;
  if (myEvents.length == eventIds.length) {
    _$jscoverage['models/event.js'][758]++;
    console.log("index = " + index);
    _$jscoverage['models/event.js'][759]++;
    getEventsCallback(1, myEvents, callback);
  }
}));
}
      }
      else {
        _$jscoverage['models/event.js'][764]++;
        getEventsCallback(1, myEvents, callback);
      }
    }
  }
}));
});
_$jscoverage['models/event.js'][771]++;
function getEventsCallback(errCode, events, callback) {
  _$jscoverage['models/event.js'][772]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][773]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][774]++;
  responseDict.events = events;
  _$jscoverage['models/event.js'][775]++;
  callback(responseDict);
}
_$jscoverage['models/event.js'][791]++;
Event.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/event.js'][792]++;
  geddy.model.Event.all((function (err, result) {
  _$jscoverage['models/event.js'][794]++;
  for (var eventModel in result) {
    _$jscoverage['models/event.js'][796]++;
    geddy.model.Event.remove(result[eventModel].id);
}
  _$jscoverage['models/event.js'][798]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][799]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][800]++;
  callback(responseDict);
}));
});
_$jscoverage['models/event.js'][804]++;
Event = geddy.model.register("Event", Event);
_$jscoverage['models/event.js'].source = ["var nodemailer = require(\"nodemailer\")","  , check = require(\"validator\").check","  , blade = require(\"blade\");","","var incorrectParams = {errCode: 6};","var backendError = {errCode: 7};","var badTimes = {errCode: 8};","var badTableJoin = {errCode: 9};","","var Event = function () {","","  this.defineProperties({","    name: {type: 'string', required: true},","    description: {type: 'string'},","    time1: {type: 'number'},","    time2: {type: 'number'},","    begindate: {type: 'number'},","    enddate: {type: 'number'},","    activityid: {type: 'string'},","    attendingusers: {type: 'string'}","  });","","  /*","  this.property('login', 'string', {required: true});","  this.property('password', 'string', {required: true});","  this.property('lastName', 'string');","  this.property('firstName', 'string');","","  this.validatesPresent('login');","  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});","  this.validatesLength('login', {min: 3});","  // Use with the name of the other parameter to compare with","  this.validatesConfirmed('password', 'confirmPassword');","  // Use with any function that returns a Boolean","  this.validatesWithFunction('password', function (s) {","      return s.length &gt; 0;","  });","","  // Can define methods for instances like this","  this.someMethod = function () {","    // Do some stuff","  };","  */","};","","Event.add = function(params, callback)","{","  if(params.name &amp;&amp; params.begindate &amp;&amp; params.enddate &amp;&amp; params.time1  &amp;&amp; params.time2 &amp;&amp; params.activityid &amp;&amp; params.attendingusers)","  {","    var idsOrEmails = params.attendingusers.split(',');","    getEmailAndId(idsOrEmails, callback, function(emailAndId)","    {","      var emails = emailAndId.email;","      var userIds = emailAndId.id;","      geddy.model.Activity.first({id: params.activityid}, function(err, activityRecord)","      {","        if(activityRecord &amp;&amp; activityRecord.name) //basic assertion that record exists","        {","          if(params.begindate &lt;= params.enddate &amp;&amp; params.time1 &lt;= params.time2)","          {","            //all required fields are valid","            eventDict = {};","            eventDict.name = params.name;","            eventDict.begindate = params.begindate;","            eventDict.enddate = params.enddate;","            eventDict.time1 = params.time1;","            eventDict.time2 = params.time2;","            eventDict.description = params.description;","            eventDict.activityid = params.activityid;","            eventDict.attendingusers = userIds.toString();","            var eventRecord = geddy.model.Event.create(eventDict);","            geddy.model.Event.save(eventRecord, function(err, eventModel)","            {","              if(err)","              {","                console.log(\"error in event.save in Event.add\");","                console.dir(err);","                callback(backendError);","              }","              else","              {","                addEventToUsers(eventModel.id, userIds, function(respDict)","                {","                  if(params.noemail)","                  {","                    callback(respDict);","                  }","                  else","                  {","                    var inviter = \"Somebody\";","                    if(params.inviter)","                    {","                      inviter = params.inviter;","                    }","                    var message = inviter+\" wants you to join the following event: \" + params.name + \" if you haven't signed up with Group Activity Planner check it out!\";","                    Event.invite({eventid: eventModel.id, emails: emails , message: message}, function()","                    {","                      callback(respDict);","                    });","                  }","                });","              }","            });","          }","          else","          {","            callback(badTimes);","          }","        }","        else","        {","          callback(badTableJoin);","        }","      });","    });","  }","  else","  {","    callback(incorrectParams);","  }","};","","function getEmailAndId(usernamesOrEmails, errorCallback, successCallback)","{","  emails = [];","  userIds = [];","  for(var key in usernamesOrEmails)","  {","    var id = usernamesOrEmails[key];","    console.log(id);","    if(id.indexOf('@') &gt;= 0) //special characters cant be in usernames only in emails","    {","      //console.log('EMAIL found is: '+name);","      emails.push(id);","      continue;","    }","    else","    {","      geddy.model.User.first({username: id}, function(err, record)","      {","          if(err)","          {","            console.log(\"error in user.first in Event.add\");","            console.dir(err);","            errorCallback(backendError);","          }","          else","          {","            if(record &amp;&amp; record.email &amp;&amp; record.username)","            {","              //console.log('EMAIL found is: '+record.email);","              emails.push(record.email);","              userIds.push(record.username);","            }","            else","            {","              errorCallback(badTableJoin);","            }","          }","        });","      }","    }","    // while(usernamesOrEmails.length != emails.length + userIds.length)","    // {","    //   console.log('waiting');","    //   console.log(usernamesOrEmails);","    //   console.log(emails);","    //   console.log(userIds);","    //   continue;","    // }","    result = {};","    result.email = emails;","    result.id = userIds;","    successCallback(result);","}","","Event.addUsersToEvent = function(eventid, usernames, callback)","{","  usernames = usernames.split(',');","  geddy.model.Event.first({id: eventid}, function(err, eventRecord)","  {","    if(eventRecord &amp;&amp; eventRecord.attendingusers)","    {","      var data = eventRecord.attendingusers.split(',').concat(usernames);","      var newUids = data.id;","      newUids = validateUserIds(newUids, eventid);","      eventRecord.attendingusers = newUids.toString();","      geddy.model.Event.save(eventRecord, function(err, result)","      {","        if(err)","        {","          console.log(\"error in event.save in Event.addUsersToEvent\");","          console.dir(err);","          callback(backendError);","        }","        else","        {","          var message = \"You are cordially invited to join the following event: \" + eventRecord.name + \" login or signup at Group Activity Planner for more details!\";","          Event.invite({eventid: eventid, emails: data.email, message: message}, function(respDict)","          {","            callback({errCode: 1});","          });","        }","      });","    }","    else","    {","      callback(badTableJoin);","    } ","  });","};","","function validateUserIds(idArray, eventid) //assumes valid usernames","{","  toReturn = {};","  idHash = {};","  idReturn = [];","  emailReturn = [];","  for(var key in idArray)","  {","    var id = idArray[key];","    if(idHash[id])","    {","      continue;","    }","    else","    {","      idHash[id] = true;","      if(id.indexOf('@') &gt;= 0)","      {","        emailReturn.push(id);","      }","      else","      {","        geddy.model.User.first({username: id}, function(err, userRecord)","        {","          if(userRecord &amp;&amp; userRecord.username)","          {","            if(!(userRecord.myevents) || (userRecord.myevents.search(eventid) &lt; 0))","            {","              if(userRecord.myevents)","              {","                userRecord.myevents += ',' + eventid;","              }","              else","              {","                userRecord.myevents = eventid;","              }","              userRecord.confirmPassword = userRecord.password;","              geddy.model.User.save(userRecord, function(err, result)","              {","                if(!err)","                {","                  emailReturn.push(userRecord.email);","                  idReturn.push(userRecord.username);","                  if (idReturn.length &gt;= idArray.length - 1){","                    toReturn.id = idReturn;","                    toReturn.email = emailReturn;","                    return toReturn;","                  }","                }","              });","            }","          }","        });","      }","    }","  }","}","","function addEventToUsers(eventid, userIds, callback)","{","  for(var key in userIds)","  {","    var uid = userIds[key];","    geddy.model.User.first({username: uid}, function(err, record)","    {","      if(err)","      {","        console.log(\"error in user.first in Event.addEventToUsers\");","        console.dir(err);","        callback(backendError);","      }","      else","      {","        if(record &amp;&amp; record.myevents)","        {","          record.myevents += \",\"+eventid;","        }","        else","        {","          record.myevents = eventid;","        }","        record.confirmPassword = record.password;","        record.errors = null;","        geddy.model.User.save(record, function(err, result)","        {","          if(err)","          {","            console.log(\"error in event.save in Event.addEventToUsers\");","            console.dir(err);","            callback(backendError);","          }","","        });","      }","    });","  }","  callback({errCode: 1}); //success!","}","","","//params requires eventid, emails, and message","Event.invite = function(params, callback) ","{","  //send email containing \"message\" to list of emails","  var self = this;","  var responseDict = {};","","  var eventID = params.eventid;","  var emailList = params.emails;","  var message = params.message;","","  if (eventID === null || eventID === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null eventid\";","    callback(responseDict);","    return;","  } ","","  if (emailList === null || emailList === undefined || emailList === [] ) ","  {","    //handle empty emails","    responseDict.errCode = 6;","    responseDict.message = \"null emails\";","    callback(responseDict);","    return;","  } ","","  if (message === null || message === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null message\";","    callback(responseDict);","    return;","  } ","","  //check all emails for propper form","  var badEmails = [];","  var goodEmailsString = \"\";","  for(var index in emailList)","  {","    var emailAddr = emailList[index];","    if (!isValidEmail(emailAddr))","    {","      //email address is malformed","      badEmails.push(emailAddr);","    } else {","","      goodEmailsString += emailAddr + \", \";","","    }","  }","","  //some emails are bad","  if(badEmails.length &gt; 0 ){","","    responseDict.errCode = 12;","    responseDict.message = \"malformed emails\";","    responseDict.bademails = badEmails;","    callback(responseDict);","    return;","  }","","  //chop off the \", \" at the end of the string","  if(goodEmailsString.length &gt; 2)","  {","","    goodEmailsString = goodEmailsString.substring(0,goodEmailsString.length-2);","  } ","  else","  {","","    responseDict.errCode = 6;","    responseDict.message = \"null emails\";","    callback(responseDict);","    return;","  } ","","","  geddy.model.Event.first({id: eventID}, function (err, eventModel) ","    {","","      if(err){","        //handle error","        console.log(\"err\");","        console.dir(err);","        responseDict.errCode = 7;","        responseDict.message = \"database error\";","        callback(responseDict);","        return;","      } ","      else ","      {","","        if(eventModel)","        {","          //invite all emails","","          // create reusable transport method (opens pool of SMTP connections)","          var smtpTransport = nodemailer.createTransport(\"SMTP\",{","              service: \"Gmail\",","              auth: {","                user: \"groupactivityplanner.gap@gmail.com\",","                pass: \"gapgapgap\"","              }","              // auth: {","              //     user: \"groupactivityplanner@gmail.com\",","              //     pass: \"gapgapgap\"","              // }","          });","","          //Append event data to message","          blade.compileFile('app/helpers/templates/bladeEmailTemplate.blade', function (err, tmpl) {","            //console.log(\"Compiled Blade File\");","            if (!err &amp;&amp; tmpl){","              //Look up activity info","              geddy.model.Activity.first({id: eventModel.activityid}, function (err, activityModel) {","                if (activityModel){","                  //TODO Get Location","                  reverseGeocodeAddressForActivity(activityModel, function(address) {","                    //Convert time to human readable","                    var time1 = convertMsToString(eventModel.time1);","                    var time2 = convertMsToString(eventModel.time2);","                    eventModel.time1 = time1;","                    eventModel.time2 = time2;","                    //Convert date to human readable","                    var beginDate = new Date(eventModel.begindate);","                    var endDate = new Date(eventModel.enddate);","                    eventModel.begindate = beginDate.toDateString();","                    eventModel.enddate = endDate.toDateString();","                    var templateVars = {","                      event: eventModel,","                      activity: activityModel,","                      message: message,","                      location: address","                    };","","                    var templateHTML = tmpl(templateVars, function(err, html) {","                        //console.log(\"GOT HTML\");","                        if(err) throw err;","","                        var templateHTML = null;","                        if (html){","                          templateHTML = html;","                        }","","                        var mailOptions = {","                            from: \"Group Activity Planner &#226;&#156;&#148; &lt;groupactivityplanner@gmail.com&gt;\", // sender address","                            to: goodEmailsString, // list of receivers","                            subject: \"You have been invited to an event!\", // Subject line","                            text: null, // plaintext body","                            html: templateHTML // html body","                        };","","                        // send mail with defined transport object","                        smtpTransport.sendMail(mailOptions, function(error, response){","                            if(error){","                                console.log(\"error\");","                                console.dir(error);","                                responseDict.errCode = 13;","                                responseDict.message = \"email failed\";","                                callback(responseDict);","                                return;","                            }else{","                                responseDict.errCode = 1;","                                callback(responseDict);","                                return;","                            }","","                            smtpTransport.close();","","                        });","                    });","                  });","                }","              });","              ","            } else {","              console.log(\"err =\");","              console.dir(err);","              responseDict.errCode = 13;","              responseDict.message = \"email failed\";","              callback(responseDict);","            }","","","          });","","        }","         else ","        {","        ","        responseDict.errCode = 10;","        responseDict.message = \"invalid eventid\";","        callback(responseDict);","        return;","        }","      }","","    });","};","","function isValidEmail(email) { ","  try","  {","    check(email).isEmail();","    return true;","  } ","  catch (error)","  {","    return false;","  }","}","","function reverseGeocodeAddressForActivity(activityModel, callback) {","  if (activityModel.latitude &amp;&amp; activityModel.longitude){","    var gm = require('googlemaps');","    var util = require('util');","","    var latLong = activityModel.latitude + ',' + activityModel.longitude;","    gm.reverseGeocode(latLong, function(err, data){","      if (err){","        callback(null);","      }","       else ","      {","        var address = '';","        if (data.status == \"OK\") {","          address = data.results[0].formatted_address;","        }","        callback(address);","      }","    });","  } else {","    callback(null);","  }","}","function convertMsToString(time) {","  // Create a Date object with that time as the milliseconds","  var d = new Date(0,0,0,0,0,0,time);","  var hours = d.getHours();","  var hoursStr = hours.toString();","  var minutes = d.getMinutes();","  var minutesStr = minutes.toString();","  var am_pm = 'AM';","","  // Change from 24-hr clock time to 12-hr clock time","  if (hours === 12) {","    am_pm = 'PM';","  } else if (hours &gt; 12) {","    hours = hours % 12;","    am_pm = 'PM';","    hoursStr = hours.toString();","  }","  // Add the '0' before the minutes if less than 10 minutes","  if (minutes &lt; 10) {","    minutesStr = '0' + minutesStr;","  }","","  // Create the string in the proper format HH:MM(AM/PM)","  var dateString = hoursStr + ':' + minutesStr + am_pm;","  return dateString;","}","","Event.changeDateTime = function(params, callback) ","{","","  var self = this;","","  var responseDict = {};","","  //eventid","  if(!params.eventid)","  {","    responseDict.errCode = 6;","    responseDict.message = \"null eventid\";","    callback(responseDict);","    return;","  }","","  var eventID = params.eventid;","","  if (!params.time1 &amp;&amp; !params.time2 &amp;&amp; !params.begindate &amp;&amp; !params.enddate )","  {","    responseDict.errCode = 6;","    responseDict.message = \"all date/time parameters are null\";","    callback(responseDict);","    return;","  }","","  //time1","  var newTime1;","  if(params.time1) {","    newTime1 = parseFloat(params.time1);","  }","","  //time2","  var newTime2;","  if(params.time2) {","    newTime2 = parseFloat(params.time2);","  }","  console.log(\"NEW TIME 2 = \"+ newTime2);","","  //begindate","  var newBeginDate;","  if(params.begindate) {","    newBeginDate = parseFloat(params.begindate);","  }","","  //enddate","  var newEndDate;","  if(params.enddate) {","    newEndDate = parseFloat(params.enddate);","  }","","","  //get the event","  geddy.model.Event.first({id: eventID}, function (err, eventModel) ","    {","","      if (err){","        //handle error","        console.log(\"err change date time\");","        console.dir(err);","        responseDict.errCode = 7;","        responseDict.message = \"database error\";","        callback(responseDict);","        return;","      } ","      else ","      {","","        if(!eventModel)","        {","          //event model for this id not found","          responseDict.errCode = 10;","          responseDict.message = \"invalid eventid\";","          callback(responseDict);","          return;","","        }","        else","        {","","          //set fields if neccesary","          if ((typeof newTime1) == 'number') {","            eventModel.time1 = newTime1;","          }","","          if ((typeof newTime2) == 'number') {","            eventModel.time2 = newTime2;","            console.log(\"CHANGED TIME 2\");","          }","","          if ((typeof newBeginDate) == 'number') {","            eventModel.begindate = newBeginDate;","          }","","          if ((typeof newEndDate) == 'number') {","            eventModel.enddate = newEndDate;","          }","        }","","        //check to see if fields are valid","        if(eventModel.time1 &gt;= eventModel.time2)","        {","          responseDict.errCode = 11;","          responseDict.message = \"invalid times\";","          callback(responseDict);","          return;","        }","","        if(eventModel.begindate &gt;= eventModel.enddate)","        {","          responseDict.errCode = 11;","          responseDict.message = \"invalid dates\";","          callback(responseDict);","          return;","        }","","","        //save model!","        geddy.model.Event.save(eventModel, function(err, result)","        {","          if(err)","          {","            console.log(\"error in Event.save in changeDateTime\");","            console.dir(err);","            responseDict.errCode = 7;","            responseDict.message = \"database error\";","            callback(responseDict);","            return;","","          } ","          else if (result)","          {","            //save succeded","            responseDict.errCode = 1;","            callback(responseDict);","            return;","          } ","          else","          {","            responseDict.errCode = 7;","            responseDict.message = \"database error\";","            callback(responseDict);","            return;            ","          }","        });","      }","    });","};","","Event.getMyEvents = function (params, callback) {","  geddy.model.User.first({id: params.userId}, function (err, userModel) {","    if (err){","      console.log(\"error in getMyEvents\");","      console.dir(err);","      responseDict.events = [];","      // console.log(\"err exists: \");","      // console.dir(err);","      responseDict.errCode = 7;","      callback(responseDict);","    } else {","      if (userModel){","        var myEvents = [];","        if (userModel.myevents){","          var eventIds = userModel.myevents.split(',');","          for (var index in eventIds){","            var eventId = eventIds[index];","            geddy.model.Event.first({id: eventId}, function (err, eventModel){","              if (err){","                console.log(\"error in event.first in getMyEvents\");","                console.dir(err);","                responseDict.events = [];","                responseDict.errCode = 7;","                callback(responseDict);","              } else if (eventModel){","                //console.log(\"EVENT MODEL:\");","                //console.log(eventModel);","                myEvents.push(eventModel);","              }","              if (myEvents.length == eventIds.length){","                console.log(\"index = \" + index);","                getEventsCallback(1, myEvents, callback);","              }","            });","          }","        } else {","          getEventsCallback(1, myEvents, callback);","        }","      }","    }","  });","};","","function getEventsCallback(errCode, events, callback){","  var responseDict = {};","  responseDict.errCode = 1;","  responseDict.events = events;","  callback(responseDict);","}","","  ","/*","// Can also define them on the prototype","Event.prototype.someOtherMethod = function () {","  // Do some other stuff","};","// Can also define static methods and properties","Event.someStaticMethod = function () {","  // Do some other stuff","};","Event.someStaticProperty = 'YYZ';","*/","","Event.TESTAPI_resetFixture = function (callback) {","  geddy.model.Event.all(function (err, result) {","    // console.log(\"got all activity models with error: \" + err + \" and result: \" + result);","    for (var eventModel in result){","      // console.log(\"trying to remove activityModel: \" + result[activityModel]);","      geddy.model.Event.remove(result[eventModel].id);","    }","    var responseDict = {};","    responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};  ","","Event = geddy.model.register('Event', Event);"];
}());

(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/passport.js']) {
  _$jscoverage['models/passport.js'] = [];
  _$jscoverage['models/passport.js'][1] = 0;
  _$jscoverage['models/passport.js'][2] = 0;
  _$jscoverage['models/passport.js'][3] = 0;
  _$jscoverage['models/passport.js'][5] = 0;
  _$jscoverage['models/passport.js'][8] = 0;
}
_$jscoverage['models/passport.js'][1]++;
var Passport = (function () {
  _$jscoverage['models/passport.js'][2]++;
  this.property("authType", "string");
  _$jscoverage['models/passport.js'][3]++;
  this.property("key", "string");
  _$jscoverage['models/passport.js'][5]++;
  this.belongsTo("User");
});
_$jscoverage['models/passport.js'][8]++;
Passport = geddy.model.register("Passport", Passport);
_$jscoverage['models/passport.js'].source = ["var Passport = function () {","  this.property('authType', 'string');","  this.property('key', 'string');","","  this.belongsTo('User');","};","","Passport = geddy.model.register('Passport', Passport);",""];
}());

(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/user.js']) {
  _$jscoverage['models/user.js'] = [];
  _$jscoverage['models/user.js'][1] = 0;
  _$jscoverage['models/user.js'][5] = 0;
  _$jscoverage['models/user.js'][6] = 0;
  _$jscoverage['models/user.js'][7] = 0;
  _$jscoverage['models/user.js'][8] = 0;
  _$jscoverage['models/user.js'][9] = 0;
  _$jscoverage['models/user.js'][10] = 0;
  _$jscoverage['models/user.js'][11] = 0;
  _$jscoverage['models/user.js'][12] = 0;
  _$jscoverage['models/user.js'][13] = 0;
  _$jscoverage['models/user.js'][14] = 0;
  _$jscoverage['models/user.js'][16] = 0;
  _$jscoverage['models/user.js'][19] = 0;
  _$jscoverage['models/user.js'][21] = 0;
  _$jscoverage['models/user.js'][22] = 0;
  _$jscoverage['models/user.js'][23] = 0;
  _$jscoverage['models/user.js'][26] = 0;
  _$jscoverage['models/user.js'][27] = 0;
  _$jscoverage['models/user.js'][32] = 0;
  _$jscoverage['models/user.js'][34] = 0;
  _$jscoverage['models/user.js'][35] = 0;
  _$jscoverage['models/user.js'][36] = 0;
  _$jscoverage['models/user.js'][40] = 0;
  _$jscoverage['models/user.js'][41] = 0;
  _$jscoverage['models/user.js'][43] = 0;
  _$jscoverage['models/user.js'][44] = 0;
  _$jscoverage['models/user.js'][47] = 0;
  _$jscoverage['models/user.js'][49] = 0;
  _$jscoverage['models/user.js'][52] = 0;
  _$jscoverage['models/user.js'][53] = 0;
  _$jscoverage['models/user.js'][54] = 0;
  _$jscoverage['models/user.js'][55] = 0;
  _$jscoverage['models/user.js'][57] = 0;
  _$jscoverage['models/user.js'][58] = 0;
  _$jscoverage['models/user.js'][59] = 0;
  _$jscoverage['models/user.js'][64] = 0;
  _$jscoverage['models/user.js'][65] = 0;
  _$jscoverage['models/user.js'][74] = 0;
  _$jscoverage['models/user.js'][76] = 0;
  _$jscoverage['models/user.js'][77] = 0;
  _$jscoverage['models/user.js'][79] = 0;
  _$jscoverage['models/user.js'][81] = 0;
  _$jscoverage['models/user.js'][83] = 0;
  _$jscoverage['models/user.js'][84] = 0;
  _$jscoverage['models/user.js'][88] = 0;
  _$jscoverage['models/user.js'][89] = 0;
  _$jscoverage['models/user.js'][91] = 0;
  _$jscoverage['models/user.js'][93] = 0;
  _$jscoverage['models/user.js'][95] = 0;
  _$jscoverage['models/user.js'][96] = 0;
  _$jscoverage['models/user.js'][97] = 0;
  _$jscoverage['models/user.js'][101] = 0;
}
_$jscoverage['models/user.js'][1]++;
var passport = require("passport"), passportHelper = require("../helpers/passport/index"), cryptPass = passportHelper.cryptPass;
_$jscoverage['models/user.js'][5]++;
var User = (function () {
  _$jscoverage['models/user.js'][6]++;
  this.property("username", "string", {required: true});
  _$jscoverage['models/user.js'][7]++;
  this.property("password", "string", {required: true});
  _$jscoverage['models/user.js'][8]++;
  this.property("familyName", "string");
  _$jscoverage['models/user.js'][9]++;
  this.property("givenName", "string");
  _$jscoverage['models/user.js'][10]++;
  this.property("email", "string");
  _$jscoverage['models/user.js'][11]++;
  this.property("myevents", "string");
  _$jscoverage['models/user.js'][12]++;
  this.validatesLength("username", {min: 3, max: 128});
  _$jscoverage['models/user.js'][13]++;
  this.validatesLength("password", {min: 8, max: 128});
  _$jscoverage['models/user.js'][14]++;
  this.validatesConfirmed("password", "confirmPassword");
  _$jscoverage['models/user.js'][16]++;
  this.hasMany("Passports");
});
_$jscoverage['models/user.js'][19]++;
User.add = (function (user, callback) {
  _$jscoverage['models/user.js'][21]++;
  User.first({username: user.username}, (function (err, data) {
  _$jscoverage['models/user.js'][22]++;
  var responseDict = {};
  _$jscoverage['models/user.js'][23]++;
  if (data) {
    _$jscoverage['models/user.js'][26]++;
    responseDict.errCode = 2;
    _$jscoverage['models/user.js'][27]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/user.js'][32]++;
    if (! user.username || user.username.length === 0 || user.username.length > 128) {
      _$jscoverage['models/user.js'][34]++;
      responseDict.errCode = 3;
      _$jscoverage['models/user.js'][35]++;
      callback(responseDict);
    }
    else {
      _$jscoverage['models/user.js'][36]++;
      if (! user.password || user.password.length === 0 || user.password.length > 128) {
        _$jscoverage['models/user.js'][40]++;
        responseDict.errCode = 4;
        _$jscoverage['models/user.js'][41]++;
        callback(responseDict);
      }
      else {
        _$jscoverage['models/user.js'][43]++;
        if (user.isValid()) {
          _$jscoverage['models/user.js'][44]++;
          user.password = cryptPass(user.password);
        }
        _$jscoverage['models/user.js'][47]++;
        user.save((function (err, data) {
  _$jscoverage['models/user.js'][49]++;
  if (err) {
    _$jscoverage['models/user.js'][52]++;
    console.log("Error saving User: ");
    _$jscoverage['models/user.js'][53]++;
    responseDict.message = "";
    _$jscoverage['models/user.js'][54]++;
    for (var item in err) {
      _$jscoverage['models/user.js'][55]++;
      responseDict.message += err[item];
}
    _$jscoverage['models/user.js'][57]++;
    console.log(responseDict.message);
    _$jscoverage['models/user.js'][58]++;
    responseDict.errCode = 7;
    _$jscoverage['models/user.js'][59]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/user.js'][64]++;
    responseDict.errCode = 1;
    _$jscoverage['models/user.js'][65]++;
    callback(responseDict);
  }
}));
      }
    }
  }
}));
});
_$jscoverage['models/user.js'][74]++;
User.getUsernames = (function (callback) {
  _$jscoverage['models/user.js'][76]++;
  usernames = [];
  _$jscoverage['models/user.js'][77]++;
  geddy.model.User.all((function (err, result) {
  _$jscoverage['models/user.js'][79]++;
  for (var key in result) {
    _$jscoverage['models/user.js'][81]++;
    usernames.push(result[key].username);
}
  _$jscoverage['models/user.js'][83]++;
  usernames.sort();
  _$jscoverage['models/user.js'][84]++;
  callback(usernames);
}));
});
_$jscoverage['models/user.js'][88]++;
User.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/user.js'][89]++;
  geddy.model.User.all((function (err, result) {
  _$jscoverage['models/user.js'][91]++;
  for (var userModel in result) {
    _$jscoverage['models/user.js'][93]++;
    geddy.model.User.remove(result[userModel].id);
}
  _$jscoverage['models/user.js'][95]++;
  var responseDict = {};
  _$jscoverage['models/user.js'][96]++;
  responseDict.errCode = 1;
  _$jscoverage['models/user.js'][97]++;
  callback(responseDict);
}));
});
_$jscoverage['models/user.js'][101]++;
User = geddy.model.register("User", User);
_$jscoverage['models/user.js'].source = ["var passport = require('passport')","  , passportHelper = require('../helpers/passport/index')","  , cryptPass = passportHelper.cryptPass;","","var User = function () {","\tthis.property('username', 'string', {required: true});","    this.property('password', 'string', {required: true});","    this.property('familyName', 'string');","    this.property('givenName', 'string');","    this.property('email', 'string');","    this.property('myevents', 'string');","    this.validatesLength('username', {min: 3, max:128});","    this.validatesLength('password', {min: 8, max:128});","    this.validatesConfirmed('password', 'confirmPassword');","","    this.hasMany('Passports');","};","","User.add = function(user, callback){","    // Non-blocking uniqueness checks are hard","    User.first({username: user.username}, function(err, data) {","      var responseDict = {};","    if (data) {","      // console.log(\"USER EXISTS\");","      //Username Exists errCode=2","      responseDict.errCode = 2;","      callback(responseDict);","      //self.transfer('add');","    }","    else {","      // console.log(\"USER DOESNT EXIST\");","      if (!user.username || user.username.length === 0 || user.username.length &gt; 128) {","        // console.log(\"bad username block\");","        responseDict.errCode = 3; //\"ERR_BAD_USERNAME\"","        callback(responseDict);","      } else if (!user.password || user.password.length === 0 || user.password.length &gt; 128 ) {","        //|| user.confirmPassword != user.password){","        // console.log(\"bad password block with confirmPassword: \" + user.confirmPassword);","        //Check if password is not empty and &lt;128 chars","        responseDict.errCode = 4; //\"ERR_BAD_PASSWORD\"","        callback(responseDict);","      } else {","        if (user.isValid()) {","          user.password = cryptPass(user.password);","        }","        // console.log(\"user is : username: \" + user.username + \" and password: \" + user.password);","        user.save(function(err, data) {","          // console.log(\"Got Data: \" + data);","          if (err) {","            // params.errors = err;","            //Database Error errCode=7","            console.log(\"Error saving User: \");","            responseDict.message = \"\";","            for (var item in err){","              responseDict.message += err[item];","            }","            console.log(responseDict.message);","            responseDict.errCode = 7;","            callback(responseDict);","            // self.transfer('add');","          }","          else {","            //Success errCode=1","            responseDict.errCode = 1;","            callback(responseDict);","              // self.redirect({controller: self.name});","          }","        });","      }","    }","    });","};","","User.getUsernames = function(callback)","{","  usernames = [];","  geddy.model.User.all(function(err, result)","  {","    for(var key in result)","    {","      usernames.push(result[key].username);","    }","    usernames.sort();","    callback(usernames);","  });","};","","User.TESTAPI_resetFixture = function (callback) {","  geddy.model.User.all(function (err, result) {","     // console.log(\"got all users models with error: \" + err + \" and result: \" + result);","    for (var userModel in result){","       // console.log(\"trying to remove userModel: \" + result[userModel]);","      geddy.model.User.remove(result[userModel].id);","    }","    var responseDict = {};","  responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};","","User = geddy.model.register('User', User);"];
}());