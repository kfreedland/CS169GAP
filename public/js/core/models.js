(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/activity.js']) {
  _$jscoverage['models/activity.js'] = [];
  _$jscoverage['models/activity.js'][4] = 0;
  _$jscoverage['models/activity.js'][6] = 0;
  _$jscoverage['models/activity.js'][26] = 0;
  _$jscoverage['models/activity.js'][28] = 0;
  _$jscoverage['models/activity.js'][33] = 0;
  _$jscoverage['models/activity.js'][35] = 0;
  _$jscoverage['models/activity.js'][37] = 0;
  _$jscoverage['models/activity.js'][38] = 0;
  _$jscoverage['models/activity.js'][39] = 0;
  _$jscoverage['models/activity.js'][40] = 0;
  _$jscoverage['models/activity.js'][42] = 0;
  _$jscoverage['models/activity.js'][43] = 0;
  _$jscoverage['models/activity.js'][46] = 0;
  _$jscoverage['models/activity.js'][49] = 0;
  _$jscoverage['models/activity.js'][51] = 0;
  _$jscoverage['models/activity.js'][53] = 0;
  _$jscoverage['models/activity.js'][59] = 0;
  _$jscoverage['models/activity.js'][61] = 0;
  _$jscoverage['models/activity.js'][66] = 0;
  _$jscoverage['models/activity.js'][68] = 0;
  _$jscoverage['models/activity.js'][69] = 0;
  _$jscoverage['models/activity.js'][70] = 0;
  _$jscoverage['models/activity.js'][71] = 0;
  _$jscoverage['models/activity.js'][75] = 0;
  _$jscoverage['models/activity.js'][80] = 0;
  _$jscoverage['models/activity.js'][82] = 0;
  _$jscoverage['models/activity.js'][87] = 0;
  _$jscoverage['models/activity.js'][89] = 0;
  _$jscoverage['models/activity.js'][90] = 0;
  _$jscoverage['models/activity.js'][91] = 0;
  _$jscoverage['models/activity.js'][92] = 0;
  _$jscoverage['models/activity.js'][94] = 0;
  _$jscoverage['models/activity.js'][96] = 0;
  _$jscoverage['models/activity.js'][97] = 0;
  _$jscoverage['models/activity.js'][98] = 0;
  _$jscoverage['models/activity.js'][99] = 0;
  _$jscoverage['models/activity.js'][103] = 0;
  _$jscoverage['models/activity.js'][107] = 0;
  _$jscoverage['models/activity.js'][109] = 0;
  _$jscoverage['models/activity.js'][110] = 0;
  _$jscoverage['models/activity.js'][111] = 0;
  _$jscoverage['models/activity.js'][112] = 0;
  _$jscoverage['models/activity.js'][114] = 0;
  _$jscoverage['models/activity.js'][118] = 0;
  _$jscoverage['models/activity.js'][119] = 0;
  _$jscoverage['models/activity.js'][120] = 0;
  _$jscoverage['models/activity.js'][121] = 0;
  _$jscoverage['models/activity.js'][126] = 0;
  _$jscoverage['models/activity.js'][131] = 0;
  _$jscoverage['models/activity.js'][134] = 0;
  _$jscoverage['models/activity.js'][136] = 0;
  _$jscoverage['models/activity.js'][137] = 0;
  _$jscoverage['models/activity.js'][138] = 0;
  _$jscoverage['models/activity.js'][139] = 0;
  _$jscoverage['models/activity.js'][142] = 0;
  _$jscoverage['models/activity.js'][144] = 0;
  _$jscoverage['models/activity.js'][145] = 0;
  _$jscoverage['models/activity.js'][146] = 0;
  _$jscoverage['models/activity.js'][147] = 0;
  _$jscoverage['models/activity.js'][152] = 0;
  _$jscoverage['models/activity.js'][153] = 0;
  _$jscoverage['models/activity.js'][155] = 0;
  _$jscoverage['models/activity.js'][157] = 0;
  _$jscoverage['models/activity.js'][158] = 0;
  _$jscoverage['models/activity.js'][159] = 0;
  _$jscoverage['models/activity.js'][160] = 0;
  _$jscoverage['models/activity.js'][167] = 0;
  _$jscoverage['models/activity.js'][169] = 0;
  _$jscoverage['models/activity.js'][171] = 0;
  _$jscoverage['models/activity.js'][173] = 0;
  _$jscoverage['models/activity.js'][176] = 0;
  _$jscoverage['models/activity.js'][179] = 0;
  _$jscoverage['models/activity.js'][181] = 0;
  _$jscoverage['models/activity.js'][182] = 0;
  _$jscoverage['models/activity.js'][183] = 0;
  _$jscoverage['models/activity.js'][184] = 0;
  _$jscoverage['models/activity.js'][192] = 0;
  _$jscoverage['models/activity.js'][194] = 0;
  _$jscoverage['models/activity.js'][196] = 0;
  _$jscoverage['models/activity.js'][198] = 0;
  _$jscoverage['models/activity.js'][199] = 0;
  _$jscoverage['models/activity.js'][200] = 0;
  _$jscoverage['models/activity.js'][201] = 0;
  _$jscoverage['models/activity.js'][206] = 0;
  _$jscoverage['models/activity.js'][208] = 0;
  _$jscoverage['models/activity.js'][210] = 0;
  _$jscoverage['models/activity.js'][212] = 0;
  _$jscoverage['models/activity.js'][214] = 0;
  _$jscoverage['models/activity.js'][215] = 0;
  _$jscoverage['models/activity.js'][216] = 0;
  _$jscoverage['models/activity.js'][217] = 0;
  _$jscoverage['models/activity.js'][222] = 0;
  _$jscoverage['models/activity.js'][225] = 0;
  _$jscoverage['models/activity.js'][227] = 0;
  _$jscoverage['models/activity.js'][228] = 0;
  _$jscoverage['models/activity.js'][229] = 0;
  _$jscoverage['models/activity.js'][230] = 0;
  _$jscoverage['models/activity.js'][235] = 0;
  _$jscoverage['models/activity.js'][237] = 0;
  _$jscoverage['models/activity.js'][238] = 0;
  _$jscoverage['models/activity.js'][240] = 0;
  _$jscoverage['models/activity.js'][241] = 0;
  _$jscoverage['models/activity.js'][242] = 0;
  _$jscoverage['models/activity.js'][243] = 0;
  _$jscoverage['models/activity.js'][247] = 0;
  _$jscoverage['models/activity.js'][250] = 0;
  _$jscoverage['models/activity.js'][252] = 0;
  _$jscoverage['models/activity.js'][254] = 0;
  _$jscoverage['models/activity.js'][255] = 0;
  _$jscoverage['models/activity.js'][256] = 0;
  _$jscoverage['models/activity.js'][257] = 0;
  _$jscoverage['models/activity.js'][261] = 0;
  _$jscoverage['models/activity.js'][263] = 0;
  _$jscoverage['models/activity.js'][265] = 0;
  _$jscoverage['models/activity.js'][266] = 0;
  _$jscoverage['models/activity.js'][267] = 0;
  _$jscoverage['models/activity.js'][268] = 0;
  _$jscoverage['models/activity.js'][274] = 0;
  _$jscoverage['models/activity.js'][275] = 0;
  _$jscoverage['models/activity.js'][277] = 0;
  _$jscoverage['models/activity.js'][278] = 0;
  _$jscoverage['models/activity.js'][283] = 0;
  _$jscoverage['models/activity.js'][284] = 0;
  _$jscoverage['models/activity.js'][285] = 0;
  _$jscoverage['models/activity.js'][286] = 0;
  _$jscoverage['models/activity.js'][287] = 0;
  _$jscoverage['models/activity.js'][288] = 0;
  _$jscoverage['models/activity.js'][289] = 0;
  _$jscoverage['models/activity.js'][294] = 0;
  _$jscoverage['models/activity.js'][296] = 0;
  _$jscoverage['models/activity.js'][297] = 0;
  _$jscoverage['models/activity.js'][298] = 0;
  _$jscoverage['models/activity.js'][299] = 0;
  _$jscoverage['models/activity.js'][306] = 0;
  _$jscoverage['models/activity.js'][311] = 0;
  _$jscoverage['models/activity.js'][313] = 0;
  _$jscoverage['models/activity.js'][314] = 0;
  _$jscoverage['models/activity.js'][315] = 0;
  _$jscoverage['models/activity.js'][316] = 0;
  _$jscoverage['models/activity.js'][318] = 0;
  _$jscoverage['models/activity.js'][319] = 0;
  _$jscoverage['models/activity.js'][320] = 0;
  _$jscoverage['models/activity.js'][324] = 0;
  _$jscoverage['models/activity.js'][325] = 0;
  _$jscoverage['models/activity.js'][332] = 0;
  _$jscoverage['models/activity.js'][348] = 0;
  _$jscoverage['models/activity.js'][350] = 0;
  _$jscoverage['models/activity.js'][352] = 0;
  _$jscoverage['models/activity.js'][353] = 0;
  _$jscoverage['models/activity.js'][355] = 0;
  _$jscoverage['models/activity.js'][357] = 0;
  _$jscoverage['models/activity.js'][359] = 0;
  _$jscoverage['models/activity.js'][361] = 0;
  _$jscoverage['models/activity.js'][364] = 0;
  _$jscoverage['models/activity.js'][366] = 0;
  _$jscoverage['models/activity.js'][372] = 0;
  _$jscoverage['models/activity.js'][377] = 0;
  _$jscoverage['models/activity.js'][378] = 0;
  _$jscoverage['models/activity.js'][380] = 0;
  _$jscoverage['models/activity.js'][382] = 0;
  _$jscoverage['models/activity.js'][384] = 0;
  _$jscoverage['models/activity.js'][385] = 0;
  _$jscoverage['models/activity.js'][386] = 0;
  _$jscoverage['models/activity.js'][390] = 0;
}
_$jscoverage['models/activity.js'][4]++;
var Activity = (function () {
  _$jscoverage['models/activity.js'][6]++;
  this.defineProperties({name: {type: "string", required: "true"}, description: {type: "string"}, category: {type: "string"}, flag: {type: "string", required: "true"}, time1: {type: "number"}, time2: {type: "number"}, begindate: {type: "number"}, enddate: {type: "number"}, lowprice: {type: "number"}, highprice: {type: "number"}, lownumparticipants: {type: "number"}, highnumparticipants: {type: "number"}, latitude: {type: "number"}, longitude: {type: "number"}, duration: {type: "number"}});
});
_$jscoverage['models/activity.js'][26]++;
var geoSearchHelper = (function (records, lat, myLong, callback) {
  _$jscoverage['models/activity.js'][28]++;
  var consDist = 69.1, consAng = 57.3, returnRecords = [], count = 0, idx;
  _$jscoverage['models/activity.js'][33]++;
  for (idx in records) {
    _$jscoverage['models/activity.js'][35]++;
    var record = records[idx];
    _$jscoverage['models/activity.js'][37]++;
    var dist = Math.sqrt(Math.pow(record.latitude - lat, 2) + Math.pow((record.longitude - myLong) * Math.cos(lat / 57.3), 2));
    _$jscoverage['models/activity.js'][38]++;
    record.distance = dist * 100;
    _$jscoverage['models/activity.js'][39]++;
    returnRecords.push(record);
    _$jscoverage['models/activity.js'][40]++;
    count = count + 1;
}
  _$jscoverage['models/activity.js'][42]++;
  if (returnRecords.length > 0) {
    _$jscoverage['models/activity.js'][43]++;
    returnRecords.sort((function (recA, recB) {
  _$jscoverage['models/activity.js'][43]++;
  return recA.distance - recB.distance;
}));
  }
  _$jscoverage['models/activity.js'][46]++;
  callback(returnRecords, count);
});
_$jscoverage['models/activity.js'][49]++;
Activity.add = (function (parameterDict, callback) {
  _$jscoverage['models/activity.js'][51]++;
  var self = this;
  _$jscoverage['models/activity.js'][53]++;
  var respDict = {};
  _$jscoverage['models/activity.js'][59]++;
  var validCategories = ["Sports", "Entertainment", "Food", "Arts", "Nature"];
  _$jscoverage['models/activity.js'][61]++;
  var activityDict = {};
  _$jscoverage['models/activity.js'][66]++;
  if (! parameterDict.name) {
    _$jscoverage['models/activity.js'][68]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][69]++;
    respDict.message = "null name";
    _$jscoverage['models/activity.js'][70]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][71]++;
    return;
  }
  else {
    _$jscoverage['models/activity.js'][75]++;
    activityDict.name = parameterDict.name;
  }
  _$jscoverage['models/activity.js'][80]++;
  if (parameterDict.description) {
    _$jscoverage['models/activity.js'][82]++;
    activityDict.description = parameterDict.description;
  }
  _$jscoverage['models/activity.js'][87]++;
  if (! parameterDict.category) {
    _$jscoverage['models/activity.js'][89]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][90]++;
    respDict.message = "null category";
    _$jscoverage['models/activity.js'][91]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][92]++;
    return;
  }
  else {
    _$jscoverage['models/activity.js'][94]++;
    if (validCategories.indexOf(parameterDict.category) === -1) {
      _$jscoverage['models/activity.js'][96]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][97]++;
      respDict.message = "invalid category";
      _$jscoverage['models/activity.js'][98]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][99]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][103]++;
      activityDict.category = parameterDict.category;
    }
  }
  _$jscoverage['models/activity.js'][107]++;
  if (! parameterDict.flag) {
    _$jscoverage['models/activity.js'][109]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][110]++;
    respDict.message = "null flag";
    _$jscoverage['models/activity.js'][111]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][112]++;
    return;
  }
  else {
    _$jscoverage['models/activity.js'][114]++;
    if (parameterDict.flag !== "startEnd" && parameterDict.flag !== "openClose" && parameterDict.flag !== "anyTime" && parameterDict.flag !== "dayTime" && parameterDict.flag !== "nightTime") {
      _$jscoverage['models/activity.js'][118]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][119]++;
      respDict.message = "invalid flag";
      _$jscoverage['models/activity.js'][120]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][121]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][126]++;
      activityDict.flag = parameterDict.flag;
    }
  }
  _$jscoverage['models/activity.js'][131]++;
  if (parameterDict.flag === "startEnd" || parameterDict.flag === "openClose") {
    _$jscoverage['models/activity.js'][134]++;
    if (! parameterDict.time1) {
      _$jscoverage['models/activity.js'][136]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][137]++;
      respDict.message = "null time1";
      _$jscoverage['models/activity.js'][138]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][139]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][142]++;
      if (! parameterDict.time2) {
        _$jscoverage['models/activity.js'][144]++;
        respDict.errCode = 6;
        _$jscoverage['models/activity.js'][145]++;
        respDict.message = "null time2";
        _$jscoverage['models/activity.js'][146]++;
        callback(respDict);
        _$jscoverage['models/activity.js'][147]++;
        return;
      }
      else {
        _$jscoverage['models/activity.js'][152]++;
        activityDict.time1 = parseFloat(parameterDict.time1);
        _$jscoverage['models/activity.js'][153]++;
        activityDict.time2 = parseFloat(parameterDict.time2);
        _$jscoverage['models/activity.js'][155]++;
        if (activityDict.time1 > activityDict.time2) {
          _$jscoverage['models/activity.js'][157]++;
          respDict.errCode = 6;
          _$jscoverage['models/activity.js'][158]++;
          respDict.message = "invalid times";
          _$jscoverage['models/activity.js'][159]++;
          callback(respDict);
          _$jscoverage['models/activity.js'][160]++;
          return;
        }
      }
    }
  }
  _$jscoverage['models/activity.js'][167]++;
  if (parameterDict.begindate) {
    _$jscoverage['models/activity.js'][169]++;
    parameterDict.begindate = parseFloat(parameterDict.begindate);
  }
  _$jscoverage['models/activity.js'][171]++;
  if (parameterDict.enddate) {
    _$jscoverage['models/activity.js'][173]++;
    parameterDict.enddate = parseFloat(parameterDict.enddate);
  }
  _$jscoverage['models/activity.js'][176]++;
  if (parameterDict.begindate && parameterDict.enddate) {
    _$jscoverage['models/activity.js'][179]++;
    if (parameterDict.begindate > parameterDict.enddate) {
      _$jscoverage['models/activity.js'][181]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][182]++;
      respDict.message = "invalid dates";
      _$jscoverage['models/activity.js'][183]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][184]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][192]++;
  if (parameterDict.lowprice === "0" || (parameterDict.lowprice === 0)) {
    _$jscoverage['models/activity.js'][194]++;
    activityDict.lowprice = 0;
  }
  else {
    _$jscoverage['models/activity.js'][196]++;
    if (! parameterDict.lowprice) {
      _$jscoverage['models/activity.js'][198]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][199]++;
      respDict.message = "null lowprice";
      _$jscoverage['models/activity.js'][200]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][201]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][206]++;
      activityDict.lowprice = parseFloat(parameterDict.lowprice);
    }
  }
  _$jscoverage['models/activity.js'][208]++;
  if ((parameterDict.highprice === "0") || (parameterDict.highprice === 0)) {
    _$jscoverage['models/activity.js'][210]++;
    activityDict.highprice = 0;
  }
  else {
    _$jscoverage['models/activity.js'][212]++;
    if (! parameterDict.highprice) {
      _$jscoverage['models/activity.js'][214]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][215]++;
      respDict.message = "null highprice";
      _$jscoverage['models/activity.js'][216]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][217]++;
      return;
    }
    else {
      _$jscoverage['models/activity.js'][222]++;
      activityDict.highprice = parseFloat(parameterDict.highprice);
    }
  }
  _$jscoverage['models/activity.js'][225]++;
  if (activityDict.lowprice > activityDict.highprice) {
    _$jscoverage['models/activity.js'][227]++;
    respDict.errCode = 6;
    _$jscoverage['models/activity.js'][228]++;
    respDict.message = "invalid prices";
    _$jscoverage['models/activity.js'][229]++;
    callback(respDict);
    _$jscoverage['models/activity.js'][230]++;
    return;
  }
  _$jscoverage['models/activity.js'][235]++;
  if (parameterDict.lownumparticipants) {
    _$jscoverage['models/activity.js'][237]++;
    activityDict.lownumparticipants = parseFloat(parameterDict.lownumparticipants);
    _$jscoverage['models/activity.js'][238]++;
    if (activityDict.lownumparticipants <= 0) {
      _$jscoverage['models/activity.js'][240]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][241]++;
      respDict.message = "invalid participants";
      _$jscoverage['models/activity.js'][242]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][243]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][247]++;
  if (parameterDict.highnumparticipants) {
    _$jscoverage['models/activity.js'][250]++;
    activityDict.highnumparticipants = parseFloat(parameterDict.highnumparticipants);
    _$jscoverage['models/activity.js'][252]++;
    if (activityDict.highnumparticipants <= 0) {
      _$jscoverage['models/activity.js'][254]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][255]++;
      respDict.message = "invalid participants";
      _$jscoverage['models/activity.js'][256]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][257]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][261]++;
  if (parameterDict.lownumparticipants && parameterDict.highnumparticipants) {
    _$jscoverage['models/activity.js'][263]++;
    if (activityDict.lownumparticipants > activityDict.highnumparticipants) {
      _$jscoverage['models/activity.js'][265]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][266]++;
      respDict.message = "invalid participants";
      _$jscoverage['models/activity.js'][267]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][268]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][274]++;
  if (parameterDict.latitude) {
    _$jscoverage['models/activity.js'][275]++;
    activityDict.latitude = parseFloat(parameterDict.latitude);
  }
  _$jscoverage['models/activity.js'][277]++;
  if (parameterDict.longitude) {
    _$jscoverage['models/activity.js'][278]++;
    activityDict.longitude = parseFloat(parameterDict.longitude);
  }
  _$jscoverage['models/activity.js'][283]++;
  if (parameterDict.duration) {
    _$jscoverage['models/activity.js'][284]++;
    activityDict.duration = parseFloat(parameterDict.duration);
    _$jscoverage['models/activity.js'][285]++;
    if (activityDict.duration < 0) {
      _$jscoverage['models/activity.js'][286]++;
      respDict.errCode = 6;
      _$jscoverage['models/activity.js'][287]++;
      respDict.message = "invalid duration";
      _$jscoverage['models/activity.js'][288]++;
      callback(respDict);
      _$jscoverage['models/activity.js'][289]++;
      return;
    }
  }
  _$jscoverage['models/activity.js'][294]++;
  geddy.model.Activity.first(activityDict, (function (err, result) {
  _$jscoverage['models/activity.js'][296]++;
  if (result) {
    _$jscoverage['models/activity.js'][297]++;
    respDict.errCode = 10;
    _$jscoverage['models/activity.js'][298]++;
    respDict.message = "That Activity already exists.";
    _$jscoverage['models/activity.js'][299]++;
    callback(respDict);
  }
  else {
    _$jscoverage['models/activity.js'][306]++;
    var activityRecord = geddy.model.Activity.create(activityDict);
    _$jscoverage['models/activity.js'][311]++;
    geddy.model.Activity.save(activityRecord, (function (err, result) {
  _$jscoverage['models/activity.js'][313]++;
  if (err) {
    _$jscoverage['models/activity.js'][314]++;
    console.log("ERROR in Activity SAVE");
    _$jscoverage['models/activity.js'][315]++;
    for (var item in err) {
      _$jscoverage['models/activity.js'][316]++;
      console.log(item + " : " + err.item);
}
    _$jscoverage['models/activity.js'][318]++;
    respDict.errCode = 7;
    _$jscoverage['models/activity.js'][319]++;
    respDict.message = "database error";
    _$jscoverage['models/activity.js'][320]++;
    callback(respDict);
  }
  else {
    _$jscoverage['models/activity.js'][324]++;
    respDict.errCode = 1;
    _$jscoverage['models/activity.js'][325]++;
    callback(respDict);
  }
}));
  }
}));
});
_$jscoverage['models/activity.js'][332]++;
Activity.search = (function search(params, myLat, myLong, callback) {
  _$jscoverage['models/activity.js'][348]++;
  var respDict = {};
  _$jscoverage['models/activity.js'][350]++;
  if (typeof params !== "object") {
    _$jscoverage['models/activity.js'][352]++;
    respDict.errCode = 7;
    _$jscoverage['models/activity.js'][353]++;
    callback(respDict);
  }
  _$jscoverage['models/activity.js'][355]++;
  Activity.all(params, (function (err, activities) {
  _$jscoverage['models/activity.js'][357]++;
  if (err) {
    _$jscoverage['models/activity.js'][359]++;
    throw err;
  }
  _$jscoverage['models/activity.js'][361]++;
  if (myLat && myLong && (typeof myLat == "number") && (typeof myLong == "number")) {
    _$jscoverage['models/activity.js'][364]++;
    geoSearchHelper(activities, myLat, myLong, (function (returnRecords, count) {
  _$jscoverage['models/activity.js'][366]++;
  callback(returnRecords);
}));
  }
  else {
    _$jscoverage['models/activity.js'][372]++;
    callback(activities);
  }
}));
});
_$jscoverage['models/activity.js'][377]++;
Activity.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/activity.js'][378]++;
  geddy.model.Activity.all((function (err, result) {
  _$jscoverage['models/activity.js'][380]++;
  for (var activityModel in result) {
    _$jscoverage['models/activity.js'][382]++;
    geddy.model.Activity.remove(result[activityModel].id);
}
  _$jscoverage['models/activity.js'][384]++;
  var responseDict = {};
  _$jscoverage['models/activity.js'][385]++;
  responseDict.errCode = 1;
  _$jscoverage['models/activity.js'][386]++;
  callback(responseDict);
}));
});
_$jscoverage['models/activity.js'][390]++;
Activity = geddy.model.register("Activity", Activity);
_$jscoverage['models/activity.js'].source = ["/*jslint white: false */","/*jslint indent: 2 */","","var Activity = function () {","","  this.defineProperties({","    name: {type: 'string', required: 'true'},","    description: {type: 'string'},","    category: {type: 'string'},","    flag: {type: 'string', required: 'true'},","    time1: {type: 'number'},","    time2: {type: 'number'},","    begindate: {type: 'number'},","    enddate: {type: 'number'},","    lowprice: {type: 'number'},","    highprice: {type: 'number'},","    lownumparticipants: {type: 'number'},","    highnumparticipants: {type: 'number'},","    latitude: {type: 'number'},","    longitude: {type: 'number'},","    duration: {type: 'number'}","  });","","};","","var geoSearchHelper = function (records, lat, myLong, callback)","{","  var consDist = 69.1","    , consAng = 57.3","    , returnRecords = []","    , count = 0","    , idx;","  for (idx in records)","  {","    var record = records[idx];","    //using a geo dist equation","    var dist = Math.sqrt(Math.pow(record.latitude - lat, 2) + Math.pow((record.longitude - myLong) * Math.cos(lat / 57.3), 2));","    record.distance = dist*100;","    returnRecords.push(record);","    count = count + 1;","  }","  if (returnRecords.length &gt; 0){","    returnRecords.sort(function (recA, recB) {return recA.distance - recB.distance;});","  }","  // console.dir(returnRecords);","  callback(returnRecords, count);","};","","Activity.add = function (parameterDict, callback){","","  var self = this;","","  var respDict = {};","","  // console.log(\"reached model create\");","  // console.dir(parameterDict);","","","  var validCategories = [\"Sports\", \"Entertainment\", \"Food\", \"Arts\", \"Nature\"];","","  var activityDict = {};","","  //make sure required fields are defineed","","  //NAME","  if (!parameterDict.name) ","  {","    respDict.errCode = 6;","    respDict.message = \"null name\";","    callback(respDict);","    return;","  } ","  else ","  {","    activityDict.name = parameterDict.name;","  } ","","","  //DESCRIPTION","  if(parameterDict.description)","  {","    activityDict.description = parameterDict.description;","  }","","","  //CATEGORY","  if(!parameterDict.category) ","  {","    respDict.errCode = 6;","    respDict.message = \"null category\";","    callback(respDict);","    return;","  } ","  else if (validCategories.indexOf(parameterDict.category) === -1) ","  {","    respDict.errCode = 6;","    respDict.message = \"invalid category\";","    callback(respDict);","    return; ","  } ","  else ","  {","    activityDict.category = parameterDict.category;","  }","","  //FLAG","  if (!parameterDict.flag) ","  {","    respDict.errCode = 6;","    respDict.message = \"null flag\";","    callback(respDict);","    return;","  } ","  else if (parameterDict.flag !== 'startEnd' &amp;&amp; parameterDict.flag !== 'openClose' ","      &amp;&amp; parameterDict.flag !== 'anyTime' &amp;&amp;  parameterDict.flag !== 'dayTime' &amp;&amp; ","      parameterDict.flag !== 'nightTime') ","  {","    respDict.errCode = 6;","    respDict.message = \"invalid flag\";","    callback(respDict);","    return;","","  } ","  else ","  {","    activityDict.flag = parameterDict.flag;","  }","","","  //TIME 1 TIME 2","  if (parameterDict.flag === 'startEnd' || parameterDict.flag === 'openClose') ","  {","    ","    if(!parameterDict.time1) ","    {","      respDict.errCode = 6;","      respDict.message = \"null time1\";","      callback(respDict);","      return;","","    } ","    else if(!parameterDict.time2) ","    {","      respDict.errCode = 6;","      respDict.message = \"null time2\";","      callback(respDict);","      return;","    ","    } ","    else ","    {","      activityDict.time1 = parseFloat(parameterDict.time1);","      activityDict.time2 = parseFloat(parameterDict.time2);","","      if(activityDict.time1 &gt; activityDict.time2)","      {","        respDict.errCode = 6;","        respDict.message = \"invalid times\";","        callback(respDict);","        return;","      }","    }","  } ","","","  //BEGIN DATE AND END DATE","  if (parameterDict.begindate) ","  {","    parameterDict.begindate = parseFloat(parameterDict.begindate);","  } ","  if (parameterDict.enddate) ","  {","    parameterDict.enddate = parseFloat(parameterDict.enddate);","  } ","","  if(parameterDict.begindate &amp;&amp; parameterDict.enddate) ","  {","","    if (parameterDict.begindate &gt; parameterDict.enddate) ","    {","      respDict.errCode = 6;","      respDict.message = \"invalid dates\";","      callback(respDict);","      return;","    }","  }","","","  //PRICES","  // console.log(\"LOWPRICE = \" + parameterDict.lowprice);","  // console.log(\"HIGHPRICE = \" + parameterDict.highprice);","  if ((parameterDict.lowprice) === \"0\" || (parameterDict.lowprice === 0))","  {","    activityDict.lowprice = 0;","","  } else if (!parameterDict.lowprice) ","  {","    respDict.errCode = 6;","    respDict.message = \"null lowprice\";","    callback(respDict);","    return;","","  } ","  else ","  {","    activityDict.lowprice = parseFloat(parameterDict.lowprice);","  }","  if ((parameterDict.highprice === \"0\") || (parameterDict.highprice === 0))","  {","    activityDict.highprice = 0;","    ","  } else if (!parameterDict.highprice) ","  {","    respDict.errCode = 6;","    respDict.message = \"null highprice\";","    callback(respDict);","    return; ","","  } ","  else ","  {","    activityDict.highprice = parseFloat(parameterDict.highprice);","  }","","  if (activityDict.lowprice &gt; activityDict.highprice) ","  {","    respDict.errCode = 6;","    respDict.message = \"invalid prices\";","    callback(respDict);","    return;","  }","","","  //NUMBER OF PARTICIPANTS","  if (parameterDict.lownumparticipants) ","  {","    activityDict.lownumparticipants = parseFloat(parameterDict.lownumparticipants);","    if(activityDict.lownumparticipants &lt;= 0 )","    {","      respDict.errCode = 6;","      respDict.message = \"invalid participants\";","      callback(respDict);","      return;","    }","  }","","  if (parameterDict.highnumparticipants)","   {","    ","    activityDict.highnumparticipants = parseFloat(parameterDict.highnumparticipants);","    ","    if(activityDict.highnumparticipants &lt;= 0 )","    {","      respDict.errCode = 6;","      respDict.message = \"invalid participants\";","      callback(respDict);","      return;","    }","  }","","  if (parameterDict.lownumparticipants &amp;&amp; parameterDict.highnumparticipants) ","  {","    if(activityDict.lownumparticipants &gt; activityDict.highnumparticipants)","    {","      respDict.errCode = 6;","      respDict.message = \"invalid participants\";","      callback(respDict);","      return;","    }","  } ","","","  //LATTITUDE LONGITUDE","  if (parameterDict.latitude) {","    activityDict.latitude = parseFloat(parameterDict.latitude);","  }","  if (parameterDict.longitude) {","    activityDict.longitude = parseFloat(parameterDict.longitude);","  }","","","  //DURATION","  if(parameterDict.duration){","    activityDict.duration = parseFloat(parameterDict.duration);","    if(activityDict.duration &lt; 0 ){","      respDict.errCode = 6;","      respDict.message = \"invalid duration\";","      callback(respDict);","      return;","    }","  }","","  //Make sure does not exist","   geddy.model.Activity.first(activityDict,","    function (err, result) {","      if (result){","        respDict.errCode = 10;","        respDict.message = \"That Activity already exists.\";","        callback(respDict);","      } else {","        // console.log(\"activity does not exists yet, so we continue to create it\");","        //all checks pass","        // console.log(\"ACTIVITY DICT: \");","        // console.dir(activityDict);","","        var activityRecord = geddy.model.Activity.create(activityDict);","","        // console.log(\"ACTIVITY RECORD: \");","        // console.dir(activityRecord);","","        geddy.model.Activity.save(activityRecord, ","          function (err, result){","            if(err){","              console.log(\"ERROR in Activity SAVE\");","              for (var item in err){","                console.log(item + \" : \" + err.item);","              }","              respDict.errCode = 7;","              respDict.message = \"database error\";","              callback(respDict);","            } else {","","","              respDict.errCode = 1;","              callback(respDict);","            }","          });","      }","  });  ","};","","Activity.search = function search(params, myLat, myLong, callback)","{","  /** data is of the following form","  Name: string","  time1: time","  time2: time","  flag: string startEnd, openClose, anyTime, dayTime, nightTime","  begin_date: date","  end_date: date","  low_price: int","  high_price: int","  low_num_participants: int","  high_num_participants: int","  latitude: number","  longitude: number","  **/","  var respDict = {};","  //we want to just return values based on the name if they supply a name so we shouldnt look at max/min values just matching vals or none","  if (typeof params !== 'object')","  {","    respDict.errCode = 7;","    callback(respDict);","  }","  Activity.all(params, function (err, activities)","  {","    if(err)","    {","      throw err;","    }","    if(myLat &amp;&amp; myLong &amp;&amp; (typeof myLat == 'number') &amp;&amp; (typeof myLong == 'number'))","    {","      // console.log(\"Calling geoSearchHelper\");","      geoSearchHelper(activities, myLat, myLong, function (returnRecords, count)","      {","        callback(returnRecords);","      });","    }","    else","    {","      // console.log(\"Not using geoSearchHelper\");","      callback(activities);","    }","  });","};    ","","Activity.TESTAPI_resetFixture = function (callback) {","  geddy.model.Activity.all(function (err, result) {","    // console.log(\"got all activity models with error: \" + err + \" and result: \" + result);","    for (var activityModel in result){","      // console.log(\"trying to remove activityModel: \" + result[activityModel]);","      geddy.model.Activity.remove(result[activityModel].id);","    }","    var responseDict = {};","  responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};   ","","Activity = geddy.model.register('Activity', Activity);"];
}());

(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/event.js']) {
  _$jscoverage['models/event.js'] = [];
  _$jscoverage['models/event.js'][1] = 0;
  _$jscoverage['models/event.js'][3] = 0;
  _$jscoverage['models/event.js'][4] = 0;
  _$jscoverage['models/event.js'][5] = 0;
  _$jscoverage['models/event.js'][6] = 0;
  _$jscoverage['models/event.js'][8] = 0;
  _$jscoverage['models/event.js'][10] = 0;
  _$jscoverage['models/event.js'][44] = 0;
  _$jscoverage['models/event.js'][46] = 0;
  _$jscoverage['models/event.js'][48] = 0;
  _$jscoverage['models/event.js'][49] = 0;
  _$jscoverage['models/event.js'][51] = 0;
  _$jscoverage['models/event.js'][52] = 0;
  _$jscoverage['models/event.js'][54] = 0;
  _$jscoverage['models/event.js'][56] = 0;
  _$jscoverage['models/event.js'][58] = 0;
  _$jscoverage['models/event.js'][61] = 0;
  _$jscoverage['models/event.js'][62] = 0;
  _$jscoverage['models/event.js'][63] = 0;
  _$jscoverage['models/event.js'][64] = 0;
  _$jscoverage['models/event.js'][65] = 0;
  _$jscoverage['models/event.js'][66] = 0;
  _$jscoverage['models/event.js'][67] = 0;
  _$jscoverage['models/event.js'][68] = 0;
  _$jscoverage['models/event.js'][69] = 0;
  _$jscoverage['models/event.js'][70] = 0;
  _$jscoverage['models/event.js'][72] = 0;
  _$jscoverage['models/event.js'][74] = 0;
  _$jscoverage['models/event.js'][76] = 0;
  _$jscoverage['models/event.js'][81] = 0;
  _$jscoverage['models/event.js'][83] = 0;
  _$jscoverage['models/event.js'][85] = 0;
  _$jscoverage['models/event.js'][89] = 0;
  _$jscoverage['models/event.js'][91] = 0;
  _$jscoverage['models/event.js'][92] = 0;
  _$jscoverage['models/event.js'][94] = 0;
  _$jscoverage['models/event.js'][105] = 0;
  _$jscoverage['models/event.js'][110] = 0;
  _$jscoverage['models/event.js'][117] = 0;
  _$jscoverage['models/event.js'][122] = 0;
  _$jscoverage['models/event.js'][123] = 0;
  _$jscoverage['models/event.js'][127] = 0;
  _$jscoverage['models/event.js'][128] = 0;
  _$jscoverage['models/event.js'][129] = 0;
  _$jscoverage['models/event.js'][130] = 0;
  _$jscoverage['models/event.js'][132] = 0;
  _$jscoverage['models/event.js'][133] = 0;
  _$jscoverage['models/event.js'][136] = 0;
  _$jscoverage['models/event.js'][137] = 0;
  _$jscoverage['models/event.js'][141] = 0;
  _$jscoverage['models/event.js'][143] = 0;
  _$jscoverage['models/event.js'][145] = 0;
  _$jscoverage['models/event.js'][149] = 0;
  _$jscoverage['models/event.js'][152] = 0;
  _$jscoverage['models/event.js'][153] = 0;
  _$jscoverage['models/event.js'][157] = 0;
  _$jscoverage['models/event.js'][163] = 0;
  _$jscoverage['models/event.js'][164] = 0;
  _$jscoverage['models/event.js'][165] = 0;
  _$jscoverage['models/event.js'][166] = 0;
  _$jscoverage['models/event.js'][170] = 0;
  _$jscoverage['models/event.js'][171] = 0;
  _$jscoverage['models/event.js'][173] = 0;
  _$jscoverage['models/event.js'][174] = 0;
  _$jscoverage['models/event.js'][176] = 0;
  _$jscoverage['models/event.js'][178] = 0;
  _$jscoverage['models/event.js'][182] = 0;
  _$jscoverage['models/event.js'][184] = 0;
  _$jscoverage['models/event.js'][188] = 0;
  _$jscoverage['models/event.js'][190] = 0;
  _$jscoverage['models/event.js'][191] = 0;
  _$jscoverage['models/event.js'][193] = 0;
  _$jscoverage['models/event.js'][195] = 0;
  _$jscoverage['models/event.js'][196] = 0;
  _$jscoverage['models/event.js'][197] = 0;
  _$jscoverage['models/event.js'][203] = 0;
  _$jscoverage['models/event.js'][206] = 0;
  _$jscoverage['models/event.js'][209] = 0;
  _$jscoverage['models/event.js'][210] = 0;
  _$jscoverage['models/event.js'][212] = 0;
  _$jscoverage['models/event.js'][213] = 0;
  _$jscoverage['models/event.js'][214] = 0;
  _$jscoverage['models/event.js'][216] = 0;
  _$jscoverage['models/event.js'][219] = 0;
  _$jscoverage['models/event.js'][220] = 0;
  _$jscoverage['models/event.js'][221] = 0;
  _$jscoverage['models/event.js'][222] = 0;
  _$jscoverage['models/event.js'][225] = 0;
  _$jscoverage['models/event.js'][228] = 0;
  _$jscoverage['models/event.js'][229] = 0;
  _$jscoverage['models/event.js'][230] = 0;
  _$jscoverage['models/event.js'][231] = 0;
  _$jscoverage['models/event.js'][234] = 0;
  _$jscoverage['models/event.js'][237] = 0;
  _$jscoverage['models/event.js'][238] = 0;
  _$jscoverage['models/event.js'][239] = 0;
  _$jscoverage['models/event.js'][240] = 0;
  _$jscoverage['models/event.js'][244] = 0;
  _$jscoverage['models/event.js'][245] = 0;
  _$jscoverage['models/event.js'][246] = 0;
  _$jscoverage['models/event.js'][248] = 0;
  _$jscoverage['models/event.js'][249] = 0;
  _$jscoverage['models/event.js'][252] = 0;
  _$jscoverage['models/event.js'][255] = 0;
  _$jscoverage['models/event.js'][261] = 0;
  _$jscoverage['models/event.js'][263] = 0;
  _$jscoverage['models/event.js'][264] = 0;
  _$jscoverage['models/event.js'][265] = 0;
  _$jscoverage['models/event.js'][266] = 0;
  _$jscoverage['models/event.js'][267] = 0;
  _$jscoverage['models/event.js'][271] = 0;
  _$jscoverage['models/event.js'][273] = 0;
  _$jscoverage['models/event.js'][278] = 0;
  _$jscoverage['models/event.js'][279] = 0;
  _$jscoverage['models/event.js'][280] = 0;
  _$jscoverage['models/event.js'][281] = 0;
  _$jscoverage['models/event.js'][286] = 0;
  _$jscoverage['models/event.js'][289] = 0;
  _$jscoverage['models/event.js'][291] = 0;
  _$jscoverage['models/event.js'][292] = 0;
  _$jscoverage['models/event.js'][297] = 0;
  _$jscoverage['models/event.js'][302] = 0;
  _$jscoverage['models/event.js'][310] = 0;
  _$jscoverage['models/event.js'][319] = 0;
  _$jscoverage['models/event.js'][320] = 0;
  _$jscoverage['models/event.js'][321] = 0;
  _$jscoverage['models/event.js'][322] = 0;
  _$jscoverage['models/event.js'][323] = 0;
  _$jscoverage['models/event.js'][324] = 0;
  _$jscoverage['models/event.js'][326] = 0;
  _$jscoverage['models/event.js'][327] = 0;
  _$jscoverage['models/event.js'][328] = 0;
  _$jscoverage['models/event.js'][331] = 0;
  _$jscoverage['models/event.js'][341] = 0;
  _$jscoverage['models/event.js'][342] = 0;
  _$jscoverage['models/event.js'][346] = 0;
  _$jscoverage['models/event.js'][351] = 0;
  _$jscoverage['models/event.js'][352] = 0;
  _$jscoverage['models/event.js'][353] = 0;
  _$jscoverage['models/event.js'][354] = 0;
  _$jscoverage['models/event.js'][357] = 0;
  _$jscoverage['models/event.js'][358] = 0;
  _$jscoverage['models/event.js'][360] = 0;
  _$jscoverage['models/event.js'][361] = 0;
  _$jscoverage['models/event.js'][364] = 0;
  _$jscoverage['models/event.js'][365] = 0;
  _$jscoverage['models/event.js'][366] = 0;
  _$jscoverage['models/event.js'][369] = 0;
  _$jscoverage['models/event.js'][370] = 0;
  _$jscoverage['models/event.js'][371] = 0;
  _$jscoverage['models/event.js'][372] = 0;
  _$jscoverage['models/event.js'][373] = 0;
  _$jscoverage['models/event.js'][374] = 0;
  _$jscoverage['models/event.js'][375] = 0;
  _$jscoverage['models/event.js'][376] = 0;
  _$jscoverage['models/event.js'][377] = 0;
  _$jscoverage['models/event.js'][378] = 0;
  _$jscoverage['models/event.js'][379] = 0;
  _$jscoverage['models/event.js'][380] = 0;
  _$jscoverage['models/event.js'][381] = 0;
  _$jscoverage['models/event.js'][382] = 0;
  _$jscoverage['models/event.js'][384] = 0;
  _$jscoverage['models/event.js'][385] = 0;
  _$jscoverage['models/event.js'][390] = 0;
  _$jscoverage['models/event.js'][397] = 0;
  _$jscoverage['models/event.js'][398] = 0;
  _$jscoverage['models/event.js'][399] = 0;
  _$jscoverage['models/event.js'][400] = 0;
  _$jscoverage['models/event.js'][401] = 0;
  _$jscoverage['models/event.js'][417] = 0;
  _$jscoverage['models/event.js'][418] = 0;
  _$jscoverage['models/event.js'][420] = 0;
  _$jscoverage['models/event.js'][422] = 0;
  _$jscoverage['models/event.js'][424] = 0;
  _$jscoverage['models/event.js'][425] = 0;
  _$jscoverage['models/event.js'][426] = 0;
  _$jscoverage['models/event.js'][430] = 0;
}
_$jscoverage['models/event.js'][1]++;
var nodemailer = require("nodemailer"), check = require("validator").check;
_$jscoverage['models/event.js'][3]++;
var incorrectParams = {errCode: 6};
_$jscoverage['models/event.js'][4]++;
var backendError = {errCode: 7};
_$jscoverage['models/event.js'][5]++;
var badTimes = {errCode: 8};
_$jscoverage['models/event.js'][6]++;
var badTableJoin = {errCode: 9};
_$jscoverage['models/event.js'][8]++;
var Event = (function () {
  _$jscoverage['models/event.js'][10]++;
  this.defineProperties({name: {type: "string", required: true}, description: {type: "string"}, time1: {type: "number"}, time2: {type: "number"}, begindate: {type: "number"}, enddate: {type: "number"}, activityid: {type: "string"}, attendingusers: {type: "string"}});
});
_$jscoverage['models/event.js'][44]++;
Event.add = (function (params, callback) {
  _$jscoverage['models/event.js'][46]++;
  if (params.name && params.startdate && params.enddate && params.time1 && params.time2 && params.activityid && params.attendingusers) {
    _$jscoverage['models/event.js'][48]++;
    var usernamesOrEmails = params.attendingusers.split(",");
    _$jscoverage['models/event.js'][49]++;
    getEmailAndId(usernamesOrEmails, callback, (function (emailAndId) {
  _$jscoverage['models/event.js'][51]++;
  var emails = emailAndId.email;
  _$jscoverage['models/event.js'][52]++;
  var userIds = emailAndId.id;
  _$jscoverage['models/event.js'][54]++;
  geddy.model.Activity.first({id: params.activityid}, (function (err, activityRecord) {
  _$jscoverage['models/event.js'][56]++;
  if (activityRecord && activityRecord.name) {
    _$jscoverage['models/event.js'][58]++;
    if (params.startdate <= params.enddate && params.time1 <= params.time2) {
      _$jscoverage['models/event.js'][61]++;
      eventDict = {};
      _$jscoverage['models/event.js'][62]++;
      eventDict.name = params.name;
      _$jscoverage['models/event.js'][63]++;
      eventDict.startdate = params.startdate;
      _$jscoverage['models/event.js'][64]++;
      eventDict.enddate = params.enddate;
      _$jscoverage['models/event.js'][65]++;
      eventDict.time1 = params.time1;
      _$jscoverage['models/event.js'][66]++;
      eventDict.time2 = params.time2;
      _$jscoverage['models/event.js'][67]++;
      eventDict.description = params.description;
      _$jscoverage['models/event.js'][68]++;
      eventDict.activityid = params.activityid;
      _$jscoverage['models/event.js'][69]++;
      eventDict.attendingusers = userIds.toString();
      _$jscoverage['models/event.js'][70]++;
      var eventRecord = geddy.model.Event.create(eventDict);
      _$jscoverage['models/event.js'][72]++;
      geddy.model.Event.save(eventRecord, (function (err, result) {
  _$jscoverage['models/event.js'][74]++;
  if (err) {
    _$jscoverage['models/event.js'][76]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][81]++;
    geddy.model.Event.first({attendingusers: userIds.toString()}, (function (err, eventRecord) {
  _$jscoverage['models/event.js'][83]++;
  if (err) {
    _$jscoverage['models/event.js'][85]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][89]++;
    addEventToUsers(eventRecord.id, userIds, (function (respDict) {
  _$jscoverage['models/event.js'][91]++;
  var message = "People want you to join the following activity: " + activityRecord.name;
  _$jscoverage['models/event.js'][92]++;
  invite({eventid: eventRecord.id, emails: emails, message: message}, (function () {
  _$jscoverage['models/event.js'][94]++;
  callback(respDict);
}));
}));
  }
}));
  }
}));
    }
    else {
      _$jscoverage['models/event.js'][105]++;
      callback(badTimes);
    }
  }
  else {
    _$jscoverage['models/event.js'][110]++;
    callback(badTableJoin);
  }
}));
}));
  }
  else {
    _$jscoverage['models/event.js'][117]++;
    callback(incorrectParams);
  }
});
_$jscoverage['models/event.js'][122]++;
function invite(params, callback) {
  _$jscoverage['models/event.js'][123]++;
  callback();
}
_$jscoverage['models/event.js'][127]++;
function getEmailAndId(usernamesOrEmails, errorCallback, successCallback) {
  _$jscoverage['models/event.js'][128]++;
  emails = [];
  _$jscoverage['models/event.js'][129]++;
  userIds = [];
  _$jscoverage['models/event.js'][130]++;
  for (var key in usernamesOrEmails) {
    _$jscoverage['models/event.js'][132]++;
    var name = usernamesOrEmails[key];
    _$jscoverage['models/event.js'][133]++;
    if (name.indexOf("@") >= 0) {
      _$jscoverage['models/event.js'][136]++;
      emails.push(name);
      _$jscoverage['models/event.js'][137]++;
      continue;
    }
    else {
      _$jscoverage['models/event.js'][141]++;
      geddy.model.User.first({username: name}, (function (err, record) {
  _$jscoverage['models/event.js'][143]++;
  if (err) {
    _$jscoverage['models/event.js'][145]++;
    errorCallback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][149]++;
    if (record && record.email && record.id) {
      _$jscoverage['models/event.js'][152]++;
      emails.push(record.email);
      _$jscoverage['models/event.js'][153]++;
      userIds.push(record.id);
    }
    else {
      _$jscoverage['models/event.js'][157]++;
      errorCallback(badTableJoin);
    }
  }
}));
    }
}
  _$jscoverage['models/event.js'][163]++;
  result = {};
  _$jscoverage['models/event.js'][164]++;
  result.email = emails;
  _$jscoverage['models/event.js'][165]++;
  result.id = userIds;
  _$jscoverage['models/event.js'][166]++;
  successCallback(result);
}
_$jscoverage['models/event.js'][170]++;
function addEventToUsers(eventId, userIds, callback) {
  _$jscoverage['models/event.js'][171]++;
  for (var key in userIds) {
    _$jscoverage['models/event.js'][173]++;
    var uid = userIds[key];
    _$jscoverage['models/event.js'][174]++;
    geddy.model.User.first({id: uid}, (function (err, record) {
  _$jscoverage['models/event.js'][176]++;
  if (err) {
    _$jscoverage['models/event.js'][178]++;
    callback(backendError);
  }
  else {
    _$jscoverage['models/event.js'][182]++;
    if (record.myevents) {
      _$jscoverage['models/event.js'][184]++;
      record.myevents += "," + eventId;
    }
    else {
      _$jscoverage['models/event.js'][188]++;
      record.myevents = eventId;
    }
    _$jscoverage['models/event.js'][190]++;
    record.confirmPassword = record.password;
    _$jscoverage['models/event.js'][191]++;
    geddy.model.User.save(record, (function (err, result) {
  _$jscoverage['models/event.js'][193]++;
  if (err) {
    _$jscoverage['models/event.js'][195]++;
    console.log("err ");
    _$jscoverage['models/event.js'][196]++;
    console.dir(err);
    _$jscoverage['models/event.js'][197]++;
    callback(backendError);
  }
}));
  }
}));
}
  _$jscoverage['models/event.js'][203]++;
  callback({errCode: 1});
}
_$jscoverage['models/event.js'][206]++;
Event.invite = (function (params, callback) {
  _$jscoverage['models/event.js'][209]++;
  var self = this;
  _$jscoverage['models/event.js'][210]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][212]++;
  var eventID = params.eventid;
  _$jscoverage['models/event.js'][213]++;
  var emailList = params.emails;
  _$jscoverage['models/event.js'][214]++;
  var message = params.message;
  _$jscoverage['models/event.js'][216]++;
  if (eventID === null || eventID === undefined) {
    _$jscoverage['models/event.js'][219]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][220]++;
    responseDict.message = "null eventid";
    _$jscoverage['models/event.js'][221]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][222]++;
    return;
  }
  _$jscoverage['models/event.js'][225]++;
  if (emailList === null || emailList === undefined || emailList === []) {
    _$jscoverage['models/event.js'][228]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][229]++;
    responseDict.message = "null emails";
    _$jscoverage['models/event.js'][230]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][231]++;
    return;
  }
  _$jscoverage['models/event.js'][234]++;
  if (message === null || message === undefined) {
    _$jscoverage['models/event.js'][237]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][238]++;
    responseDict.message = "null message";
    _$jscoverage['models/event.js'][239]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][240]++;
    return;
  }
  _$jscoverage['models/event.js'][244]++;
  var badEmails = [];
  _$jscoverage['models/event.js'][245]++;
  var goodEmailsString = "";
  _$jscoverage['models/event.js'][246]++;
  for (var index in emailList) {
    _$jscoverage['models/event.js'][248]++;
    var emailAddr = emailList[index];
    _$jscoverage['models/event.js'][249]++;
    if (! isValidEmail(emailAddr)) {
      _$jscoverage['models/event.js'][252]++;
      badEmails.push(emailAddr);
    }
    else {
      _$jscoverage['models/event.js'][255]++;
      goodEmailsString += emailAddr + ", ";
    }
}
  _$jscoverage['models/event.js'][261]++;
  if (badEmails.count > 0) {
    _$jscoverage['models/event.js'][263]++;
    responseDict.errCode = 12;
    _$jscoverage['models/event.js'][264]++;
    responseDict.message = "malformed emails";
    _$jscoverage['models/event.js'][265]++;
    responseDict.bademails = badEmails;
    _$jscoverage['models/event.js'][266]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][267]++;
    return;
  }
  _$jscoverage['models/event.js'][271]++;
  if (goodEmailsString.length > 2) {
    _$jscoverage['models/event.js'][273]++;
    goodEmailsString = goodEmailsString.substring(0, goodEmailsString.length - 3);
  }
  else {
    _$jscoverage['models/event.js'][278]++;
    responseDict.errCode = 6;
    _$jscoverage['models/event.js'][279]++;
    responseDict.message = "couldn't find any good emails";
    _$jscoverage['models/event.js'][280]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][281]++;
    return;
  }
  _$jscoverage['models/event.js'][286]++;
  geddy.model.Event.first({id: eventID}, (function (err, result) {
  _$jscoverage['models/event.js'][289]++;
  if (err) {
    _$jscoverage['models/event.js'][291]++;
    responseDict.errCode = 10;
    _$jscoverage['models/event.js'][292]++;
    responseDict.message = "invalid eventid";
  }
  else {
    _$jscoverage['models/event.js'][297]++;
    if (result) {
      _$jscoverage['models/event.js'][302]++;
      var smtpTransport = nodemailer.createTransport("SMTP", {service: "Gmail", auth: {user: "groupactivityplanner@gmail.com", pass: "gapgapgap"}});
      _$jscoverage['models/event.js'][310]++;
      var mailOptions = {from: "Group Activity Planner \u00e2\u009c\u0094 <groupactivityplanner@gmail.com>", to: goodEmailsString, subject: "You have been invited to an event!", text: message, html: null};
      _$jscoverage['models/event.js'][319]++;
      smtpTransport.sendMail(mailOptions, (function (error, response) {
  _$jscoverage['models/event.js'][320]++;
  if (error) {
    _$jscoverage['models/event.js'][321]++;
    responseDict.errCode = 13;
    _$jscoverage['models/event.js'][322]++;
    responseDict.message = "email failed";
    _$jscoverage['models/event.js'][323]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][324]++;
    return;
  }
  else {
    _$jscoverage['models/event.js'][326]++;
    responseDict.errCode = 1;
    _$jscoverage['models/event.js'][327]++;
    callback(responseDict);
    _$jscoverage['models/event.js'][328]++;
    return;
  }
  _$jscoverage['models/event.js'][331]++;
  smtpTransport.close();
}));
    }
  }
}));
});
_$jscoverage['models/event.js'][341]++;
function isValidEmail(email) {
  _$jscoverage['models/event.js'][342]++;
  return check(email).isEmail();
}
_$jscoverage['models/event.js'][346]++;
Event.changeDateTime = (function (params, callback) {
});
_$jscoverage['models/event.js'][351]++;
Event.getMyEvents = (function (params, callback) {
  _$jscoverage['models/event.js'][352]++;
  geddy.model.User.first({id: params.userId}, (function (err, userModel) {
  _$jscoverage['models/event.js'][353]++;
  if (err) {
    _$jscoverage['models/event.js'][354]++;
    responseDict.events = [];
    _$jscoverage['models/event.js'][357]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][358]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/event.js'][360]++;
    if (err) {
      _$jscoverage['models/event.js'][361]++;
      responseDict.events = [];
      _$jscoverage['models/event.js'][364]++;
      responseDict.errCode = 7;
      _$jscoverage['models/event.js'][365]++;
      callback(responseDict);
    }
    else {
      _$jscoverage['models/event.js'][366]++;
      if (userModel) {
        _$jscoverage['models/event.js'][369]++;
        var myEvents = [];
        _$jscoverage['models/event.js'][370]++;
        if (userModel.myevents) {
          _$jscoverage['models/event.js'][371]++;
          var eventIds = userModel.myevents.split(",");
          _$jscoverage['models/event.js'][372]++;
          for (var index in eventIds) {
            _$jscoverage['models/event.js'][373]++;
            var eventId = eventIds[index];
            _$jscoverage['models/event.js'][374]++;
            geddy.model.Event.first({id: eventId}, (function (err, eventModel) {
  _$jscoverage['models/event.js'][375]++;
  if (err) {
    _$jscoverage['models/event.js'][376]++;
    responseDict.events = [];
    _$jscoverage['models/event.js'][377]++;
    console.log("err exists: ");
    _$jscoverage['models/event.js'][378]++;
    console.dir(err);
    _$jscoverage['models/event.js'][379]++;
    responseDict.errCode = 7;
    _$jscoverage['models/event.js'][380]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/event.js'][381]++;
    if (eventModel) {
      _$jscoverage['models/event.js'][382]++;
      myEvents.push(eventModel);
    }
  }
  _$jscoverage['models/event.js'][384]++;
  if (index == eventIds.length - 1) {
    _$jscoverage['models/event.js'][385]++;
    getEventsCallback(1, myEvents, callback);
  }
}));
}
        }
        else {
          _$jscoverage['models/event.js'][390]++;
          getEventsCallback(1, myEvents, callback);
        }
      }
    }
  }
}));
});
_$jscoverage['models/event.js'][397]++;
function getEventsCallback(errCode, events, callback) {
  _$jscoverage['models/event.js'][398]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][399]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][400]++;
  responseDict.events = events;
  _$jscoverage['models/event.js'][401]++;
  callback(responseDict);
}
_$jscoverage['models/event.js'][417]++;
Event.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/event.js'][418]++;
  geddy.model.Event.all((function (err, result) {
  _$jscoverage['models/event.js'][420]++;
  for (var eventModel in result) {
    _$jscoverage['models/event.js'][422]++;
    geddy.model.Event.remove(result[eventModel].id);
}
  _$jscoverage['models/event.js'][424]++;
  var responseDict = {};
  _$jscoverage['models/event.js'][425]++;
  responseDict.errCode = 1;
  _$jscoverage['models/event.js'][426]++;
  callback(responseDict);
}));
});
_$jscoverage['models/event.js'][430]++;
Event = geddy.model.register("Event", Event);
_$jscoverage['models/event.js'].source = ["var nodemailer = require(\"nodemailer\")","  , check = require(\"validator\").check;","var incorrectParams = {errCode: 6};","var backendError = {errCode: 7};","var badTimes = {errCode: 8};","var badTableJoin = {errCode: 9};","","var Event = function () {","","  this.defineProperties({","    name: {type: 'string', required: true},","    description: {type: 'string'},","    time1: {type: 'number'},","    time2: {type: 'number'},","    begindate: {type: 'number'},","    enddate: {type: 'number'},","    activityid: {type: 'string'},","    attendingusers: {type: 'string'}","  });","","  /*","  this.property('login', 'string', {required: true});","  this.property('password', 'string', {required: true});","  this.property('lastName', 'string');","  this.property('firstName', 'string');","","  this.validatesPresent('login');","  this.validatesFormat('login', /[a-z]+/, {message: 'Subdivisions!'});","  this.validatesLength('login', {min: 3});","  // Use with the name of the other parameter to compare with","  this.validatesConfirmed('password', 'confirmPassword');","  // Use with any function that returns a Boolean","  this.validatesWithFunction('password', function (s) {","      return s.length &gt; 0;","  });","","  // Can define methods for instances like this","  this.someMethod = function () {","    // Do some stuff","  };","  */","};","","Event.add = function(params, callback)","{","  if(params.name &amp;&amp; params.startdate &amp;&amp; params.enddate &amp;&amp; params.time1  &amp;&amp; params.time2 &amp;&amp; params.activityid &amp;&amp; params.attendingusers)","  {","    var usernamesOrEmails = params.attendingusers.split(',');","    getEmailAndId(usernamesOrEmails, callback, function(emailAndId)","    {","      var emails = emailAndId.email;","      var userIds = emailAndId.id;","","      geddy.model.Activity.first({id: params.activityid}, function(err, activityRecord)","      {","        if(activityRecord &amp;&amp;  activityRecord.name) //basic assertion that record exists","        {","          if(params.startdate &lt;= params.enddate &amp;&amp; params.time1 &lt;= params.time2)","          {","            //all required fields are valid","            eventDict = {};","            eventDict.name = params.name;","            eventDict.startdate = params.startdate;","            eventDict.enddate = params.enddate;","            eventDict.time1 = params.time1;","            eventDict.time2 = params.time2;","            eventDict.description = params.description;","            eventDict.activityid = params.activityid;","            eventDict.attendingusers = userIds.toString();","            var eventRecord = geddy.model.Event.create(eventDict);","","            geddy.model.Event.save(eventRecord, function(err, result)","            {","              if(err)","              {","                callback(backendError);","              }","              else","              {","                //now we have to add the eventRecord to each user","                geddy.model.Event.first({attendingusers: userIds.toString()}, function(err, eventRecord)","                {","                  if(err)","                  {","                    callback(backendError);","                  }","                  else","                  {","                    addEventToUsers(eventRecord.id, userIds, function(respDict)","                    {","                      var message = \"People want you to join the following activity: \"+activityRecord.name;","                      invite({eventid: eventRecord.id, emails: emails , message: message}, function()","                      {","                        callback(respDict);","                      });","                    });","                  }","","                });","              }","            });","          }","          else","          {","            callback(badTimes);","          }","        }","        else","        {","          callback(badTableJoin);","        }","      });","    });","  }","  else","  {","    callback(incorrectParams);","  }","};","","function invite(params, callback)","{","  callback();","}","","function getEmailAndId(usernamesOrEmails, errorCallback, successCallback)","{","  emails = [];","  userIds = [];","  for(var key in usernamesOrEmails)","  {","    var name = usernamesOrEmails[key];","    if(name.indexOf('@') &gt;= 0) //special characters cant be in usernames only in emails","    {","      //console.log('EMAIL found is: '+name);","      emails.push(name);","      continue;","    }","    else","    {","      geddy.model.User.first({username: name}, function(err, record)","      {","          if(err)","          {","            errorCallback(backendError);","          }","          else","          {","            if(record &amp;&amp; record.email &amp;&amp; record.id)","            {","              //console.log('EMAIL found is: '+record.email);","              emails.push(record.email);","              userIds.push(record.id);","            }","            else","            {","              errorCallback(badTableJoin);","            }","          }","        });","      }","    }","    result = {};","    result.email = emails;","    result.id = userIds;","    successCallback(result);","}","","function addEventToUsers(eventId, userIds, callback)","{","  for(var key in userIds)","  {","    var uid = userIds[key];","    geddy.model.User.first({id: uid}, function(err, record)","    {","      if(err)","      {","        callback(backendError);","      }","      else","      {","        if(record.myevents)","        {","          record.myevents += \",\"+eventId;","        }","        else","        {","          record.myevents = eventId;","        }","        record.confirmPassword = record.password;","        geddy.model.User.save(record, function(err, result)","        {","          if(err)","          {","            console.log(\"err \");","            console.dir(err);","            callback(backendError);","          }","        });","      }","    });","  }","  callback({errCode: 1}); //success!","}","","Event.invite = function(params, callback) ","{","  //send email containing \"message\" to list of emails","  var self = this;","  var responseDict = {};","","  var eventID = params.eventid;","  var emailList = params.emails;","  var message = params.message;","","  if (eventID === null || eventID === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null eventid\";","    callback(responseDict);","    return;","  } ","","  if (emailList === null || emailList === undefined || emailList === [] ) ","  {","    //handle empty emails","    responseDict.errCode = 6;","    responseDict.message = \"null emails\";","    callback(responseDict);","    return;","  } ","","  if (message === null || message === undefined ) ","  {","    //handle null eventid","    responseDict.errCode = 6;","    responseDict.message = \"null message\";","    callback(responseDict);","    return;","  } ","","  //check all emails for propper form","  var badEmails = [];","  var goodEmailsString = \"\";","  for(var index in emailList)","  {","    var emailAddr = emailList[index];","    if (!isValidEmail(emailAddr))","    {","      //email address is malformed","      badEmails.push(emailAddr);","    } else {","","      goodEmailsString += emailAddr + \", \";","","    }","  }","","  //some emails are bad","  if(badEmails.count &gt; 0 ){","","    responseDict.errCode = 12;","    responseDict.message = \"malformed emails\";","    responseDict.bademails = badEmails;","    callback(responseDict);","    return;","  }","","  //chop off the \", \" at the end of the string","  if(goodEmailsString.length &gt; 2)","  {","    goodEmailsString = goodEmailsString.substring(0,goodEmailsString.length-3);","  } ","  else","  {","","    responseDict.errCode = 6;","    responseDict.message = \"couldn't find any good emails\";","    callback(responseDict);","    return;","  } ","","","","  geddy.model.Event.first({id: eventID}, function (err, result) ","    {","","      if(err){","        //handle error","        responseDict.errCode = 10;","        responseDict.message = \"invalid eventid\";","      } ","      else ","      {","","        if(result)","        {","          //invite all emails","","            // create reusable transport method (opens pool of SMTP connections)","          var smtpTransport = nodemailer.createTransport(\"SMTP\",{","              service: \"Gmail\",","              auth: {","                  user: \"groupactivityplanner@gmail.com\",","                  pass: \"gapgapgap\"","              }","          });","","          var mailOptions = {","              from: \"Group Activity Planner &#226;&#156;&#148; &lt;groupactivityplanner@gmail.com&gt;\", // sender address","              to: goodEmailsString, // list of receivers","              subject: \"You have been invited to an event!\", // Subject line","              text: message, // plaintext body","              html: null // html body","          };","","          // send mail with defined transport object","          smtpTransport.sendMail(mailOptions, function(error, response){","              if(error){","                  responseDict.errCode = 13;","                  responseDict.message = \"email failed\";","                  callback(responseDict);","                  return;","              }else{","                  responseDict.errCode = 1;","                  callback(responseDict);","                  return;","              }","","              smtpTransport.close();","","          });","","        }","      }","","    });","};","","function isValidEmail(email) { ","  return check(email).isEmail();","","} ","","Event.changeDateTime = function(params, callback) ","{","","};","","Event.getMyEvents = function (params, callback) {","  geddy.model.User.first({id: params.userId}, function (err, userModel) {","    if (err){","      responseDict.events = [];","      // console.log(\"err exists: \");","      // console.dir(err);","      responseDict.errCode = 7;","      callback(responseDict);","    } else {","      if (err){","        responseDict.events = [];","        // console.log(\"err exists: \");","        // console.dir(err);","        responseDict.errCode = 7;","        callback(responseDict);","      } else if (userModel){","        // console.log(\"myevents = \");","        // console.dir(userModel.myevents);","        var myEvents = [];","        if (userModel.myevents){","          var eventIds = userModel.myevents.split(',');","          for (var index in eventIds){","            var eventId = eventIds[index];","            geddy.model.Event.first({id: eventId}, function (err, eventModel){","              if (err){","                responseDict.events = [];","                console.log(\"err exists: \");","                console.dir(err);","                responseDict.errCode = 7;","                callback(responseDict);","              } else if (eventModel){","                myEvents.push(eventModel);","              }","              if (index == eventIds.length - 1){","                getEventsCallback(1, myEvents, callback);","              }","            });","          }","        } else {","          getEventsCallback(1, myEvents, callback);","        }","      }","    }","  });","};","","function getEventsCallback(errCode, events, callback){","  var responseDict = {};","  responseDict.errCode = 1;","  responseDict.events = events;","  callback(responseDict);","}","","  ","/*","// Can also define them on the prototype","Event.prototype.someOtherMethod = function () {","  // Do some other stuff","};","// Can also define static methods and properties","Event.someStaticMethod = function () {","  // Do some other stuff","};","Event.someStaticProperty = 'YYZ';","*/","","Event.TESTAPI_resetFixture = function (callback) {","  geddy.model.Event.all(function (err, result) {","    // console.log(\"got all activity models with error: \" + err + \" and result: \" + result);","    for (var eventModel in result){","      // console.log(\"trying to remove activityModel: \" + result[activityModel]);","      geddy.model.Event.remove(result[eventModel].id);","    }","    var responseDict = {};","    responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};  ","","Event = geddy.model.register('Event', Event);",""];
}());

(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/passport.js']) {
  _$jscoverage['models/passport.js'] = [];
  _$jscoverage['models/passport.js'][1] = 0;
  _$jscoverage['models/passport.js'][2] = 0;
  _$jscoverage['models/passport.js'][3] = 0;
  _$jscoverage['models/passport.js'][5] = 0;
  _$jscoverage['models/passport.js'][8] = 0;
}
_$jscoverage['models/passport.js'][1]++;
var Passport = (function () {
  _$jscoverage['models/passport.js'][2]++;
  this.property("authType", "string");
  _$jscoverage['models/passport.js'][3]++;
  this.property("key", "string");
  _$jscoverage['models/passport.js'][5]++;
  this.belongsTo("User");
});
_$jscoverage['models/passport.js'][8]++;
Passport = geddy.model.register("Passport", Passport);
_$jscoverage['models/passport.js'].source = ["var Passport = function () {","  this.property('authType', 'string');","  this.property('key', 'string');","","  this.belongsTo('User');","};","","Passport = geddy.model.register('Passport', Passport);",""];
}());

(function () {
/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['models/user.js']) {
  _$jscoverage['models/user.js'] = [];
  _$jscoverage['models/user.js'][1] = 0;
  _$jscoverage['models/user.js'][5] = 0;
  _$jscoverage['models/user.js'][6] = 0;
  _$jscoverage['models/user.js'][7] = 0;
  _$jscoverage['models/user.js'][8] = 0;
  _$jscoverage['models/user.js'][9] = 0;
  _$jscoverage['models/user.js'][10] = 0;
  _$jscoverage['models/user.js'][11] = 0;
  _$jscoverage['models/user.js'][12] = 0;
  _$jscoverage['models/user.js'][13] = 0;
  _$jscoverage['models/user.js'][14] = 0;
  _$jscoverage['models/user.js'][16] = 0;
  _$jscoverage['models/user.js'][19] = 0;
  _$jscoverage['models/user.js'][21] = 0;
  _$jscoverage['models/user.js'][22] = 0;
  _$jscoverage['models/user.js'][23] = 0;
  _$jscoverage['models/user.js'][26] = 0;
  _$jscoverage['models/user.js'][27] = 0;
  _$jscoverage['models/user.js'][32] = 0;
  _$jscoverage['models/user.js'][34] = 0;
  _$jscoverage['models/user.js'][35] = 0;
  _$jscoverage['models/user.js'][36] = 0;
  _$jscoverage['models/user.js'][40] = 0;
  _$jscoverage['models/user.js'][41] = 0;
  _$jscoverage['models/user.js'][43] = 0;
  _$jscoverage['models/user.js'][44] = 0;
  _$jscoverage['models/user.js'][47] = 0;
  _$jscoverage['models/user.js'][49] = 0;
  _$jscoverage['models/user.js'][52] = 0;
  _$jscoverage['models/user.js'][53] = 0;
  _$jscoverage['models/user.js'][54] = 0;
  _$jscoverage['models/user.js'][55] = 0;
  _$jscoverage['models/user.js'][57] = 0;
  _$jscoverage['models/user.js'][58] = 0;
  _$jscoverage['models/user.js'][59] = 0;
  _$jscoverage['models/user.js'][64] = 0;
  _$jscoverage['models/user.js'][65] = 0;
  _$jscoverage['models/user.js'][74] = 0;
  _$jscoverage['models/user.js'][76] = 0;
  _$jscoverage['models/user.js'][77] = 0;
  _$jscoverage['models/user.js'][79] = 0;
  _$jscoverage['models/user.js'][81] = 0;
  _$jscoverage['models/user.js'][83] = 0;
  _$jscoverage['models/user.js'][87] = 0;
  _$jscoverage['models/user.js'][88] = 0;
  _$jscoverage['models/user.js'][90] = 0;
  _$jscoverage['models/user.js'][92] = 0;
  _$jscoverage['models/user.js'][94] = 0;
  _$jscoverage['models/user.js'][95] = 0;
  _$jscoverage['models/user.js'][96] = 0;
  _$jscoverage['models/user.js'][100] = 0;
}
_$jscoverage['models/user.js'][1]++;
var passport = require("passport"), passportHelper = require("../helpers/passport/index"), cryptPass = passportHelper.cryptPass;
_$jscoverage['models/user.js'][5]++;
var User = (function () {
  _$jscoverage['models/user.js'][6]++;
  this.property("username", "string", {required: true});
  _$jscoverage['models/user.js'][7]++;
  this.property("password", "string", {required: true});
  _$jscoverage['models/user.js'][8]++;
  this.property("familyName", "string");
  _$jscoverage['models/user.js'][9]++;
  this.property("givenName", "string");
  _$jscoverage['models/user.js'][10]++;
  this.property("email", "string");
  _$jscoverage['models/user.js'][11]++;
  this.property("myevents", "string");
  _$jscoverage['models/user.js'][12]++;
  this.validatesLength("username", {min: 3, max: 128});
  _$jscoverage['models/user.js'][13]++;
  this.validatesLength("password", {min: 8, max: 128});
  _$jscoverage['models/user.js'][14]++;
  this.validatesConfirmed("password", "confirmPassword");
  _$jscoverage['models/user.js'][16]++;
  this.hasMany("Passports");
});
_$jscoverage['models/user.js'][19]++;
User.add = (function (user, callback) {
  _$jscoverage['models/user.js'][21]++;
  User.first({username: user.username}, (function (err, data) {
  _$jscoverage['models/user.js'][22]++;
  var responseDict = {};
  _$jscoverage['models/user.js'][23]++;
  if (data) {
    _$jscoverage['models/user.js'][26]++;
    responseDict.errCode = 2;
    _$jscoverage['models/user.js'][27]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/user.js'][32]++;
    if (! user.username || user.username.length === 0 || user.username.length > 128) {
      _$jscoverage['models/user.js'][34]++;
      responseDict.errCode = 3;
      _$jscoverage['models/user.js'][35]++;
      callback(responseDict);
    }
    else {
      _$jscoverage['models/user.js'][36]++;
      if (! user.password || user.password.length === 0 || user.password.length > 128) {
        _$jscoverage['models/user.js'][40]++;
        responseDict.errCode = 4;
        _$jscoverage['models/user.js'][41]++;
        callback(responseDict);
      }
      else {
        _$jscoverage['models/user.js'][43]++;
        if (user.isValid()) {
          _$jscoverage['models/user.js'][44]++;
          user.password = cryptPass(user.password);
        }
        _$jscoverage['models/user.js'][47]++;
        user.save((function (err, data) {
  _$jscoverage['models/user.js'][49]++;
  if (err) {
    _$jscoverage['models/user.js'][52]++;
    console.log("Error saving User: ");
    _$jscoverage['models/user.js'][53]++;
    responseDict.message = "";
    _$jscoverage['models/user.js'][54]++;
    for (var item in err) {
      _$jscoverage['models/user.js'][55]++;
      responseDict.message += err[item];
}
    _$jscoverage['models/user.js'][57]++;
    console.log(responseDict.message);
    _$jscoverage['models/user.js'][58]++;
    responseDict.errCode = 7;
    _$jscoverage['models/user.js'][59]++;
    callback(responseDict);
  }
  else {
    _$jscoverage['models/user.js'][64]++;
    responseDict.errCode = 1;
    _$jscoverage['models/user.js'][65]++;
    callback(responseDict);
  }
}));
      }
    }
  }
}));
});
_$jscoverage['models/user.js'][74]++;
User.getUsernames = (function (params, callback) {
  _$jscoverage['models/user.js'][76]++;
  usernames = [];
  _$jscoverage['models/user.js'][77]++;
  geddy.model.User.all((function (err, result) {
  _$jscoverage['models/user.js'][79]++;
  for (var recordId in result) {
    _$jscoverage['models/user.js'][81]++;
    usernames.push(result.recordId.username);
}
  _$jscoverage['models/user.js'][83]++;
  callback(usernames);
}));
});
_$jscoverage['models/user.js'][87]++;
User.TESTAPI_resetFixture = (function (callback) {
  _$jscoverage['models/user.js'][88]++;
  geddy.model.User.all((function (err, result) {
  _$jscoverage['models/user.js'][90]++;
  for (var userModel in result) {
    _$jscoverage['models/user.js'][92]++;
    geddy.model.User.remove(result[userModel].id);
}
  _$jscoverage['models/user.js'][94]++;
  var responseDict = {};
  _$jscoverage['models/user.js'][95]++;
  responseDict.errCode = 1;
  _$jscoverage['models/user.js'][96]++;
  callback(responseDict);
}));
});
_$jscoverage['models/user.js'][100]++;
User = geddy.model.register("User", User);
_$jscoverage['models/user.js'].source = ["var passport = require('passport')","  , passportHelper = require('../helpers/passport/index')","  , cryptPass = passportHelper.cryptPass;","","var User = function () {","\tthis.property('username', 'string', {required: true});","    this.property('password', 'string', {required: true});","    this.property('familyName', 'string');","    this.property('givenName', 'string');","    this.property('email', 'string');","    this.property('myevents', 'string');","    this.validatesLength('username', {min: 3, max:128});","    this.validatesLength('password', {min: 8, max:128});","    this.validatesConfirmed('password', 'confirmPassword');","","    this.hasMany('Passports');","};","","User.add = function(user, callback){","    // Non-blocking uniqueness checks are hard","    User.first({username: user.username}, function(err, data) {","      var responseDict = {};","    if (data) {","      // console.log(\"USER EXISTS\");","      //Username Exists errCode=2","      responseDict.errCode = 2;","      callback(responseDict);","      //self.transfer('add');","    }","    else {","      // console.log(\"USER DOESNT EXIST\");","      if (!user.username || user.username.length === 0 || user.username.length &gt; 128) {","        // console.log(\"bad username block\");","        responseDict.errCode = 3; //\"ERR_BAD_USERNAME\"","        callback(responseDict);","      } else if (!user.password || user.password.length === 0 || user.password.length &gt; 128 ) {","        //|| user.confirmPassword != user.password){","        // console.log(\"bad password block with confirmPassword: \" + user.confirmPassword);","        //Check if password is not empty and &lt;128 chars","        responseDict.errCode = 4; //\"ERR_BAD_PASSWORD\"","        callback(responseDict);","      } else {","        if (user.isValid()) {","          user.password = cryptPass(user.password);","        }","        // console.log(\"user is : username: \" + user.username + \" and password: \" + user.password);","        user.save(function(err, data) {","          // console.log(\"Got Data: \" + data);","          if (err) {","            // params.errors = err;","            //Database Error errCode=7","            console.log(\"Error saving User: \");","            responseDict.message = \"\";","            for (var item in err){","              responseDict.message += err[item];","            }","            console.log(responseDict.message);","            responseDict.errCode = 7;","            callback(responseDict);","            // self.transfer('add');","          }","          else {","            //Success errCode=1","            responseDict.errCode = 1;","            callback(responseDict);","              // self.redirect({controller: self.name});","          }","        });","      }","    }","    });","};","","User.getUsernames = function(params, callback)","{","  usernames = [];","  geddy.model.User.all(function(err, result)","  {","    for(var recordId in result)","    {","      usernames.push(result.recordId.username);","    }","    callback(usernames);","  });","};","","User.TESTAPI_resetFixture = function (callback) {","  geddy.model.User.all(function (err, result) {","     // console.log(\"got all users models with error: \" + err + \" and result: \" + result);","    for (var userModel in result){","       // console.log(\"trying to remove userModel: \" + result[userModel]);","      geddy.model.User.remove(result[userModel].id);","    }","    var responseDict = {};","  responseDict.errCode = 1;","    callback(responseDict); //\"SUCCESS\"","  });","};","","User = geddy.model.register('User', User);"];
}());